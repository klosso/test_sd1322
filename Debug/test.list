
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d594  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef4  0800d6a0  0800d6a0  0001d6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e594  0800e594  000209e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e594  0800e594  000209e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e594  0800e594  000209e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e594  0800e594  0001e594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e598  0800e598  0001e598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e0  20000000  0800e59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  200009e0  0800ef7c  000209e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200025d4  0800ef7c  000225d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000578b6  00000000  00000000  00020a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060dd  00000000  00000000  000782bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003d30  00000000  00000000  0007e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003a70  00000000  00000000  000820d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f12b  00000000  00000000  00085b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e844  00000000  00000000  000a4c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1055  00000000  00000000  000d34af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184504  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010ce4  00000000  00000000  00184554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200009e0 	.word	0x200009e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800d688 	.word	0x0800d688

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200009e4 	.word	0x200009e4
 8000148:	0800d688 	.word	0x0800d688

0800014c <prescaler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int prescaler( long min1, long max1, long min2, long max2, int val ){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
    return min2+ (val-min1)* (max2-min2)/ (max1-min1);
 800015a:	69ba      	ldr	r2, [r7, #24]
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	6839      	ldr	r1, [r7, #0]
 8000162:	687a      	ldr	r2, [r7, #4]
 8000164:	1a8a      	subs	r2, r1, r2
 8000166:	fb03 f202 	mul.w	r2, r3, r2
 800016a:	68b9      	ldr	r1, [r7, #8]
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	1acb      	subs	r3, r1, r3
 8000170:	fb92 f2f3 	sdiv	r2, r2, r3
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
}
 8000178:	4618      	mov	r0, r3
 800017a:	3714      	adds	r7, #20
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
	...

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b0ae      	sub	sp, #184	; 0xb8
 8000188:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
    uint16_t inc=0;
 800018a:	2300      	movs	r3, #0
 800018c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
    char data[20];
//    int Volume=prescaler(0, 2800, VOL_MIN, VOL_MAX, adcVal.volume);
    adcVal.volume =9999;
 8000190:	4b8f      	ldr	r3, [pc, #572]	; (80003d0 <main+0x24c>)
 8000192:	f242 720f 	movw	r2, #9999	; 0x270f
 8000196:	80da      	strh	r2, [r3, #6]
    RTC_TimeTypeDef sTime={ 0 };
 8000198:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800019c:	2100      	movs	r1, #0
 800019e:	460a      	mov	r2, r1
 80001a0:	801a      	strh	r2, [r3, #0]
 80001a2:	460a      	mov	r2, r1
 80001a4:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a6:	f002 fdd3 	bl	8002d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001aa:	f000 f935 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ae:	f000 fb77 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001b2:	f000 fb57 	bl	8000864 <MX_DMA_Init>
  MX_SPI2_Init();
 80001b6:	f000 fa83 	bl	80006c0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80001ba:	f000 fb29 	bl	8000810 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80001be:	f000 f98f 	bl	80004e0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80001c2:	f000 fa05 	bl	80005d0 <MX_I2C2_Init>
  MX_RTC_Init();
 80001c6:	f000 fa31 	bl	800062c <MX_RTC_Init>
  MX_TIM3_Init();
 80001ca:	f000 fab1 	bl	8000730 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80001ce:	f00c f939 	bl	800c444 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  hdma_adc1.Instance = DMA1_Channel1;
 80001d2:	4b80      	ldr	r3, [pc, #512]	; (80003d4 <main+0x250>)
 80001d4:	4a80      	ldr	r2, [pc, #512]	; (80003d8 <main+0x254>)
 80001d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80001d8:	4b7e      	ldr	r3, [pc, #504]	; (80003d4 <main+0x250>)
 80001da:	2200      	movs	r2, #0
 80001dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80001de:	4b7d      	ldr	r3, [pc, #500]	; (80003d4 <main+0x250>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80001e4:	4b7b      	ldr	r3, [pc, #492]	; (80003d4 <main+0x250>)
 80001e6:	2280      	movs	r2, #128	; 0x80
 80001e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80001ea:	4b7a      	ldr	r3, [pc, #488]	; (80003d4 <main+0x250>)
 80001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80001f2:	4b78      	ldr	r3, [pc, #480]	; (80003d4 <main+0x250>)
 80001f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80001fa:	4b76      	ldr	r3, [pc, #472]	; (80003d4 <main+0x250>)
 80001fc:	2220      	movs	r2, #32
 80001fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000200:	4b74      	ldr	r3, [pc, #464]	; (80003d4 <main+0x250>)
 8000202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000206:	61da      	str	r2, [r3, #28]
    HAL_DMA_Init(&hdma_adc1);
 8000208:	4872      	ldr	r0, [pc, #456]	; (80003d4 <main+0x250>)
 800020a:	f003 fbad 	bl	8003968 <HAL_DMA_Init>
    __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 800020e:	4b73      	ldr	r3, [pc, #460]	; (80003dc <main+0x258>)
 8000210:	4a70      	ldr	r2, [pc, #448]	; (80003d4 <main+0x250>)
 8000212:	621a      	str	r2, [r3, #32]
 8000214:	4b6f      	ldr	r3, [pc, #444]	; (80003d4 <main+0x250>)
 8000216:	4a71      	ldr	r2, [pc, #452]	; (80003dc <main+0x258>)
 8000218:	625a      	str	r2, [r3, #36]	; 0x24

    HAL_ADCEx_Calibration_Start(&hadc1);
 800021a:	4870      	ldr	r0, [pc, #448]	; (80003dc <main+0x258>)
 800021c:	f003 f9ea 	bl	80035f4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcVal, sizeof (adcVal)/sizeof(uint16_t));
 8000220:	2205      	movs	r2, #5
 8000222:	496b      	ldr	r1, [pc, #428]	; (80003d0 <main+0x24c>)
 8000224:	486d      	ldr	r0, [pc, #436]	; (80003dc <main+0x258>)
 8000226:	f002 fef1 	bl	800300c <HAL_ADC_Start_DMA>

//    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
//    htim2.Instance->CNT=0;

  u8g2_t u8g2;
  u8g2_Setup_ssd1322_nhd_256x64_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 800022a:	4638      	mov	r0, r7
 800022c:	4b6c      	ldr	r3, [pc, #432]	; (80003e0 <main+0x25c>)
 800022e:	4a6d      	ldr	r2, [pc, #436]	; (80003e4 <main+0x260>)
 8000230:	496d      	ldr	r1, [pc, #436]	; (80003e8 <main+0x264>)
 8000232:	f001 f8ab 	bl	800138c <u8g2_Setup_ssd1322_nhd_256x64_f>
      u8g2_InitDisplay(&u8g2);
 8000236:	463b      	mov	r3, r7
 8000238:	4618      	mov	r0, r3
 800023a:	f002 fcc6 	bl	8002bca <u8x8_InitDisplay>
      u8g2_ClearDisplay(&u8g2);
 800023e:	463b      	mov	r3, r7
 8000240:	4618      	mov	r0, r3
 8000242:	f001 f87e 	bl	8001342 <u8g2_ClearDisplay>
      u8g2_SetPowerSave(&u8g2, 0);
 8000246:	463b      	mov	r3, r7
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f002 fccc 	bl	8002be8 <u8x8_SetPowerSave>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    HAL_GPIO_WritePin(DRV_L_GPIO_Port, DRV_L_Pin, !HAL_GPIO_ReadPin(SW_LOW_GPIO_Port, SW_LOW_Pin));
 8000250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000254:	4865      	ldr	r0, [pc, #404]	; (80003ec <main+0x268>)
 8000256:	f003 fef9 	bl	800404c <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	bf0c      	ite	eq
 8000260:	2301      	moveq	r3, #1
 8000262:	2300      	movne	r3, #0
 8000264:	b2db      	uxtb	r3, r3
 8000266:	461a      	mov	r2, r3
 8000268:	2140      	movs	r1, #64	; 0x40
 800026a:	4860      	ldr	r0, [pc, #384]	; (80003ec <main+0x268>)
 800026c:	f003 ff05 	bl	800407a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DRV_R_GPIO_Port, DRV_R_Pin, !HAL_GPIO_ReadPin(SW_HIGH_GPIO_Port, SW_HIGH_Pin));
 8000270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000274:	485d      	ldr	r0, [pc, #372]	; (80003ec <main+0x268>)
 8000276:	f003 fee9 	bl	800404c <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	bf0c      	ite	eq
 8000280:	2301      	moveq	r3, #1
 8000282:	2300      	movne	r3, #0
 8000284:	b2db      	uxtb	r3, r3
 8000286:	461a      	mov	r2, r3
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	4858      	ldr	r0, [pc, #352]	; (80003ec <main+0x268>)
 800028c:	f003 fef5 	bl	800407a <HAL_GPIO_WritePin>
//    HAL_Delay(20);
    if (!(inc++ %500)){
 8000290:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 800029a:	4a55      	ldr	r2, [pc, #340]	; (80003f0 <main+0x26c>)
 800029c:	fba2 1203 	umull	r1, r2, r2, r3
 80002a0:	0952      	lsrs	r2, r2, #5
 80002a2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80002a6:	fb01 f202 	mul.w	r2, r1, r2
 80002aa:	1a9b      	subs	r3, r3, r2
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d104      	bne.n	80002bc <main+0x138>
        HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80002b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b6:	484f      	ldr	r0, [pc, #316]	; (80003f4 <main+0x270>)
 80002b8:	f003 fef7 	bl	80040aa <HAL_GPIO_TogglePin>
//    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
//        adcVal.volume  = HAL_ADC_GetValue(&hadc1);
//        HAL_ADC_Start(&hadc1);
//    }else
//        adcVal.volume = 6666;
    u8g2_FirstPage(&u8g2);
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fffd 	bl	80012be <u8g2_FirstPage>
    do{
        u8g2_ClearBuffer(&u8g2);
 80002c4:	463b      	mov	r3, r7
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 ff6e 	bl	80011a8 <u8g2_ClearBuffer>
        u8g2_SetBitmapMode(&u8g2, 2);
 80002cc:	463b      	mov	r3, r7
 80002ce:	2102      	movs	r1, #2
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fea9 	bl	8001028 <u8g2_SetBitmapMode>
        //u8g2_SetDrawColor(&u8g2, 1);
        if(GPIO_PIN_RESET==HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin)){
 80002d6:	2104      	movs	r1, #4
 80002d8:	4847      	ldr	r0, [pc, #284]	; (80003f8 <main+0x274>)
 80002da:	f003 feb7 	bl	800404c <HAL_GPIO_ReadPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10a      	bne.n	80002fa <main+0x176>
            u8g2_DrawXBM(&u8g2, 0, 0, Audio_256x64_width, Audio_256x64_height, (const uint8_t*)&Audio_256x64_bits);
 80002e4:	4638      	mov	r0, r7
 80002e6:	4b45      	ldr	r3, [pc, #276]	; (80003fc <main+0x278>)
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2340      	movs	r3, #64	; 0x40
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f2:	2200      	movs	r2, #0
 80002f4:	2100      	movs	r1, #0
 80002f6:	f000 ff14 	bl	8001122 <u8g2_DrawXBM>
        }
        u8g2_SetFont(&u8g2, u8g2_font_VCR_OSD_tf);
 80002fa:	463b      	mov	r3, r7
 80002fc:	4940      	ldr	r1, [pc, #256]	; (8000400 <main+0x27c>)
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fdee 	bl	8001ee0 <u8g2_SetFont>

//        Volume=prescaler(0, 2800, VOL_MIN, VOL_MAX, adcVal.volume);
//        sprintf(data, "VOL=%+ddB", Volume);
        sprintf(data, "V=%d", adcVal.volume);
 8000304:	4b32      	ldr	r3, [pc, #200]	; (80003d0 <main+0x24c>)
 8000306:	88db      	ldrh	r3, [r3, #6]
 8000308:	b29b      	uxth	r3, r3
 800030a:	461a      	mov	r2, r3
 800030c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000310:	493c      	ldr	r1, [pc, #240]	; (8000404 <main+0x280>)
 8000312:	4618      	mov	r0, r3
 8000314:	f00c fd3e 	bl	800cd94 <siprintf>
        u8g2_DrawStr(&u8g2, 28, 64, data);
 8000318:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800031c:	4638      	mov	r0, r7
 800031e:	2240      	movs	r2, #64	; 0x40
 8000320:	211c      	movs	r1, #28
 8000322:	f001 fd3f 	bl	8001da4 <u8g2_DrawStr>

//        sprintf(data, "BASS=%+ddB", prescaler(0, 3850, BASS_MAX, BASS_MIN, adcVal.bass));
        sprintf(data, "BASS=%+ddB", adcVal.bass);
 8000326:	4b2a      	ldr	r3, [pc, #168]	; (80003d0 <main+0x24c>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	b29b      	uxth	r3, r3
 800032c:	461a      	mov	r2, r3
 800032e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000332:	4935      	ldr	r1, [pc, #212]	; (8000408 <main+0x284>)
 8000334:	4618      	mov	r0, r3
 8000336:	f00c fd2d 	bl	800cd94 <siprintf>
        u8g2_DrawStr(&u8g2, 0, 48, data);
 800033a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800033e:	4638      	mov	r0, r7
 8000340:	2230      	movs	r2, #48	; 0x30
 8000342:	2100      	movs	r1, #0
 8000344:	f001 fd2e 	bl	8001da4 <u8g2_DrawStr>
        sprintf(data, "TRBL=%+ddB", prescaler(0, 3850, TRBL_MAX, TRBL_MIN, adcVal.trbl));
 8000348:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <main+0x24c>)
 800034a:	885b      	ldrh	r3, [r3, #2]
 800034c:	b29b      	uxth	r3, r3
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	f06f 030b 	mvn.w	r3, #11
 8000354:	220c      	movs	r2, #12
 8000356:	f640 710a 	movw	r1, #3850	; 0xf0a
 800035a:	2000      	movs	r0, #0
 800035c:	f7ff fef6 	bl	800014c <prescaler>
 8000360:	4602      	mov	r2, r0
 8000362:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000366:	4929      	ldr	r1, [pc, #164]	; (800040c <main+0x288>)
 8000368:	4618      	mov	r0, r3
 800036a:	f00c fd13 	bl	800cd94 <siprintf>
        u8g2_DrawStr(&u8g2, 128, 48, data);
 800036e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000372:	4638      	mov	r0, r7
 8000374:	2230      	movs	r2, #48	; 0x30
 8000376:	2180      	movs	r1, #128	; 0x80
 8000378:	f001 fd14 	bl	8001da4 <u8g2_DrawStr>

//                    sprintf(data, "ENC=%d", (int)(TIM2->CNT>>1));
//                    u8g2_DrawStr(&u8g2, 0, 32, data);


        HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800037c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000380:	2200      	movs	r2, #0
 8000382:	4619      	mov	r1, r3
 8000384:	4822      	ldr	r0, [pc, #136]	; (8000410 <main+0x28c>)
 8000386:	f006 fb7b 	bl	8006a80 <HAL_RTC_GetTime>
        sprintf(data, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800038a:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800038e:	461a      	mov	r2, r3
 8000390:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8000394:	4619      	mov	r1, r3
 8000396:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800039a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	460b      	mov	r3, r1
 80003a2:	491c      	ldr	r1, [pc, #112]	; (8000414 <main+0x290>)
 80003a4:	f00c fcf6 	bl	800cd94 <siprintf>
        u8g2_DrawStr(&u8g2, 150, 64, data);
 80003a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80003ac:	4638      	mov	r0, r7
 80003ae:	2240      	movs	r2, #64	; 0x40
 80003b0:	2196      	movs	r1, #150	; 0x96
 80003b2:	f001 fcf7 	bl	8001da4 <u8g2_DrawStr>

        }while ( u8g2_NextPage(&u8g2) );
 80003b6:	463b      	mov	r3, r7
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 ff94 	bl	80012e6 <u8g2_NextPage>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	f47f af7f 	bne.w	80002c4 <main+0x140>
        HAL_Delay(1);
 80003c6:	2001      	movs	r0, #1
 80003c8:	f002 fd24 	bl	8002e14 <HAL_Delay>
    HAL_GPIO_WritePin(DRV_L_GPIO_Port, DRV_L_Pin, !HAL_GPIO_ReadPin(SW_LOW_GPIO_Port, SW_LOW_Pin));
 80003cc:	e740      	b.n	8000250 <main+0xcc>
 80003ce:	bf00      	nop
 80003d0:	200009fc 	.word	0x200009fc
 80003d4:	20000a38 	.word	0x20000a38
 80003d8:	40020008 	.word	0x40020008
 80003dc:	20000a08 	.word	0x20000a08
 80003e0:	08000e79 	.word	0x08000e79
 80003e4:	08000f65 	.word	0x08000f65
 80003e8:	0800e4c0 	.word	0x0800e4c0
 80003ec:	40010c00 	.word	0x40010c00
 80003f0:	10624dd3 	.word	0x10624dd3
 80003f4:	40011000 	.word	0x40011000
 80003f8:	40010800 	.word	0x40010800
 80003fc:	20000000 	.word	0x20000000
 8000400:	0800d750 	.word	0x0800d750
 8000404:	0800d6a0 	.word	0x0800d6a0
 8000408:	0800d6a8 	.word	0x0800d6a8
 800040c:	0800d6b4 	.word	0x0800d6b4
 8000410:	20000ad0 	.word	0x20000ad0
 8000414:	0800d6c0 	.word	0x0800d6c0

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b094      	sub	sp, #80	; 0x50
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000422:	2228      	movs	r2, #40	; 0x28
 8000424:	2100      	movs	r1, #0
 8000426:	4618      	mov	r0, r3
 8000428:	f00c fcac 	bl	800cd84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042c:	f107 0314 	add.w	r3, r7, #20
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000448:	2309      	movs	r3, #9
 800044a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800044c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000456:	2301      	movs	r3, #1
 8000458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800045a:	2301      	movs	r3, #1
 800045c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045e:	2302      	movs	r3, #2
 8000460:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000462:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000468:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800046c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000472:	4618      	mov	r0, r3
 8000474:	f005 fc46 	bl	8005d04 <HAL_RCC_OscConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800047e:	f000 faad 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000482:	230f      	movs	r3, #15
 8000484:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000486:	2302      	movs	r3, #2
 8000488:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000492:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000498:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	2102      	movs	r1, #2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f005 feb1 	bl	8006208 <HAL_RCC_ClockConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004ac:	f000 fa96 	bl	80009dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80004b0:	2313      	movs	r3, #19
 80004b2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80004b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004be:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f006 f836 	bl	8006538 <HAL_RCCEx_PeriphCLKConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80004d2:	f000 fa83 	bl	80009dc <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3750      	adds	r7, #80	; 0x50
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004f0:	4b35      	ldr	r3, [pc, #212]	; (80005c8 <MX_ADC1_Init+0xe8>)
 80004f2:	4a36      	ldr	r2, [pc, #216]	; (80005cc <MX_ADC1_Init+0xec>)
 80004f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004f6:	4b34      	ldr	r3, [pc, #208]	; (80005c8 <MX_ADC1_Init+0xe8>)
 80004f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <MX_ADC1_Init+0xe8>)
 8000500:	2201      	movs	r2, #1
 8000502:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <MX_ADC1_Init+0xe8>)
 8000506:	2200      	movs	r2, #0
 8000508:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <MX_ADC1_Init+0xe8>)
 800050c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000510:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000512:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <MX_ADC1_Init+0xe8>)
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000518:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_ADC1_Init+0xe8>)
 800051a:	2205      	movs	r2, #5
 800051c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051e:	482a      	ldr	r0, [pc, #168]	; (80005c8 <MX_ADC1_Init+0xe8>)
 8000520:	f002 fc9c 	bl	8002e5c <HAL_ADC_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800052a:	f000 fa57 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800052e:	2303      	movs	r3, #3
 8000530:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000532:	2301      	movs	r3, #1
 8000534:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	4822      	ldr	r0, [pc, #136]	; (80005c8 <MX_ADC1_Init+0xe8>)
 8000540:	f002 fe5e 	bl	8003200 <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800054a:	f000 fa47 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800054e:	2304      	movs	r3, #4
 8000550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000552:	2302      	movs	r3, #2
 8000554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4619      	mov	r1, r3
 800055a:	481b      	ldr	r0, [pc, #108]	; (80005c8 <MX_ADC1_Init+0xe8>)
 800055c:	f002 fe50 	bl	8003200 <HAL_ADC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000566:	f000 fa39 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800056a:	2305      	movs	r3, #5
 800056c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800056e:	2303      	movs	r3, #3
 8000570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	4619      	mov	r1, r3
 8000576:	4814      	ldr	r0, [pc, #80]	; (80005c8 <MX_ADC1_Init+0xe8>)
 8000578:	f002 fe42 	bl	8003200 <HAL_ADC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000582:	f000 fa2b 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000586:	2306      	movs	r3, #6
 8000588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800058a:	2304      	movs	r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_ADC1_Init+0xe8>)
 8000594:	f002 fe34 	bl	8003200 <HAL_ADC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800059e:	f000 fa1d 	bl	80009dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005a2:	2309      	movs	r3, #9
 80005a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80005a6:	2305      	movs	r3, #5
 80005a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_ADC1_Init+0xe8>)
 80005b0:	f002 fe26 	bl	8003200 <HAL_ADC_ConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005ba:	f000 fa0f 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000a08 	.word	0x20000a08
 80005cc:	40012400 	.word	0x40012400

080005d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_I2C2_Init+0x50>)
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <MX_I2C2_Init+0x54>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_I2C2_Init+0x50>)
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_I2C2_Init+0x58>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_I2C2_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_I2C2_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_I2C2_Init+0x50>)
 80005ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_I2C2_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_I2C2_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_I2C2_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_I2C2_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_I2C2_Init+0x50>)
 800060e:	f003 fd65 	bl	80040dc <HAL_I2C_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000618:	f000 f9e0 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000a7c 	.word	0x20000a7c
 8000624:	40005800 	.word	0x40005800
 8000628:	000186a0 	.word	0x000186a0

0800062c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2100      	movs	r1, #0
 8000636:	460a      	mov	r2, r1
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	460a      	mov	r2, r1
 800063c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000642:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_RTC_Init+0x8c>)
 8000644:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <MX_RTC_Init+0x90>)
 8000646:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <MX_RTC_Init+0x8c>)
 800064a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800064e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_RTC_Init+0x8c>)
 8000652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000656:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000658:	4817      	ldr	r0, [pc, #92]	; (80006b8 <MX_RTC_Init+0x8c>)
 800065a:	f006 f8e3 	bl	8006824 <HAL_RTC_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000664:	f000 f9ba 	bl	80009dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8000668:	2313      	movs	r3, #19
 800066a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800066c:	2300      	movs	r3, #0
 800066e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000670:	2300      	movs	r3, #0
 8000672:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2201      	movs	r2, #1
 8000678:	4619      	mov	r1, r3
 800067a:	480f      	ldr	r0, [pc, #60]	; (80006b8 <MX_RTC_Init+0x8c>)
 800067c:	f006 f968 	bl	8006950 <HAL_RTC_SetTime>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000686:	f000 f9a9 	bl	80009dc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800068a:	2301      	movs	r3, #1
 800068c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800068e:	2301      	movs	r3, #1
 8000690:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000692:	2301      	movs	r3, #1
 8000694:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x40;
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	2201      	movs	r2, #1
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_RTC_Init+0x8c>)
 80006a2:	f006 fac5 	bl	8006c30 <HAL_RTC_SetDate>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80006ac:	f000 f996 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000ad0 	.word	0x20000ad0
 80006bc:	40002800 	.word	0x40002800

080006c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_SPI2_Init+0x68>)
 80006c6:	4a19      	ldr	r2, [pc, #100]	; (800072c <MX_SPI2_Init+0x6c>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_SPI2_Init+0x68>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_SPI2_Init+0x68>)
 80006d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_SPI2_Init+0x68>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_SPI2_Init+0x68>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_SPI2_Init+0x68>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_SPI2_Init+0x68>)
 80006ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_SPI2_Init+0x68>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_SPI2_Init+0x68>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_SPI2_Init+0x68>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_SPI2_Init+0x68>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_SPI2_Init+0x68>)
 800070e:	220a      	movs	r2, #10
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_SPI2_Init+0x68>)
 8000714:	f006 fde4 	bl	80072e0 <HAL_SPI_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800071e:	f000 f95d 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000ae4 	.word	0x20000ae4
 800072c:	40003800 	.word	0x40003800

08000730 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_TIM3_Init+0xd8>)
 800075c:	4a2b      	ldr	r2, [pc, #172]	; (800080c <MX_TIM3_Init+0xdc>)
 800075e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_TIM3_Init+0xd8>)
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000766:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_TIM3_Init+0xd8>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_TIM3_Init+0xd8>)
 800076e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000772:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_TIM3_Init+0xd8>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_TIM3_Init+0xd8>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000780:	4821      	ldr	r0, [pc, #132]	; (8000808 <MX_TIM3_Init+0xd8>)
 8000782:	f007 f813 	bl	80077ac <HAL_TIM_Base_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800078c:	f000 f926 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	4619      	mov	r1, r3
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <MX_TIM3_Init+0xd8>)
 800079e:	f007 f940 	bl	8007a22 <HAL_TIM_ConfigClockSource>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80007a8:	f000 f918 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <MX_TIM3_Init+0xd8>)
 80007ae:	f007 f84c 	bl	800784a <HAL_TIM_IC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007b8:	f000 f910 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	480f      	ldr	r0, [pc, #60]	; (8000808 <MX_TIM3_Init+0xd8>)
 80007cc:	f007 fbf4 	bl	8007fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80007d6:	f000 f901 	bl	80009dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80007de:	2301      	movs	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80007ea:	463b      	mov	r3, r7
 80007ec:	2204      	movs	r2, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_TIM3_Init+0xd8>)
 80007f2:	f007 f882 	bl	80078fa <HAL_TIM_IC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80007fc:	f000 f8ee 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000b3c 	.word	0x20000b3c
 800080c:	40000400 	.word	0x40000400

08000810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART1_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART1_UART_Init+0x4c>)
 8000848:	f007 fc14 	bl	8008074 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000852:	f000 f8c3 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000b84 	.word	0x20000b84
 8000860:	40013800 	.word	0x40013800

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_DMA_Init+0x38>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <MX_DMA_Init+0x38>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_DMA_Init+0x38>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	200b      	movs	r0, #11
 8000888:	f003 f837 	bl	80038fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800088c:	200b      	movs	r0, #11
 800088e:	f003 f850 	bl	8003932 <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b4:	4b45      	ldr	r3, [pc, #276]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a44      	ldr	r2, [pc, #272]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008ba:	f043 0310 	orr.w	r3, r3, #16
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b42      	ldr	r3, [pc, #264]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0310 	and.w	r3, r3, #16
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008cc:	4b3f      	ldr	r3, [pc, #252]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a3e      	ldr	r2, [pc, #248]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008d2:	f043 0320 	orr.w	r3, r3, #32
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0320 	and.w	r3, r3, #32
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b39      	ldr	r3, [pc, #228]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a38      	ldr	r2, [pc, #224]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b36      	ldr	r3, [pc, #216]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <MX_GPIO_Init+0x12c>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a32      	ldr	r2, [pc, #200]	; (80009cc <MX_GPIO_Init+0x12c>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b30      	ldr	r3, [pc, #192]	; (80009cc <MX_GPIO_Init+0x12c>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091a:	482d      	ldr	r0, [pc, #180]	; (80009d0 <MX_GPIO_Init+0x130>)
 800091c:	f003 fbad 	bl	800407a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_DC_Pin|DRV_L_Pin|DRV_R_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f244 01c0 	movw	r1, #16576	; 0x40c0
 8000926:	482b      	ldr	r0, [pc, #172]	; (80009d4 <MX_GPIO_Init+0x134>)
 8000928:	f003 fba7 	bl	800407a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	4829      	ldr	r0, [pc, #164]	; (80009d8 <MX_GPIO_Init+0x138>)
 8000934:	f003 fba1 	bl	800407a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2302      	movs	r3, #2
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	481f      	ldr	r0, [pc, #124]	; (80009d0 <MX_GPIO_Init+0x130>)
 8000952:	f003 f9f7 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BTN_Pin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000956:	2304      	movs	r3, #4
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	481b      	ldr	r0, [pc, #108]	; (80009d8 <MX_GPIO_Init+0x138>)
 800096a:	f003 f9eb 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin DRV_L_Pin DRV_R_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|DRV_L_Pin|DRV_R_Pin;
 800096e:	f244 03c0 	movw	r3, #16576	; 0x40c0
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MX_GPIO_Init+0x134>)
 8000988:	f003 f9dc 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 800098c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2302      	movs	r3, #2
 800099c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	4619      	mov	r1, r3
 80009a4:	480c      	ldr	r0, [pc, #48]	; (80009d8 <MX_GPIO_Init+0x138>)
 80009a6:	f003 f9cd 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_HIGH_Pin SW_LOW_Pin */
  GPIO_InitStruct.Pin = SW_HIGH_Pin|SW_LOW_Pin;
 80009aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_GPIO_Init+0x134>)
 80009c0:	f003 f9c0 	bl	8003d44 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40011000 	.word	0x40011000
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	40010800 	.word	0x40010800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_MspInit+0x40>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_MspInit+0x40>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_MspInit+0x40>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_MspInit+0x40>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_MspInit+0x40>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_MspInit+0x40>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000

08000a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0318 	add.w	r3, r7, #24
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a33      	ldr	r2, [pc, #204]	; (8000b14 <HAL_ADC_MspInit+0xe8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d15f      	bne.n	8000b0c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a4c:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a31      	ldr	r2, [pc, #196]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b2f      	ldr	r3, [pc, #188]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b2c      	ldr	r3, [pc, #176]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a2b      	ldr	r2, [pc, #172]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0304 	and.w	r3, r3, #4
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b23      	ldr	r3, [pc, #140]	; (8000b18 <HAL_ADC_MspInit+0xec>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0308 	and.w	r3, r3, #8
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BASS_Pin|TRBL_Pin|BALNC_Pin|VOL_Pin;
 8000a94:	2378      	movs	r3, #120	; 0x78
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481e      	ldr	r0, [pc, #120]	; (8000b1c <HAL_ADC_MspInit+0xf0>)
 8000aa4:	f003 f94e 	bl	8003d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LM_IN_Pin;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aac:	2303      	movs	r3, #3
 8000aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LM_IN_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481a      	ldr	r0, [pc, #104]	; (8000b20 <HAL_ADC_MspInit+0xf4>)
 8000ab8:	f003 f944 	bl	8003d44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000abe:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <HAL_ADC_MspInit+0xfc>)
 8000ac0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ada:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ae2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000ae6:	2220      	movs	r2, #32
 8000ae8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000af2:	f002 ff39 	bl	8003968 <HAL_DMA_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000afc:	f7ff ff6e 	bl	80009dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000b04:	621a      	str	r2, [r3, #32]
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_ADC_MspInit+0xf8>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40012400 	.word	0x40012400
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	20000a38 	.word	0x20000a38
 8000b28:	40020008 	.word	0x40020008

08000b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <HAL_I2C_MspInit+0x74>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d124      	bne.n	8000b96 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a14      	ldr	r2, [pc, #80]	; (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	480b      	ldr	r0, [pc, #44]	; (8000ba8 <HAL_I2C_MspInit+0x7c>)
 8000b7a:	f003 f8e3 	bl	8003d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_I2C_MspInit+0x78>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40005800 	.word	0x40005800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010c00 	.word	0x40010c00

08000bac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_RTC_MspInit+0x3c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d110      	bne.n	8000be0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000bbe:	f005 f895 	bl	8005cec <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_RTC_MspInit+0x40>)
 8000bc4:	69db      	ldr	r3, [r3, #28]
 8000bc6:	4a09      	ldr	r2, [pc, #36]	; (8000bec <HAL_RTC_MspInit+0x40>)
 8000bc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bcc:	61d3      	str	r3, [r2, #28]
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <HAL_RTC_MspInit+0x40>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_RTC_MspInit+0x44>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40002800 	.word	0x40002800
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	4242043c 	.word	0x4242043c

08000bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a16      	ldr	r2, [pc, #88]	; (8000c68 <HAL_SPI_MspInit+0x74>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d124      	bne.n	8000c5e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_SPI_MspInit+0x78>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <HAL_SPI_MspInit+0x78>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	61d3      	str	r3, [r2, #28]
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <HAL_SPI_MspInit+0x78>)
 8000c22:	69db      	ldr	r3, [r3, #28]
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_SPI_MspInit+0x78>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_SPI_MspInit+0x78>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_SPI_MspInit+0x78>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000c44:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_SPI_MspInit+0x7c>)
 8000c5a:	f003 f873 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40003800 	.word	0x40003800
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM3)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a15      	ldr	r2, [pc, #84]	; (8000ce4 <HAL_TIM_Base_MspInit+0x70>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d123      	bne.n	8000cdc <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <HAL_TIM_Base_MspInit+0x74>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <HAL_TIM_Base_MspInit+0x74>)
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	61d3      	str	r3, [r2, #28]
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_TIM_Base_MspInit+0x74>)
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	f003 0302 	and.w	r3, r3, #2
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_TIM_Base_MspInit+0x74>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_TIM_Base_MspInit+0x74>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_TIM_Base_MspInit+0x74>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_TIM_Base_MspInit+0x78>)
 8000cd8:	f003 f834 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40000400 	.word	0x40000400
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010800 	.word	0x40010800

08000cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a1c      	ldr	r2, [pc, #112]	; (8000d7c <HAL_UART_MspInit+0x8c>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d131      	bne.n	8000d74 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d2e:	f043 0304 	orr.w	r3, r3, #4
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_UART_MspInit+0x90>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	480b      	ldr	r0, [pc, #44]	; (8000d84 <HAL_UART_MspInit+0x94>)
 8000d56:	f002 fff5 	bl	8003d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_UART_MspInit+0x94>)
 8000d70:	f002 ffe8 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40013800 	.word	0x40013800
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010800 	.word	0x40010800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dce:	f002 f805 	bl	8002ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <DMA1_Channel1_IRQHandler+0x10>)
 8000dde:	f002 fe7d 	bl	8003adc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000a38 	.word	0x20000a38

08000dec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000df2:	f003 fbe8 	bl	80045c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200020b8 	.word	0x200020b8

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f00b ff7e 	bl	800cd30 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20005000 	.word	0x20005000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	20000bc8 	.word	0x20000bc8
 8000e68:	200025d8 	.word	0x200025d8

08000e6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <u8x8_stm32_gpio_and_delay>:




uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	460b      	mov	r3, r1
 8000e84:	72fb      	strb	r3, [r7, #11]
 8000e86:	4613      	mov	r3, r2
 8000e88:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000e8a:	7afb      	ldrb	r3, [r7, #11]
 8000e8c:	3b28      	subs	r3, #40	; 0x28
 8000e8e:	2b23      	cmp	r3, #35	; 0x23
 8000e90:	d85f      	bhi.n	8000f52 <u8x8_stm32_gpio_and_delay+0xda>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <u8x8_stm32_gpio_and_delay+0x20>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f53 	.word	0x08000f53
 8000e9c:	08000f29 	.word	0x08000f29
 8000ea0:	08000f53 	.word	0x08000f53
 8000ea4:	08000f53 	.word	0x08000f53
 8000ea8:	08000f53 	.word	0x08000f53
 8000eac:	08000f53 	.word	0x08000f53
 8000eb0:	08000f53 	.word	0x08000f53
 8000eb4:	08000f53 	.word	0x08000f53
 8000eb8:	08000f53 	.word	0x08000f53
 8000ebc:	08000f53 	.word	0x08000f53
 8000ec0:	08000f53 	.word	0x08000f53
 8000ec4:	08000f53 	.word	0x08000f53
 8000ec8:	08000f53 	.word	0x08000f53
 8000ecc:	08000f53 	.word	0x08000f53
 8000ed0:	08000f53 	.word	0x08000f53
 8000ed4:	08000f53 	.word	0x08000f53
 8000ed8:	08000f53 	.word	0x08000f53
 8000edc:	08000f53 	.word	0x08000f53
 8000ee0:	08000f53 	.word	0x08000f53
 8000ee4:	08000f53 	.word	0x08000f53
 8000ee8:	08000f53 	.word	0x08000f53
 8000eec:	08000f53 	.word	0x08000f53
 8000ef0:	08000f53 	.word	0x08000f53
 8000ef4:	08000f53 	.word	0x08000f53
 8000ef8:	08000f53 	.word	0x08000f53
 8000efc:	08000f53 	.word	0x08000f53
 8000f00:	08000f53 	.word	0x08000f53
 8000f04:	08000f53 	.word	0x08000f53
 8000f08:	08000f53 	.word	0x08000f53
 8000f0c:	08000f53 	.word	0x08000f53
 8000f10:	08000f53 	.word	0x08000f53
 8000f14:	08000f53 	.word	0x08000f53
 8000f18:	08000f53 	.word	0x08000f53
 8000f1c:	08000f33 	.word	0x08000f33
 8000f20:	08000f43 	.word	0x08000f43
 8000f24:	08000f53 	.word	0x08000f53
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000f28:	7abb      	ldrb	r3, [r7, #10]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 ff72 	bl	8002e14 <HAL_Delay>
		break;
 8000f30:	e00f      	b.n	8000f52 <u8x8_stm32_gpio_and_delay+0xda>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8000f32:	7abb      	ldrb	r3, [r7, #10]
 8000f34:	461a      	mov	r2, r3
 8000f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <u8x8_stm32_gpio_and_delay+0xe4>)
 8000f3c:	f003 f89d 	bl	800407a <HAL_GPIO_WritePin>
		break;
 8000f40:	e007      	b.n	8000f52 <u8x8_stm32_gpio_and_delay+0xda>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8000f42:	7abb      	ldrb	r3, [r7, #10]
 8000f44:	461a      	mov	r2, r3
 8000f46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <u8x8_stm32_gpio_and_delay+0xe8>)
 8000f4c:	f003 f895 	bl	800407a <HAL_GPIO_WritePin>
		break;
 8000f50:	bf00      	nop
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
//		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
		break;
	}
	return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40010800 	.word	0x40010800
 8000f60:	40010c00 	.word	0x40010c00

08000f64 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	72fb      	strb	r3, [r7, #11]
 8000f72:	4613      	mov	r3, r2
 8000f74:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	3b14      	subs	r3, #20
 8000f7a:	2b0c      	cmp	r3, #12
 8000f7c:	d847      	bhi.n	800100e <u8x8_byte_stm32_hw_spi+0xaa>
 8000f7e:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <u8x8_byte_stm32_hw_spi+0x20>)
 8000f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f84:	08001013 	.word	0x08001013
 8000f88:	0800100f 	.word	0x0800100f
 8000f8c:	0800100f 	.word	0x0800100f
 8000f90:	08000fb9 	.word	0x08000fb9
 8000f94:	08000fdf 	.word	0x08000fdf
 8000f98:	08000ff7 	.word	0x08000ff7
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	0800100f 	.word	0x0800100f
 8000fa8:	0800100f 	.word	0x0800100f
 8000fac:	0800100f 	.word	0x0800100f
 8000fb0:	0800100f 	.word	0x0800100f
 8000fb4:	08000fd1 	.word	0x08000fd1
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8000fb8:	7abb      	ldrb	r3, [r7, #10]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	2364      	movs	r3, #100	; 0x64
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4818      	ldr	r0, [pc, #96]	; (8001024 <u8x8_byte_stm32_hw_spi+0xc0>)
 8000fc2:	f006 fa11 	bl	80073e8 <HAL_SPI_Transmit>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d024      	beq.n	8001016 <u8x8_byte_stm32_hw_spi+0xb2>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e024      	b.n	800101a <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8000fd0:	7abb      	ldrb	r3, [r7, #10]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	214a      	movs	r1, #74	; 0x4a
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f001 fe26 	bl	8002c28 <u8x8_gpio_call>
		break;
 8000fdc:	e01c      	b.n	8001018 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2149      	movs	r1, #73	; 0x49
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f001 fe1d 	bl	8002c28 <u8x8_gpio_call>
		HAL_Delay(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f001 ff10 	bl	8002e14 <HAL_Delay>
		break;
 8000ff4:	e010      	b.n	8001018 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f001 ff0c 	bl	8002e14 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	461a      	mov	r2, r3
 8001004:	2149      	movs	r1, #73	; 0x49
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f001 fe0e 	bl	8002c28 <u8x8_gpio_call>
		break;
 800100c:	e004      	b.n	8001018 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 800100e:	2300      	movs	r3, #0
 8001010:	e003      	b.n	800101a <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8001012:	bf00      	nop
 8001014:	e000      	b.n	8001018 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8001016:	bf00      	nop
	}
	return 1;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000ae4 	.word	0x20000ae4

08001028 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	78fa      	ldrb	r2, [r7, #3]
 8001038:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b088      	sub	sp, #32
 800104a:	af02      	add	r7, sp, #8
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	4608      	mov	r0, r1
 8001050:	4611      	mov	r1, r2
 8001052:	461a      	mov	r2, r3
 8001054:	4603      	mov	r3, r0
 8001056:	817b      	strh	r3, [r7, #10]
 8001058:	460b      	mov	r3, r1
 800105a:	813b      	strh	r3, [r7, #8]
 800105c:	4613      	mov	r3, r2
 800105e:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001066:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001068:	7dbb      	ldrb	r3, [r7, #22]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf0c      	ite	eq
 800106e:	2301      	moveq	r3, #1
 8001070:	2300      	movne	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001076:	897a      	ldrh	r2, [r7, #10]
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	4413      	add	r3, r2
 800107c:	b298      	uxth	r0, r3
 800107e:	893b      	ldrh	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	b29b      	uxth	r3, r3
 8001084:	893a      	ldrh	r2, [r7, #8]
 8001086:	8979      	ldrh	r1, [r7, #10]
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	4603      	mov	r3, r0
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f001 f86d 	bl	800216c <u8g2_IsIntersection>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d040      	beq.n	800111a <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 800109c:	e035      	b.n	800110a <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	4013      	ands	r3, r2
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00c      	beq.n	80010c6 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	7dba      	ldrb	r2, [r7, #22]
 80010b0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80010b4:	893a      	ldrh	r2, [r7, #8]
 80010b6:	8979      	ldrh	r1, [r7, #10]
 80010b8:	2300      	movs	r3, #0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 ff96 	bl	8001ff0 <u8g2_DrawHVLine>
 80010c4:	e010      	b.n	80010e8 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10b      	bne.n	80010e8 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	7d7a      	ldrb	r2, [r7, #21]
 80010d4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80010d8:	893a      	ldrh	r2, [r7, #8]
 80010da:	8979      	ldrh	r1, [r7, #10]
 80010dc:	2300      	movs	r3, #0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 ff84 	bl	8001ff0 <u8g2_DrawHVLine>
    }
    x++;
 80010e8:	897b      	ldrh	r3, [r7, #10]
 80010ea:	3301      	adds	r3, #1
 80010ec:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d104      	bne.n	8001104 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	75fb      	strb	r3, [r7, #23]
      b++;
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	3301      	adds	r3, #1
 8001102:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	3b01      	subs	r3, #1
 8001108:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1c6      	bne.n	800109e <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	7dba      	ldrb	r2, [r7, #22]
 8001114:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001118:	e000      	b.n	800111c <u8g2_DrawHXBM+0xd6>
    return;
 800111a:	bf00      	nop
}
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b088      	sub	sp, #32
 8001126:	af02      	add	r7, sp, #8
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	4608      	mov	r0, r1
 800112c:	4611      	mov	r1, r2
 800112e:	461a      	mov	r2, r3
 8001130:	4603      	mov	r3, r0
 8001132:	817b      	strh	r3, [r7, #10]
 8001134:	460b      	mov	r3, r1
 8001136:	813b      	strh	r3, [r7, #8]
 8001138:	4613      	mov	r3, r2
 800113a:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001140:	8afb      	ldrh	r3, [r7, #22]
 8001142:	3307      	adds	r3, #7
 8001144:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001146:	8afb      	ldrh	r3, [r7, #22]
 8001148:	08db      	lsrs	r3, r3, #3
 800114a:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800114c:	897a      	ldrh	r2, [r7, #10]
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4413      	add	r3, r2
 8001152:	b298      	uxth	r0, r3
 8001154:	893a      	ldrh	r2, [r7, #8]
 8001156:	8c3b      	ldrh	r3, [r7, #32]
 8001158:	4413      	add	r3, r2
 800115a:	b29b      	uxth	r3, r3
 800115c:	893a      	ldrh	r2, [r7, #8]
 800115e:	8979      	ldrh	r1, [r7, #10]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4603      	mov	r3, r0
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f001 f801 	bl	800216c <u8g2_IsIntersection>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d017      	beq.n	80011a0 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001170:	e012      	b.n	8001198 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001172:	88f8      	ldrh	r0, [r7, #6]
 8001174:	893a      	ldrh	r2, [r7, #8]
 8001176:	8979      	ldrh	r1, [r7, #10]
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4603      	mov	r3, r0
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f7ff ff61 	bl	8001046 <u8g2_DrawHXBM>
    bitmap += blen;
 8001184:	8afb      	ldrh	r3, [r7, #22]
 8001186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001188:	4413      	add	r3, r2
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 800118c:	893b      	ldrh	r3, [r7, #8]
 800118e:	3301      	adds	r3, #1
 8001190:	813b      	strh	r3, [r7, #8]
    h--;
 8001192:	8c3b      	ldrh	r3, [r7, #32]
 8001194:	3b01      	subs	r3, #1
 8001196:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001198:	8c3b      	ldrh	r3, [r7, #32]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1e9      	bne.n	8001172 <u8g2_DrawXBM+0x50>
 800119e:	e000      	b.n	80011a2 <u8g2_DrawXBM+0x80>
    return;
 80011a0:	bf00      	nop
  }
}
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	7c1b      	ldrb	r3, [r3, #16]
 80011b6:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	fb02 f303 	mul.w	r3, r2, r3
 80011c6:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00b fdd4 	bl	800cd84 <memset>
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]
 80011f0:	4613      	mov	r3, r2
 80011f2:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	7c1b      	ldrb	r3, [r3, #16]
 80011fa:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001204:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	b29b      	uxth	r3, r3
 800120a:	89ba      	ldrh	r2, [r7, #12]
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001212:	89bb      	ldrh	r3, [r7, #12]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001218:	89bb      	ldrh	r3, [r7, #12]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	4413      	add	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001220:	7bf9      	ldrb	r1, [r7, #15]
 8001222:	78ba      	ldrb	r2, [r7, #2]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	460b      	mov	r3, r1
 800122a:	2100      	movs	r1, #0
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f001 fc9b 	bl	8002b68 <u8x8_DrawTile>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800124c:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001254:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	7c5b      	ldrb	r3, [r3, #17]
 800125c:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800125e:	7bba      	ldrb	r2, [r7, #14]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ffbd 	bl	80011e4 <u8g2_send_tile_row>
    src_row++;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	3301      	adds	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	3301      	adds	r3, #1
 8001274:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	7b7b      	ldrb	r3, [r7, #13]
 800127a:	429a      	cmp	r2, r3
 800127c:	d203      	bcs.n	8001286 <u8g2_send_buffer+0x4c>
 800127e:	7bba      	ldrb	r2, [r7, #14]
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	429a      	cmp	r2, r3
 8001284:	d3eb      	bcc.n	800125e <u8g2_send_buffer+0x24>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	78fa      	ldrb	r2, [r7, #3]
 800129e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	4798      	blx	r3
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff69 	bl	80011a8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80012d6:	2100      	movs	r1, #0
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ffd8 	bl	800128e <u8g2_SetBufferCurrTileRow>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b084      	sub	sp, #16
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffa3 	bl	800123a <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80012fa:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4413      	add	r3, r2
 8001306:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	7c5b      	ldrb	r3, [r3, #17]
 800130e:	7bfa      	ldrb	r2, [r7, #15]
 8001310:	429a      	cmp	r2, r3
 8001312:	d304      	bcc.n	800131e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f001 fc78 	bl	8002c0a <u8x8_RefreshDisplay>
    return 0;
 800131a:	2300      	movs	r3, #0
 800131c:	e00d      	b.n	800133a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff3d 	bl	80011a8 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffab 	bl	800128e <u8g2_SetBufferCurrTileRow>
  return 1;
 8001338:	2301      	movs	r3, #1
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb7 	bl	80012be <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ffc8 	bl	80012e6 <u8g2_NextPage>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f9      	bne.n	8001350 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800135c:	2100      	movs	r1, #0
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff95 	bl	800128e <u8g2_SetBufferCurrTileRow>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <u8g2_m_32_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_32_8_f(uint8_t *page_cnt)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[2048];
  *page_cnt = 8;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2208      	movs	r2, #8
 8001378:	701a      	strb	r2, [r3, #0]
  return buf;
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <u8g2_m_32_8_f+0x1c>)
  #endif
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000bcc 	.word	0x20000bcc

0800138c <u8g2_Setup_ssd1322_nhd_256x64_f>:
  buf = u8g2_m_32_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1322 f */
void u8g2_Setup_ssd1322_nhd_256x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1322_nhd_256x64, u8x8_cad_011, byte_cb, gpio_and_delay_cb);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <u8g2_Setup_ssd1322_nhd_256x64_f+0x44>)
 80013a2:	490c      	ldr	r1, [pc, #48]	; (80013d4 <u8g2_Setup_ssd1322_nhd_256x64_f+0x48>)
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f001 fc8f 	bl	8002cc8 <u8x8_Setup>
  buf = u8g2_m_32_8_f(&tile_buf_height);
 80013aa:	f107 0313 	add.w	r3, r7, #19
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffdc 	bl	800136c <u8g2_m_32_8_f>
 80013b4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80013b6:	7cfa      	ldrb	r2, [r7, #19]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <u8g2_Setup_ssd1322_nhd_256x64_f+0x4c>)
 80013be:	6979      	ldr	r1, [r7, #20]
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f000 ffbc 	bl	800233e <u8g2_SetupBuffer>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	080027c9 	.word	0x080027c9
 80013d4:	08002a2d 	.word	0x08002a2d
 80013d8:	080021c3 	.word	0x080021c3

080013dc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80013fe:	b480      	push	{r7}
 8001400:	b085      	sub	sp, #20
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	81fb      	strh	r3, [r7, #14]
    font++;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3301      	adds	r3, #1
 800141c:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b29a      	uxth	r2, r3
 800142a:	89fb      	ldrh	r3, [r7, #14]
 800142c:	4413      	add	r3, r2
 800142e:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001430:	89fb      	ldrh	r3, [r7, #14]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001446:	2100      	movs	r1, #0
 8001448:	6838      	ldr	r0, [r7, #0]
 800144a:	f7ff ffc7 	bl	80013dc <u8g2_font_get_byte>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001456:	2101      	movs	r1, #1
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f7ff ffbf 	bl	80013dc <u8g2_font_get_byte>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001466:	2102      	movs	r1, #2
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f7ff ffb7 	bl	80013dc <u8g2_font_get_byte>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001476:	2103      	movs	r1, #3
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f7ff ffaf 	bl	80013dc <u8g2_font_get_byte>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001486:	2104      	movs	r1, #4
 8001488:	6838      	ldr	r0, [r7, #0]
 800148a:	f7ff ffa7 	bl	80013dc <u8g2_font_get_byte>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001496:	2105      	movs	r1, #5
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f7ff ff9f 	bl	80013dc <u8g2_font_get_byte>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80014a6:	2106      	movs	r1, #6
 80014a8:	6838      	ldr	r0, [r7, #0]
 80014aa:	f7ff ff97 	bl	80013dc <u8g2_font_get_byte>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80014b6:	2107      	movs	r1, #7
 80014b8:	6838      	ldr	r0, [r7, #0]
 80014ba:	f7ff ff8f 	bl	80013dc <u8g2_font_get_byte>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80014c6:	2108      	movs	r1, #8
 80014c8:	6838      	ldr	r0, [r7, #0]
 80014ca:	f7ff ff87 	bl	80013dc <u8g2_font_get_byte>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80014d6:	2109      	movs	r1, #9
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f7ff ff7f 	bl	80013dc <u8g2_font_get_byte>
 80014de:	4603      	mov	r3, r0
 80014e0:	b25a      	sxtb	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80014e6:	210a      	movs	r1, #10
 80014e8:	6838      	ldr	r0, [r7, #0]
 80014ea:	f7ff ff77 	bl	80013dc <u8g2_font_get_byte>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80014f6:	210b      	movs	r1, #11
 80014f8:	6838      	ldr	r0, [r7, #0]
 80014fa:	f7ff ff6f 	bl	80013dc <u8g2_font_get_byte>
 80014fe:	4603      	mov	r3, r0
 8001500:	b25a      	sxtb	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001506:	210c      	movs	r1, #12
 8001508:	6838      	ldr	r0, [r7, #0]
 800150a:	f7ff ff67 	bl	80013dc <u8g2_font_get_byte>
 800150e:	4603      	mov	r3, r0
 8001510:	b25a      	sxtb	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001516:	210d      	movs	r1, #13
 8001518:	6838      	ldr	r0, [r7, #0]
 800151a:	f7ff ff5f 	bl	80013dc <u8g2_font_get_byte>
 800151e:	4603      	mov	r3, r0
 8001520:	b25a      	sxtb	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001526:	210e      	movs	r1, #14
 8001528:	6838      	ldr	r0, [r7, #0]
 800152a:	f7ff ff57 	bl	80013dc <u8g2_font_get_byte>
 800152e:	4603      	mov	r3, r0
 8001530:	b25a      	sxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001536:	210f      	movs	r1, #15
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7ff ff4f 	bl	80013dc <u8g2_font_get_byte>
 800153e:	4603      	mov	r3, r0
 8001540:	b25a      	sxtb	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001546:	2110      	movs	r1, #16
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f7ff ff47 	bl	80013dc <u8g2_font_get_byte>
 800154e:	4603      	mov	r3, r0
 8001550:	b25a      	sxtb	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001556:	2111      	movs	r1, #17
 8001558:	6838      	ldr	r0, [r7, #0]
 800155a:	f7ff ff50 	bl	80013fe <u8g2_font_get_word>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001566:	2113      	movs	r1, #19
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	f7ff ff48 	bl	80013fe <u8g2_font_get_word>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001576:	2115      	movs	r1, #21
 8001578:	6838      	ldr	r0, [r7, #0]
 800157a:	f7ff ff40 	bl	80013fe <u8g2_font_get_word>
 800157e:	4603      	mov	r3, r0
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	82da      	strh	r2, [r3, #22]
#endif
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	7b1b      	ldrb	r3, [r3, #12]
 800159e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80015a8:	7bfa      	ldrb	r2, [r7, #15]
 80015aa:	7b7b      	ldrb	r3, [r7, #13]
 80015ac:	fa42 f303 	asr.w	r3, r2, r3
 80015b0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80015b2:	7b7b      	ldrb	r3, [r7, #13]
 80015b4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80015b6:	7bba      	ldrb	r2, [r7, #14]
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	4413      	add	r3, r2
 80015bc:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80015be:	7bbb      	ldrb	r3, [r7, #14]
 80015c0:	2b07      	cmp	r3, #7
 80015c2:	d91a      	bls.n	80015fa <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80015c4:	2308      	movs	r3, #8
 80015c6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80015c8:	7b3a      	ldrb	r2, [r7, #12]
 80015ca:	7b7b      	ldrb	r3, [r7, #13]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	7b3b      	ldrb	r3, [r7, #12]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	b25a      	sxtb	r2, r3
 80015ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	3b08      	subs	r3, #8
 80015f8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	b2da      	uxtb	r2, r3
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	4013      	ands	r3, r2
 800160e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7bba      	ldrb	r2, [r7, #14]
 8001614:	731a      	strb	r2, [r3, #12]
  return val;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800162e:	78fb      	ldrb	r3, [r7, #3]
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffab 	bl	800158e <u8g2_font_decode_get_unsigned_bits>
 8001638:	4603      	mov	r3, r0
 800163a:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001640:	78fb      	ldrb	r3, [r7, #3]
 8001642:	3b01      	subs	r3, #1
 8001644:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001646:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800164a:	78fb      	ldrb	r3, [r7, #3]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	7bbb      	ldrb	r3, [r7, #14]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	73fb      	strb	r3, [r7, #15]
  return v;
 800165c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001668:	b490      	push	{r4, r7}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4623      	mov	r3, r4
 8001678:	80fb      	strh	r3, [r7, #6]
 800167a:	4603      	mov	r3, r0
 800167c:	717b      	strb	r3, [r7, #5]
 800167e:	460b      	mov	r3, r1
 8001680:	713b      	strb	r3, [r7, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d014      	beq.n	80016b6 <u8g2_add_vector_y+0x4e>
 800168c:	2b02      	cmp	r3, #2
 800168e:	dc19      	bgt.n	80016c4 <u8g2_add_vector_y+0x5c>
 8001690:	2b00      	cmp	r3, #0
 8001692:	d002      	beq.n	800169a <u8g2_add_vector_y+0x32>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d007      	beq.n	80016a8 <u8g2_add_vector_y+0x40>
 8001698:	e014      	b.n	80016c4 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800169a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	4413      	add	r3, r2
 80016a4:	80fb      	strh	r3, [r7, #6]
      break;
 80016a6:	e014      	b.n	80016d2 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80016a8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	4413      	add	r3, r2
 80016b2:	80fb      	strh	r3, [r7, #6]
      break;
 80016b4:	e00d      	b.n	80016d2 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80016b6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	80fb      	strh	r3, [r7, #6]
      break;
 80016c2:	e006      	b.n	80016d2 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80016c4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	88fa      	ldrh	r2, [r7, #6]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	80fb      	strh	r3, [r7, #6]
      break;      
 80016d0:	bf00      	nop
  }
  return dy;
 80016d2:	88fb      	ldrh	r3, [r7, #6]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc90      	pop	{r4, r7}
 80016dc:	4770      	bx	lr

080016de <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80016de:	b490      	push	{r4, r7}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4604      	mov	r4, r0
 80016e6:	4608      	mov	r0, r1
 80016e8:	4611      	mov	r1, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	4623      	mov	r3, r4
 80016ee:	80fb      	strh	r3, [r7, #6]
 80016f0:	4603      	mov	r3, r0
 80016f2:	717b      	strb	r3, [r7, #5]
 80016f4:	460b      	mov	r3, r1
 80016f6:	713b      	strb	r3, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d014      	beq.n	800172c <u8g2_add_vector_x+0x4e>
 8001702:	2b02      	cmp	r3, #2
 8001704:	dc19      	bgt.n	800173a <u8g2_add_vector_x+0x5c>
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <u8g2_add_vector_x+0x32>
 800170a:	2b01      	cmp	r3, #1
 800170c:	d007      	beq.n	800171e <u8g2_add_vector_x+0x40>
 800170e:	e014      	b.n	800173a <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001710:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001714:	b29a      	uxth	r2, r3
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4413      	add	r3, r2
 800171a:	80fb      	strh	r3, [r7, #6]
      break;
 800171c:	e014      	b.n	8001748 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 800171e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001722:	b29b      	uxth	r3, r3
 8001724:	88fa      	ldrh	r2, [r7, #6]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	80fb      	strh	r3, [r7, #6]
      break;
 800172a:	e00d      	b.n	8001748 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800172c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001730:	b29b      	uxth	r3, r3
 8001732:	88fa      	ldrh	r2, [r7, #6]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	80fb      	strh	r3, [r7, #6]
      break;
 8001738:	e006      	b.n	8001748 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 800173a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800173e:	b29a      	uxth	r2, r3
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4413      	add	r3, r2
 8001744:	80fb      	strh	r3, [r7, #6]
      break;      
 8001746:	bf00      	nop
  }
  return dx;
 8001748:	88fb      	ldrh	r3, [r7, #6]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bc90      	pop	{r4, r7}
 8001752:	4770      	bx	lr

08001754 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af02      	add	r7, sp, #8
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
 8001760:	4613      	mov	r3, r2
 8001762:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3360      	adds	r3, #96	; 0x60
 8001768:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001774:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800177c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001784:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	7d7b      	ldrb	r3, [r7, #21]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001792:	7dfa      	ldrb	r2, [r7, #23]
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	429a      	cmp	r2, r3
 8001798:	d201      	bcs.n	800179e <u8g2_font_decode_len+0x4a>
      current = cnt;
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	889b      	ldrh	r3, [r3, #4]
 80017a2:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	88db      	ldrh	r3, [r3, #6]
 80017a8:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80017aa:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80017ae:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	7c1b      	ldrb	r3, [r3, #16]
 80017b6:	89b8      	ldrh	r0, [r7, #12]
 80017b8:	f7ff ff91 	bl	80016de <u8g2_add_vector_x>
 80017bc:	4603      	mov	r3, r0
 80017be:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80017c0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80017c4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	7c1b      	ldrb	r3, [r3, #16]
 80017cc:	8978      	ldrh	r0, [r7, #10]
 80017ce:	f7ff ff4b 	bl	8001668 <u8g2_add_vector_y>
 80017d2:	4603      	mov	r3, r0
 80017d4:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80017d6:	78bb      	ldrb	r3, [r7, #2]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d010      	beq.n	80017fe <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	7b9a      	ldrb	r2, [r3, #14]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80017e6:	7dbb      	ldrb	r3, [r7, #22]
 80017e8:	b298      	uxth	r0, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	7c1b      	ldrb	r3, [r3, #16]
 80017ee:	897a      	ldrh	r2, [r7, #10]
 80017f0:	89b9      	ldrh	r1, [r7, #12]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	4603      	mov	r3, r0
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fbfa 	bl	8001ff0 <u8g2_DrawHVLine>
 80017fc:	e013      	b.n	8001826 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	7b5b      	ldrb	r3, [r3, #13]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	7bda      	ldrb	r2, [r3, #15]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001810:	7dbb      	ldrb	r3, [r7, #22]
 8001812:	b298      	uxth	r0, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	7c1b      	ldrb	r3, [r3, #16]
 8001818:	897a      	ldrh	r2, [r7, #10]
 800181a:	89b9      	ldrh	r1, [r7, #12]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	4603      	mov	r3, r0
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fbe5 	bl	8001ff0 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001826:	7dfa      	ldrb	r2, [r7, #23]
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	429a      	cmp	r2, r3
 800182c:	d309      	bcc.n	8001842 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800182e:	7dfa      	ldrb	r2, [r7, #23]
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	757b      	strb	r3, [r7, #21]
    ly++;
 800183a:	7d3b      	ldrb	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001840:	e79d      	b.n	800177e <u8g2_font_decode_len+0x2a>
      break;
 8001842:	bf00      	nop
  }
  lx += cnt;
 8001844:	7d7a      	ldrb	r2, [r7, #21]
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	4413      	add	r3, r2
 800184a:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800184c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8001854:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	725a      	strb	r2, [r3, #9]
  
}
 800185c:	bf00      	nop
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3360      	adds	r3, #96	; 0x60
 8001872:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001886:	4619      	mov	r1, r3
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f7ff fe80 	bl	800158e <u8g2_font_decode_get_unsigned_bits>
 800188e:	4603      	mov	r3, r0
 8001890:	b25a      	sxtb	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800189c:	4619      	mov	r1, r3
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff fe75 	bl	800158e <u8g2_font_decode_get_unsigned_bits>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b25a      	sxtb	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	7b9b      	ldrb	r3, [r3, #14]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf0c      	ite	eq
 80018be:	2301      	moveq	r3, #1
 80018c0:	2300      	movne	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	73da      	strb	r2, [r3, #15]
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af02      	add	r7, sp, #8
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3360      	adds	r3, #96	; 0x60
 80018e2:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80018e4:	6839      	ldr	r1, [r7, #0]
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffbc 	bl	8001864 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80018f2:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80018fa:	4619      	mov	r1, r3
 80018fc:	6978      	ldr	r0, [r7, #20]
 80018fe:	f7ff fe90 	bl	8001622 <u8g2_font_decode_get_signed_bits>
 8001902:	4603      	mov	r3, r0
 8001904:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800190c:	4619      	mov	r1, r3
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff fe87 	bl	8001622 <u8g2_font_decode_get_signed_bits>
 8001914:	4603      	mov	r3, r0
 8001916:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800191e:	4619      	mov	r1, r3
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7ff fe7e 	bl	8001622 <u8g2_font_decode_get_signed_bits>
 8001926:	4603      	mov	r3, r0
 8001928:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f340 80d7 	ble.w	8001ae4 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	8898      	ldrh	r0, [r3, #4]
 800193a:	7cfa      	ldrb	r2, [r7, #19]
 800193c:	7c7b      	ldrb	r3, [r7, #17]
 800193e:	4413      	add	r3, r2
 8001940:	b2db      	uxtb	r3, r3
 8001942:	425b      	negs	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	b25a      	sxtb	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	7c1b      	ldrb	r3, [r3, #16]
 800194c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001950:	f7ff fec5 	bl	80016de <u8g2_add_vector_x>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	88d8      	ldrh	r0, [r3, #6]
 8001960:	7cfa      	ldrb	r2, [r7, #19]
 8001962:	7c7b      	ldrb	r3, [r7, #17]
 8001964:	4413      	add	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	425b      	negs	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	b25a      	sxtb	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	7c1b      	ldrb	r3, [r3, #16]
 8001972:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001976:	f7ff fe77 	bl	8001668 <u8g2_add_vector_y>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	889b      	ldrh	r3, [r3, #4]
 8001986:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	88db      	ldrh	r3, [r3, #6]
 800198c:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 800198e:	8bfb      	ldrh	r3, [r7, #30]
 8001990:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001992:	8b7b      	ldrh	r3, [r7, #26]
 8001994:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	7c1b      	ldrb	r3, [r3, #16]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d85a      	bhi.n	8001a54 <u8g2_font_decode_glyph+0x180>
 800199e:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <u8g2_font_decode_glyph+0xd0>)
 80019a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a4:	080019b5 	.word	0x080019b5
 80019a8:	080019d1 	.word	0x080019d1
 80019ac:	080019f9 	.word	0x080019f9
 80019b0:	08001a2d 	.word	0x08001a2d
      {
	case 0:
	    x1 += decode->glyph_width;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	8bbb      	ldrh	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80019c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	8b3b      	ldrh	r3, [r7, #24]
 80019ca:	4413      	add	r3, r2
 80019cc:	833b      	strh	r3, [r7, #24]
	    break;
 80019ce:	e041      	b.n	8001a54 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80019d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	8bfa      	ldrh	r2, [r7, #30]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80019dc:	8bfb      	ldrh	r3, [r7, #30]
 80019de:	3301      	adds	r3, #1
 80019e0:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80019e2:	8bbb      	ldrh	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	8b3b      	ldrh	r3, [r7, #24]
 80019f2:	4413      	add	r3, r2
 80019f4:	833b      	strh	r3, [r7, #24]
	    break;
 80019f6:	e02d      	b.n	8001a54 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	8bfa      	ldrh	r2, [r7, #30]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001a06:	8bfb      	ldrh	r3, [r7, #30]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001a0c:	8bbb      	ldrh	r3, [r7, #28]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001a12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	8b7a      	ldrh	r2, [r7, #26]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001a1e:	8b7b      	ldrh	r3, [r7, #26]
 8001a20:	3301      	adds	r3, #1
 8001a22:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001a24:	8b3b      	ldrh	r3, [r7, #24]
 8001a26:	3301      	adds	r3, #1
 8001a28:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001a2a:	e013      	b.n	8001a54 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001a2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	8bbb      	ldrh	r3, [r7, #28]
 8001a34:	4413      	add	r3, r2
 8001a36:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	8b7a      	ldrh	r2, [r7, #26]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001a46:	8b7b      	ldrh	r3, [r7, #26]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001a4c:	8b3b      	ldrh	r3, [r7, #24]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001a52:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001a54:	8bb8      	ldrh	r0, [r7, #28]
 8001a56:	8b7a      	ldrh	r2, [r7, #26]
 8001a58:	8bf9      	ldrh	r1, [r7, #30]
 8001a5a:	8b3b      	ldrh	r3, [r7, #24]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fb83 	bl	800216c <u8g2_IsIntersection>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001a6c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001a70:	e03a      	b.n	8001ae8 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2200      	movs	r2, #0
 8001a76:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001a84:	4619      	mov	r1, r3
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff fd81 	bl	800158e <u8g2_font_decode_get_unsigned_bits>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001a96:	4619      	mov	r1, r3
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f7ff fd78 	bl	800158e <u8g2_font_decode_get_unsigned_bits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fe53 	bl	8001754 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fe4d 	bl	8001754 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001aba:	2101      	movs	r1, #1
 8001abc:	6978      	ldr	r0, [r7, #20]
 8001abe:	f7ff fd66 	bl	800158e <u8g2_font_decode_get_unsigned_bits>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ec      	bne.n	8001aa2 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001ace:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dd00      	ble.n	8001ad8 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001ad6:	e7d2      	b.n	8001a7e <u8g2_font_decode_glyph+0x1aa>
	break;
 8001ad8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	7b9a      	ldrb	r2, [r3, #14]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001ae4:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3720      	adds	r7, #32
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b00:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3317      	adds	r3, #23
 8001b06:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	2bff      	cmp	r3, #255	; 0xff
 8001b0c:	d82a      	bhi.n	8001b64 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	2b60      	cmp	r3, #96	; 0x60
 8001b12:	d907      	bls.n	8001b24 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e009      	b.n	8001b38 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001b24:	887b      	ldrh	r3, [r7, #2]
 8001b26:	2b40      	cmp	r3, #64	; 0x40
 8001b28:	d906      	bls.n	8001b38 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001b30:	461a      	mov	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	4413      	add	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d04e      	beq.n	8001be0 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	887a      	ldrh	r2, [r7, #2]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d102      	bne.n	8001b54 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3302      	adds	r3, #2
 8001b52:	e049      	b.n	8001be8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4413      	add	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001b62:	e7e9      	b.n	8001b38 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	4413      	add	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001b76:	2100      	movs	r1, #0
 8001b78:	6938      	ldr	r0, [r7, #16]
 8001b7a:	f7ff fc40 	bl	80013fe <u8g2_font_get_word>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	4413      	add	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001b88:	2102      	movs	r1, #2
 8001b8a:	6938      	ldr	r0, [r7, #16]
 8001b8c:	f7ff fc37 	bl	80013fe <u8g2_font_get_word>
 8001b90:	4603      	mov	r3, r0
 8001b92:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	3304      	adds	r3, #4
 8001b98:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001b9a:	89fa      	ldrh	r2, [r7, #14]
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d3e9      	bcc.n	8001b76 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001bc2:	89fa      	ldrh	r2, [r7, #14]
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d102      	bne.n	8001bd0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3303      	adds	r3, #3
 8001bce:	e00b      	b.n	8001be8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	4413      	add	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001bde:	e7e0      	b.n	8001ba2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001be0:	bf00      	nop
 8001be2:	e000      	b.n	8001be6 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001be4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	460b      	mov	r3, r1
 8001c04:	813b      	strh	r3, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	897a      	ldrh	r2, [r7, #10]
 8001c12:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	893a      	ldrh	r2, [r7, #8]
 8001c1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	4619      	mov	r1, r3
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff ff64 	bl	8001af0 <u8g2_font_get_glyph_data>
 8001c28:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001c30:	6939      	ldr	r1, [r7, #16]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff fe4e 	bl	80018d4 <u8g2_font_decode_glyph>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001c3c:	8afb      	ldrh	r3, [r7, #22]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	4608      	mov	r0, r1
 8001c52:	4611      	mov	r1, r2
 8001c54:	461a      	mov	r2, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	817b      	strh	r3, [r7, #10]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	813b      	strh	r3, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d833      	bhi.n	8001cd4 <u8g2_DrawGlyph+0x8c>
 8001c6c:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <u8g2_DrawGlyph+0x2c>)
 8001c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c72:	bf00      	nop
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c99 	.word	0x08001c99
 8001c7c:	08001cad 	.word	0x08001cad
 8001c80:	08001cc1 	.word	0x08001cc1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	4798      	blx	r3
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	893b      	ldrh	r3, [r7, #8]
 8001c92:	4413      	add	r3, r2
 8001c94:	813b      	strh	r3, [r7, #8]
      break;
 8001c96:	e01d      	b.n	8001cd4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	4798      	blx	r3
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	897b      	ldrh	r3, [r7, #10]
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	817b      	strh	r3, [r7, #10]
      break;
 8001caa:	e013      	b.n	8001cd4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	4798      	blx	r3
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	893b      	ldrh	r3, [r7, #8]
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	813b      	strh	r3, [r7, #8]
      break;
 8001cbe:	e009      	b.n	8001cd4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	4798      	blx	r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	4413      	add	r3, r2
 8001cd0:	817b      	strh	r3, [r7, #10]
      break;
 8001cd2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	893a      	ldrh	r2, [r7, #8]
 8001cd8:	8979      	ldrh	r1, [r7, #10]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff ff88 	bl	8001bf0 <u8g2_font_draw_glyph>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop

08001cec <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	817b      	strh	r3, [r7, #10]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fc5f 	bl	80025c2 <u8x8_utf8_init>
  sum = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	4611      	mov	r1, r2
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	4798      	blx	r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001d1a:	8abb      	ldrh	r3, [r7, #20]
 8001d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d038      	beq.n	8001d96 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3301      	adds	r3, #1
 8001d28:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001d2a:	8abb      	ldrh	r3, [r7, #20]
 8001d2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d0e9      	beq.n	8001d08 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001d34:	8abb      	ldrh	r3, [r7, #20]
 8001d36:	893a      	ldrh	r2, [r7, #8]
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff ff84 	bl	8001c48 <u8g2_DrawGlyph>
 8001d40:	4603      	mov	r3, r0
 8001d42:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d81e      	bhi.n	8001d8c <u8g2_draw_string+0xa0>
 8001d4e:	a201      	add	r2, pc, #4	; (adr r2, 8001d54 <u8g2_draw_string+0x68>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d6f 	.word	0x08001d6f
 8001d5c:	08001d79 	.word	0x08001d79
 8001d60:	08001d83 	.word	0x08001d83
      {
	case 0:
	  x += delta;
 8001d64:	897a      	ldrh	r2, [r7, #10]
 8001d66:	8a7b      	ldrh	r3, [r7, #18]
 8001d68:	4413      	add	r3, r2
 8001d6a:	817b      	strh	r3, [r7, #10]
	  break;
 8001d6c:	e00e      	b.n	8001d8c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001d6e:	893a      	ldrh	r2, [r7, #8]
 8001d70:	8a7b      	ldrh	r3, [r7, #18]
 8001d72:	4413      	add	r3, r2
 8001d74:	813b      	strh	r3, [r7, #8]
	  break;
 8001d76:	e009      	b.n	8001d8c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001d78:	897a      	ldrh	r2, [r7, #10]
 8001d7a:	8a7b      	ldrh	r3, [r7, #18]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	817b      	strh	r3, [r7, #10]
	  break;
 8001d80:	e004      	b.n	8001d8c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001d82:	893a      	ldrh	r2, [r7, #8]
 8001d84:	8a7b      	ldrh	r3, [r7, #18]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	813b      	strh	r3, [r7, #8]
	  break;
 8001d8a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001d8c:	8afa      	ldrh	r2, [r7, #22]
 8001d8e:	8a7b      	ldrh	r3, [r7, #18]
 8001d90:	4413      	add	r3, r2
 8001d92:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001d94:	e7b8      	b.n	8001d08 <u8g2_draw_string+0x1c>
      break;
 8001d96:	bf00      	nop
    }
  }
  return sum;
 8001d98:	8afb      	ldrh	r3, [r7, #22]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop

08001da4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	817b      	strh	r3, [r7, #10]
 8001db2:	4613      	mov	r3, r2
 8001db4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a06      	ldr	r2, [pc, #24]	; (8001dd4 <u8g2_DrawStr+0x30>)
 8001dba:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001dbc:	893a      	ldrh	r2, [r7, #8]
 8001dbe:	8979      	ldrh	r1, [r7, #10]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7ff ff92 	bl	8001cec <u8g2_draw_string>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	080025dd 	.word	0x080025dd

08001dd8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d05d      	beq.n	8001ea4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d04d      	beq.n	8001ea6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d11c      	bne.n	8001e4e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8001e20:	429a      	cmp	r2, r3
 8001e22:	da05      	bge.n	8001e30 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dd32      	ble.n	8001ea6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001e4c:	e02b      	b.n	8001ea6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001e64:	440b      	add	r3, r1
 8001e66:	429a      	cmp	r2, r3
 8001e68:	da0d      	bge.n	8001e86 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	b25a      	sxtb	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dd07      	ble.n	8001ea6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001ea2:	e000      	b.n	8001ea6 <u8g2_UpdateRefHeight+0xce>
    return;
 8001ea4:	bf00      	nop
  }  
}
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a03      	ldr	r2, [pc, #12]	; (8001edc <u8g2_SetFontPosBaseline+0x18>)
 8001ed0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	08001eaf 	.word	0x08001eaf

08001ee0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d00b      	beq.n	8001f0c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3374      	adds	r3, #116	; 0x74
 8001efe:	6839      	ldr	r1, [r7, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fa9b 	bl	800143c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ff66 	bl	8001dd8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	460b      	mov	r3, r1
 8001f24:	80fb      	strh	r3, [r7, #6]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001f30:	8afb      	ldrh	r3, [r7, #22]
 8001f32:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	8abb      	ldrh	r3, [r7, #20]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001f3e:	8afa      	ldrh	r2, [r7, #22]
 8001f40:	8abb      	ldrh	r3, [r7, #20]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d90b      	bls.n	8001f5e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001f46:	8afa      	ldrh	r2, [r7, #22]
 8001f48:	88bb      	ldrh	r3, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d205      	bcs.n	8001f5a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001f4e:	88bb      	ldrh	r3, [r7, #4]
 8001f50:	82bb      	strh	r3, [r7, #20]
      b--;
 8001f52:	8abb      	ldrh	r3, [r7, #20]
 8001f54:	3b01      	subs	r3, #1
 8001f56:	82bb      	strh	r3, [r7, #20]
 8001f58:	e001      	b.n	8001f5e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001f5e:	8afa      	ldrh	r2, [r7, #22]
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d301      	bcc.n	8001f6a <u8g2_clip_intersection2+0x56>
    return 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e01c      	b.n	8001fa4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001f6a:	8aba      	ldrh	r2, [r7, #20]
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d801      	bhi.n	8001f76 <u8g2_clip_intersection2+0x62>
    return 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	e016      	b.n	8001fa4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001f76:	8afa      	ldrh	r2, [r7, #22]
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d201      	bcs.n	8001f82 <u8g2_clip_intersection2+0x6e>
    a = c;
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001f82:	8aba      	ldrh	r2, [r7, #20]
 8001f84:	88bb      	ldrh	r3, [r7, #4]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d901      	bls.n	8001f8e <u8g2_clip_intersection2+0x7a>
    b = d;
 8001f8a:	88bb      	ldrh	r3, [r7, #4]
 8001f8c:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8afa      	ldrh	r2, [r7, #22]
 8001f92:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001f94:	8aba      	ldrh	r2, [r7, #20]
 8001f96:	8afb      	ldrh	r3, [r7, #22]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	8aba      	ldrh	r2, [r7, #20]
 8001fa0:	801a      	strh	r2, [r3, #0]
  return 1;
 8001fa2:	2301      	movs	r3, #1
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001fae:	b590      	push	{r4, r7, lr}
 8001fb0:	b087      	sub	sp, #28
 8001fb2:	af02      	add	r7, sp, #8
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	4608      	mov	r0, r1
 8001fb8:	4611      	mov	r1, r2
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	817b      	strh	r3, [r7, #10]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	813b      	strh	r3, [r7, #8]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fcc:	893a      	ldrh	r2, [r7, #8]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001fd6:	88f8      	ldrh	r0, [r7, #6]
 8001fd8:	893a      	ldrh	r2, [r7, #8]
 8001fda:	8979      	ldrh	r1, [r7, #10]
 8001fdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	47a0      	blx	r4
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd90      	pop	{r4, r7, pc}

08001ff0 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	817b      	strh	r3, [r7, #10]
 8002002:	460b      	mov	r3, r1
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	4613      	mov	r3, r2
 8002008:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d075      	beq.n	8002100 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d072      	beq.n	8002100 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d91a      	bls.n	8002056 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002020:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d109      	bne.n	800203c <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002028:	897a      	ldrh	r2, [r7, #10]
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	b29b      	uxth	r3, r3
 8002030:	817b      	strh	r3, [r7, #10]
	  x++;
 8002032:	897b      	ldrh	r3, [r7, #10]
 8002034:	3301      	adds	r3, #1
 8002036:	b29b      	uxth	r3, r3
 8002038:	817b      	strh	r3, [r7, #10]
 800203a:	e00c      	b.n	8002056 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800203c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d108      	bne.n	8002056 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002044:	893a      	ldrh	r2, [r7, #8]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29b      	uxth	r3, r3
 800204c:	813b      	strh	r3, [r7, #8]
	  y++;
 800204e:	893b      	ldrh	r3, [r7, #8]
 8002050:	3301      	adds	r3, #1
 8002052:	b29b      	uxth	r3, r3
 8002054:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002056:	f897 3020 	ldrb.w	r3, [r7, #32]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002062:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11a      	bne.n	80020a0 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002070:	893b      	ldrh	r3, [r7, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d83b      	bhi.n	80020ee <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800207c:	893b      	ldrh	r3, [r7, #8]
 800207e:	429a      	cmp	r2, r3
 8002080:	d937      	bls.n	80020f2 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800208e:	1db9      	adds	r1, r7, #6
 8002090:	f107 000a 	add.w	r0, r7, #10
 8002094:	f7ff ff3e 	bl	8001f14 <u8g2_clip_intersection2>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d11a      	bne.n	80020d4 <u8g2_DrawHVLine+0xe4>
	  return;
 800209e:	e02f      	b.n	8002100 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80020a6:	897b      	ldrh	r3, [r7, #10]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d824      	bhi.n	80020f6 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80020b2:	897b      	ldrh	r3, [r7, #10]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d920      	bls.n	80020fa <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80020c4:	1db9      	adds	r1, r7, #6
 80020c6:	f107 0008 	add.w	r0, r7, #8
 80020ca:	f7ff ff23 	bl	8001f14 <u8g2_clip_intersection2>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d014      	beq.n	80020fe <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	689c      	ldr	r4, [r3, #8]
 80020da:	8979      	ldrh	r1, [r7, #10]
 80020dc:	893a      	ldrh	r2, [r7, #8]
 80020de:	88f8      	ldrh	r0, [r7, #6]
 80020e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	4603      	mov	r3, r0
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	47a0      	blx	r4
 80020ec:	e008      	b.n	8002100 <u8g2_DrawHVLine+0x110>
	  return;
 80020ee:	bf00      	nop
 80020f0:	e006      	b.n	8002100 <u8g2_DrawHVLine+0x110>
	  return;
 80020f2:	bf00      	nop
 80020f4:	e004      	b.n	8002100 <u8g2_DrawHVLine+0x110>
	  return;
 80020f6:	bf00      	nop
 80020f8:	e002      	b.n	8002100 <u8g2_DrawHVLine+0x110>
	  return;
 80020fa:	bf00      	nop
 80020fc:	e000      	b.n	8002100 <u8g2_DrawHVLine+0x110>
	  return;
 80020fe:	bf00      	nop
    }
}
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}

08002106 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002106:	b490      	push	{r4, r7}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4604      	mov	r4, r0
 800210e:	4608      	mov	r0, r1
 8002110:	4611      	mov	r1, r2
 8002112:	461a      	mov	r2, r3
 8002114:	4623      	mov	r3, r4
 8002116:	80fb      	strh	r3, [r7, #6]
 8002118:	4603      	mov	r3, r0
 800211a:	80bb      	strh	r3, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002124:	887a      	ldrh	r2, [r7, #2]
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d20d      	bcs.n	8002148 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800212c:	883a      	ldrh	r2, [r7, #0]
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	429a      	cmp	r2, r3
 8002132:	d901      	bls.n	8002138 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002134:	2301      	movs	r3, #1
 8002136:	e014      	b.n	8002162 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002138:	887a      	ldrh	r2, [r7, #2]
 800213a:	883b      	ldrh	r3, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d901      	bls.n	8002144 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002140:	2301      	movs	r3, #1
 8002142:	e00e      	b.n	8002162 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002144:	2300      	movs	r3, #0
 8002146:	e00c      	b.n	8002162 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002148:	883a      	ldrh	r2, [r7, #0]
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	429a      	cmp	r2, r3
 800214e:	d907      	bls.n	8002160 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	883b      	ldrh	r3, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d901      	bls.n	800215c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002158:	2301      	movs	r3, #1
 800215a:	e002      	b.n	8002162 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002160:	2300      	movs	r3, #0
    }
  }
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bc90      	pop	{r4, r7}
 800216a:	4770      	bx	lr

0800216c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	817b      	strh	r3, [r7, #10]
 800217e:	460b      	mov	r3, r1
 8002180:	813b      	strh	r3, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002192:	8b3b      	ldrh	r3, [r7, #24]
 8002194:	893a      	ldrh	r2, [r7, #8]
 8002196:	f7ff ffb6 	bl	8002106 <u8g2_is_intersection_decision_tree>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <u8g2_IsIntersection+0x38>
    return 0; 
 80021a0:	2300      	movs	r3, #0
 80021a2:	e00a      	b.n	80021ba <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80021b0:	88fb      	ldrh	r3, [r7, #6]
 80021b2:	897a      	ldrh	r2, [r7, #10]
 80021b4:	f7ff ffa7 	bl	8002106 <u8g2_is_intersection_decision_tree>
 80021b8:	4603      	mov	r3, r0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b089      	sub	sp, #36	; 0x24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	4608      	mov	r0, r1
 80021cc:	4611      	mov	r1, r2
 80021ce:	461a      	mov	r2, r3
 80021d0:	4603      	mov	r3, r0
 80021d2:	817b      	strh	r3, [r7, #10]
 80021d4:	460b      	mov	r3, r1
 80021d6:	813b      	strh	r3, [r7, #8]
 80021d8:	4613      	mov	r3, r2
 80021da:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80021dc:	893b      	ldrh	r3, [r7, #8]
 80021de:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80021e0:	7efb      	ldrb	r3, [r7, #27]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80021e8:	2301      	movs	r3, #1
 80021ea:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80021ec:	7e3a      	ldrb	r2, [r7, #24]
 80021ee:	7efb      	ldrb	r3, [r7, #27]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002204:	2b01      	cmp	r3, #1
 8002206:	d801      	bhi.n	800220c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002208:	7e3b      	ldrb	r3, [r7, #24]
 800220a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002216:	7e3b      	ldrb	r3, [r7, #24]
 8002218:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800221a:	893b      	ldrh	r3, [r7, #8]
 800221c:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800221e:	8afb      	ldrh	r3, [r7, #22]
 8002220:	f023 0307 	bic.w	r3, r3, #7
 8002224:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	7c1b      	ldrb	r3, [r3, #16]
 800222c:	b29b      	uxth	r3, r3
 800222e:	8afa      	ldrh	r2, [r7, #22]
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800223c:	8afb      	ldrh	r3, [r7, #22]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002244:	897b      	ldrh	r3, [r7, #10]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	4413      	add	r3, r2
 800224a:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800224c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	d117      	bne.n	8002284 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	7ebb      	ldrb	r3, [r7, #26]
 800225a:	4313      	orrs	r3, r2
 800225c:	b2da      	uxtb	r2, r3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	7e7b      	ldrb	r3, [r7, #25]
 8002268:	4053      	eors	r3, r2
 800226a:	b2da      	uxtb	r2, r3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
	len--;
 8002276:	88fb      	ldrh	r3, [r7, #6]
 8002278:	3b01      	subs	r3, #1
 800227a:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e8      	bne.n	8002254 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002282:	e038      	b.n	80022f6 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	7ebb      	ldrb	r3, [r7, #26]
 800228a:	4313      	orrs	r3, r2
 800228c:	b2da      	uxtb	r2, r3
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	7e7b      	ldrb	r3, [r7, #25]
 8002298:	4053      	eors	r3, r2
 800229a:	b2da      	uxtb	r2, r3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80022a0:	7efb      	ldrb	r3, [r7, #27]
 80022a2:	3301      	adds	r3, #1
 80022a4:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80022a6:	7efb      	ldrb	r3, [r7, #27]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	76fb      	strb	r3, [r7, #27]
      len--;
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80022b4:	7efb      	ldrb	r3, [r7, #27]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d114      	bne.n	80022e4 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80022be:	461a      	mov	r2, r3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d801      	bhi.n	80022d4 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d008      	beq.n	80022f0 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	767b      	strb	r3, [r7, #25]
 80022e2:	e005      	b.n	80022f0 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80022e4:	7ebb      	ldrb	r3, [r7, #26]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80022ea:	7e7b      	ldrb	r3, [r7, #25]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1c6      	bne.n	8002284 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80022f6:	bf00      	nop
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002328:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	79fa      	ldrb	r2, [r7, #7]
 8002364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7ff ffad 	bl	8002300 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7ff fd8c 	bl	8001ec4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023d0:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	89fa      	ldrh	r2, [r7, #14]
 80023dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	7c1b      	ldrb	r3, [r3, #16]
 80023e2:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80023e4:	89fb      	ldrh	r3, [r7, #14]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	89fa      	ldrh	r2, [r7, #14]
 80023ee:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023f6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80023f8:	89fb      	ldrh	r3, [r7, #14]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	89fa      	ldrh	r2, [r7, #14]
 8002402:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800240a:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002414:	4413      	add	r3, r2
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	7c52      	ldrb	r2, [r2, #17]
 800241a:	4293      	cmp	r3, r2
 800241c:	dd08      	ble.n	8002430 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	7c5b      	ldrb	r3, [r3, #17]
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800242a:	b29b      	uxth	r3, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002430:	89fb      	ldrh	r3, [r7, #14]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	4413      	add	r3, r2
 8002456:	b29a      	uxth	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	8a9a      	ldrh	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	8ada      	ldrh	r2, [r3, #22]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af02      	add	r7, sp, #8
 8002482:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	4603      	mov	r3, r0
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff fe63 	bl	800216c <u8g2_IsIntersection>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d104      	bne.n	80024b6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80024b4:	e03b      	b.n	800252e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d205      	bcs.n	80024da <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d905      	bls.n	80024f6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002502:	429a      	cmp	r2, r3
 8002504:	d205      	bcs.n	8002512 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800251e:	429a      	cmp	r2, r3
 8002520:	d905      	bls.n	800252e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff3c 	bl	80023bc <u8g2_update_dimension_common>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff7b 	bl	800247c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af02      	add	r7, sp, #8
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	4608      	mov	r0, r1
 8002598:	4611      	mov	r1, r2
 800259a:	461a      	mov	r2, r3
 800259c:	4603      	mov	r3, r0
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	460b      	mov	r3, r1
 80025a2:	813b      	strh	r3, [r7, #8]
 80025a4:	4613      	mov	r3, r2
 80025a6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80025a8:	88f8      	ldrh	r0, [r7, #6]
 80025aa:	893a      	ldrh	r2, [r7, #8]
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	7e3b      	ldrb	r3, [r7, #24]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4603      	mov	r3, r0
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff fcfa 	bl	8001fae <u8g2_draw_hv_line_2dir>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <u8x8_ascii_next+0x18>
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	2b0a      	cmp	r3, #10
 80025f2:	d102      	bne.n	80025fa <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80025f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f8:	e001      	b.n	80025fe <u8x8_ascii_next+0x22>
  return b;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	b29b      	uxth	r3, r3
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691c      	ldr	r4, [r3, #16]
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	2300      	movs	r3, #0
 800261c:	2120      	movs	r1, #32
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	47a0      	blx	r4
 8002622:	4603      	mov	r3, r0
}
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}

0800262c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	460b      	mov	r3, r1
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	691c      	ldr	r4, [r3, #16]
 800263e:	7afa      	ldrb	r2, [r7, #11]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2117      	movs	r1, #23
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	47a0      	blx	r4
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}

08002652 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800265e:	1cfb      	adds	r3, r7, #3
 8002660:	461a      	mov	r2, r3
 8002662:	2101      	movs	r1, #1
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffe1 	bl	800262c <u8x8_byte_SendBytes>
 800266a:	4603      	mov	r3, r0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68dc      	ldr	r4, [r3, #12]
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	2300      	movs	r3, #0
 8002688:	2115      	movs	r1, #21
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	47a0      	blx	r4
 800268e:	4603      	mov	r3, r0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bd90      	pop	{r4, r7, pc}

08002698 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68dc      	ldr	r4, [r3, #12]
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	2300      	movs	r3, #0
 80026ac:	2116      	movs	r1, #22
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	47a0      	blx	r4
 80026b2:	4603      	mov	r3, r0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}

080026bc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	460b      	mov	r3, r1
 80026c6:	607a      	str	r2, [r7, #4]
 80026c8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	68dc      	ldr	r4, [r3, #12]
 80026ce:	7afa      	ldrb	r2, [r7, #11]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2117      	movs	r1, #23
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	47a0      	blx	r4
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}

080026e2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80026e2:	b590      	push	{r4, r7, lr}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68dc      	ldr	r4, [r3, #12]
 80026ee:	2300      	movs	r3, #0
 80026f0:	2200      	movs	r2, #0
 80026f2:	2118      	movs	r1, #24
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	47a0      	blx	r4
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}

08002702 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002702:	b590      	push	{r4, r7, lr}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68dc      	ldr	r4, [r3, #12]
 800270e:	2300      	movs	r3, #0
 8002710:	2200      	movs	r2, #0
 8002712:	2119      	movs	r1, #25
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	47a0      	blx	r4
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bd90      	pop	{r4, r7, pc}

08002722 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002722:	b590      	push	{r4, r7, lr}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	73fb      	strb	r3, [r7, #15]
    data++;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2bfe      	cmp	r3, #254	; 0xfe
 800273c:	d031      	beq.n	80027a2 <u8x8_cad_SendSequence+0x80>
 800273e:	2bfe      	cmp	r3, #254	; 0xfe
 8002740:	dc3d      	bgt.n	80027be <u8x8_cad_SendSequence+0x9c>
 8002742:	2b19      	cmp	r3, #25
 8002744:	dc3b      	bgt.n	80027be <u8x8_cad_SendSequence+0x9c>
 8002746:	2b18      	cmp	r3, #24
 8002748:	da23      	bge.n	8002792 <u8x8_cad_SendSequence+0x70>
 800274a:	2b16      	cmp	r3, #22
 800274c:	dc02      	bgt.n	8002754 <u8x8_cad_SendSequence+0x32>
 800274e:	2b15      	cmp	r3, #21
 8002750:	da03      	bge.n	800275a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002752:	e034      	b.n	80027be <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002754:	2b17      	cmp	r3, #23
 8002756:	d00e      	beq.n	8002776 <u8x8_cad_SendSequence+0x54>
	return;
 8002758:	e031      	b.n	80027be <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68dc      	ldr	r4, [r3, #12]
 8002764:	7bba      	ldrb	r2, [r7, #14]
 8002766:	7bf9      	ldrb	r1, [r7, #15]
 8002768:	2300      	movs	r3, #0
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	47a0      	blx	r4
	  data++;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	603b      	str	r3, [r7, #0]
	  break;
 8002774:	e022      	b.n	80027bc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800277c:	f107 030e 	add.w	r3, r7, #14
 8002780:	461a      	mov	r2, r3
 8002782:	2101      	movs	r1, #1
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7ff ff99 	bl	80026bc <u8x8_cad_SendData>
	  data++;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	603b      	str	r3, [r7, #0]
	  break;
 8002790:	e014      	b.n	80027bc <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68dc      	ldr	r4, [r3, #12]
 8002796:	7bf9      	ldrb	r1, [r7, #15]
 8002798:	2300      	movs	r3, #0
 800279a:	2200      	movs	r2, #0
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	47a0      	blx	r4
	  break;
 80027a0:	e00c      	b.n	80027bc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	461a      	mov	r2, r3
 80027ac:	2129      	movs	r1, #41	; 0x29
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fa3a 	bl	8002c28 <u8x8_gpio_call>
	  data++;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3301      	adds	r3, #1
 80027b8:	603b      	str	r3, [r7, #0]
	  break;
 80027ba:	bf00      	nop
    cmd = *data;
 80027bc:	e7b6      	b.n	800272c <u8x8_cad_SendSequence+0xa>
	return;
 80027be:	bf00      	nop
    }
  }
}
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
	...

080027c8 <u8x8_cad_011>:
  convert to bytes by using 
    dc = 0 for commands 
    dc = 1 for args and data
*/
uint8_t u8x8_cad_011(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	72fb      	strb	r3, [r7, #11]
 80027d6:	4613      	mov	r3, r2
 80027d8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80027da:	7afb      	ldrb	r3, [r7, #11]
 80027dc:	3b14      	subs	r3, #20
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d82f      	bhi.n	8002842 <u8x8_cad_011+0x7a>
 80027e2:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <u8x8_cad_011+0x20>)
 80027e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e8:	08002831 	.word	0x08002831
 80027ec:	08002801 	.word	0x08002801
 80027f0:	08002815 	.word	0x08002815
 80027f4:	08002829 	.word	0x08002829
 80027f8:	08002831 	.word	0x08002831
 80027fc:	08002831 	.word	0x08002831
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002800:	2100      	movs	r1, #0
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff ff00 	bl	8002608 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002808:	7abb      	ldrb	r3, [r7, #10]
 800280a:	4619      	mov	r1, r3
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7ff ff20 	bl	8002652 <u8x8_byte_SendByte>
      break;
 8002812:	e018      	b.n	8002846 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
 8002814:	2101      	movs	r1, #1
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7ff fef6 	bl	8002608 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800281c:	7abb      	ldrb	r3, [r7, #10]
 800281e:	4619      	mov	r1, r3
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff ff16 	bl	8002652 <u8x8_byte_SendByte>
      break;
 8002826:	e00e      	b.n	8002846 <u8x8_cad_011+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002828:	2101      	movs	r1, #1
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff feec 	bl	8002608 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	691c      	ldr	r4, [r3, #16]
 8002834:	7aba      	ldrb	r2, [r7, #10]
 8002836:	7af9      	ldrb	r1, [r7, #11]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	47a0      	blx	r4
 800283e:	4603      	mov	r3, r0
 8002840:	e002      	b.n	8002848 <u8x8_cad_011+0x80>
    default:
      return 0;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <u8x8_cad_011+0x80>
  }
  return 1;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}

08002850 <u8x8_ssd1322_8to32>:
*/

static uint8_t u8x8_ssd1322_to32_dest_buf[32];

static uint8_t *u8x8_ssd1322_8to32(U8X8_UNUSED u8x8_t *u8x8, uint8_t *ptr)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint8_t v;
  uint8_t a,b;
  uint8_t i, j;
  uint8_t *dest;
  
  for( j = 0; j < 4; j++ )
 800285a:	2300      	movs	r3, #0
 800285c:	74fb      	strb	r3, [r7, #19]
 800285e:	e03d      	b.n	80028dc <u8x8_ssd1322_8to32+0x8c>
  {
    dest = u8x8_ssd1322_to32_dest_buf;
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <u8x8_ssd1322_8to32+0xa0>)
 8002862:	60fb      	str	r3, [r7, #12]
    dest += j;
 8002864:	7cfb      	ldrb	r3, [r7, #19]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4413      	add	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
    a =*ptr;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	75bb      	strb	r3, [r7, #22]
    ptr++;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	603b      	str	r3, [r7, #0]
    b = *ptr;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	757b      	strb	r3, [r7, #21]
    ptr++;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 8; i++ )
 8002884:	2300      	movs	r3, #0
 8002886:	753b      	strb	r3, [r7, #20]
 8002888:	e022      	b.n	80028d0 <u8x8_ssd1322_8to32+0x80>
    {
      v = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	75fb      	strb	r3, [r7, #23]
      if ( a&1 ) v |= 0xf0;
 800288e:	7dbb      	ldrb	r3, [r7, #22]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <u8x8_ssd1322_8to32+0x50>
 8002898:	7dfb      	ldrb	r3, [r7, #23]
 800289a:	f063 030f 	orn	r3, r3, #15
 800289e:	75fb      	strb	r3, [r7, #23]
      if ( b&1 ) v |= 0x0f;
 80028a0:	7d7b      	ldrb	r3, [r7, #21]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <u8x8_ssd1322_8to32+0x62>
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	f043 030f 	orr.w	r3, r3, #15
 80028b0:	75fb      	strb	r3, [r7, #23]
      *dest = v;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	7dfa      	ldrb	r2, [r7, #23]
 80028b6:	701a      	strb	r2, [r3, #0]
      dest+=4;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3304      	adds	r3, #4
 80028bc:	60fb      	str	r3, [r7, #12]
      a >>= 1;
 80028be:	7dbb      	ldrb	r3, [r7, #22]
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	75bb      	strb	r3, [r7, #22]
      b >>= 1;
 80028c4:	7d7b      	ldrb	r3, [r7, #21]
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	757b      	strb	r3, [r7, #21]
    for( i = 0; i < 8; i++ )
 80028ca:	7d3b      	ldrb	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	753b      	strb	r3, [r7, #20]
 80028d0:	7d3b      	ldrb	r3, [r7, #20]
 80028d2:	2b07      	cmp	r3, #7
 80028d4:	d9d9      	bls.n	800288a <u8x8_ssd1322_8to32+0x3a>
  for( j = 0; j < 4; j++ )
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	3301      	adds	r3, #1
 80028da:	74fb      	strb	r3, [r7, #19]
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d9be      	bls.n	8002860 <u8x8_ssd1322_8to32+0x10>
    }
  }
  
  return u8x8_ssd1322_to32_dest_buf;
 80028e2:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <u8x8_ssd1322_8to32+0xa0>)
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	200013cc 	.word	0x200013cc

080028f4 <u8x8_d_ssd1322_common>:
  return u8x8_ssd1322_to32_dest_buf;
}


uint8_t u8x8_d_ssd1322_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	72fb      	strb	r3, [r7, #11]
 8002902:	4613      	mov	r3, r2
 8002904:	72bb      	strb	r3, [r7, #10]
  uint8_t x; 
  uint8_t y, c;
  uint8_t *ptr;
  switch(msg)
 8002906:	7afb      	ldrb	r3, [r7, #11]
 8002908:	2b0f      	cmp	r3, #15
 800290a:	d024      	beq.n	8002956 <u8x8_d_ssd1322_common+0x62>
 800290c:	2b0f      	cmp	r3, #15
 800290e:	f300 8081 	bgt.w	8002a14 <u8x8_d_ssd1322_common+0x120>
 8002912:	2b0b      	cmp	r3, #11
 8002914:	d002      	beq.n	800291c <u8x8_d_ssd1322_common+0x28>
 8002916:	2b0e      	cmp	r3, #14
 8002918:	d00d      	beq.n	8002936 <u8x8_d_ssd1322_common+0x42>
 800291a:	e07b      	b.n	8002a14 <u8x8_d_ssd1322_common+0x120>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800291c:	7abb      	ldrb	r3, [r7, #10]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <u8x8_d_ssd1322_common+0x38>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave0_seq);
 8002922:	4940      	ldr	r1, [pc, #256]	; (8002a24 <u8x8_d_ssd1322_common+0x130>)
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff fefc 	bl	8002722 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
      break;
 800292a:	e075      	b.n	8002a18 <u8x8_d_ssd1322_common+0x124>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_powersave1_seq);
 800292c:	493e      	ldr	r1, [pc, #248]	; (8002a28 <u8x8_d_ssd1322_common+0x134>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff fef7 	bl	8002722 <u8x8_cad_SendSequence>
      break;
 8002934:	e070      	b.n	8002a18 <u8x8_d_ssd1322_common+0x124>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7ff fed3 	bl	80026e2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x0C1 );
 800293c:	21c1      	movs	r1, #193	; 0xc1
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7ff fe98 	bl	8002674 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1322 has range from 0 to 255 */
 8002944:	7abb      	ldrb	r3, [r7, #10]
 8002946:	4619      	mov	r1, r3
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f7ff fea5 	bl	8002698 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7ff fed7 	bl	8002702 <u8x8_cad_EndTransfer>
      break;
 8002954:	e060      	b.n	8002a18 <u8x8_d_ssd1322_common+0x124>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff fec3 	bl	80026e2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	795b      	ldrb	r3, [r3, #5]
 8002960:	77fb      	strb	r3, [r7, #31]
      x *= 2;		// only every 4th col can be addressed
 8002962:	7ffb      	ldrb	r3, [r7, #31]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	77fb      	strb	r3, [r7, #31]
      x += u8x8->x_offset;		
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800296e:	7ffb      	ldrb	r3, [r7, #31]
 8002970:	4413      	add	r3, r2
 8002972:	77fb      	strb	r3, [r7, #31]
    
      y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	799b      	ldrb	r3, [r3, #6]
 8002978:	75fb      	strb	r3, [r7, #23]
      y *= 8;
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	75fb      	strb	r3, [r7, #23]
    
      
      u8x8_cad_SendCmd(u8x8, 0x075 );	/* set row address, moved out of the loop (issue 302) */
 8002980:	2175      	movs	r1, #117	; 0x75
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f7ff fe76 	bl	8002674 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, y);
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	4619      	mov	r1, r3
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff fe83 	bl	8002698 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, y+7);
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	3307      	adds	r3, #7
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f7ff fe7c 	bl	8002698 <u8x8_cad_SendArg>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	791b      	ldrb	r3, [r3, #4]
 80029a4:	77bb      	strb	r3, [r7, #30]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	61bb      	str	r3, [r7, #24]

	do
	{
	  u8x8_cad_SendCmd(u8x8, 0x015 );	/* set column address */
 80029ac:	2115      	movs	r1, #21
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f7ff fe60 	bl	8002674 <u8x8_cad_SendCmd>
	  u8x8_cad_SendArg(u8x8, x );	/* start */
 80029b4:	7ffb      	ldrb	r3, [r7, #31]
 80029b6:	4619      	mov	r1, r3
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff fe6d 	bl	8002698 <u8x8_cad_SendArg>
	  u8x8_cad_SendArg(u8x8, x+1 );	/* end */
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	3301      	adds	r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fe66 	bl	8002698 <u8x8_cad_SendArg>

	  u8x8_cad_SendCmd(u8x8, 0x05c );	/* write to ram */
 80029cc:	215c      	movs	r1, #92	; 0x5c
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f7ff fe50 	bl	8002674 <u8x8_cad_SendCmd>
	  
	  u8x8_cad_SendData(u8x8, 32, u8x8_ssd1322_8to32(u8x8, ptr));
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f7ff ff3a 	bl	8002850 <u8x8_ssd1322_8to32>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	2120      	movs	r1, #32
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f7ff fe6a 	bl	80026bc <u8x8_cad_SendData>
	  
	  ptr += 8;
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	3308      	adds	r3, #8
 80029ec:	61bb      	str	r3, [r7, #24]
	  x += 2;
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
 80029f0:	3302      	adds	r3, #2
 80029f2:	77fb      	strb	r3, [r7, #31]
	  c--;
 80029f4:	7fbb      	ldrb	r3, [r7, #30]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	77bb      	strb	r3, [r7, #30]
	} while( c > 0 );
 80029fa:	7fbb      	ldrb	r3, [r7, #30]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1d5      	bne.n	80029ac <u8x8_d_ssd1322_common+0xb8>
	
	//x += 2;
	arg_int--;
 8002a00:	7abb      	ldrb	r3, [r7, #10]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002a06:	7abb      	ldrb	r3, [r7, #10]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1c9      	bne.n	80029a0 <u8x8_d_ssd1322_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fe78 	bl	8002702 <u8x8_cad_EndTransfer>
      break;
 8002a12:	e001      	b.n	8002a18 <u8x8_d_ssd1322_common+0x124>
    default:
      return 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <u8x8_d_ssd1322_common+0x126>
  }
  return 1;
 8002a18:	2301      	movs	r3, #1
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	0800e4cc 	.word	0x0800e4cc
 8002a28:	0800e4d4 	.word	0x0800e4d4

08002a2c <u8x8_d_ssd1322_nhd_256x64>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1322_nhd_256x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	72fb      	strb	r3, [r7, #11]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002a3e:	7afb      	ldrb	r3, [r7, #11]
 8002a40:	2b0d      	cmp	r3, #13
 8002a42:	d013      	beq.n	8002a6c <u8x8_d_ssd1322_nhd_256x64+0x40>
 8002a44:	2b0d      	cmp	r3, #13
 8002a46:	dc2a      	bgt.n	8002a9e <u8x8_d_ssd1322_nhd_256x64+0x72>
 8002a48:	2b09      	cmp	r3, #9
 8002a4a:	d002      	beq.n	8002a52 <u8x8_d_ssd1322_nhd_256x64+0x26>
 8002a4c:	2b0a      	cmp	r3, #10
 8002a4e:	d005      	beq.n	8002a5c <u8x8_d_ssd1322_nhd_256x64+0x30>
 8002a50:	e025      	b.n	8002a9e <u8x8_d_ssd1322_nhd_256x64+0x72>
  {
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1322_256x64_display_info);
 8002a52:	4919      	ldr	r1, [pc, #100]	; (8002ab8 <u8x8_d_ssd1322_nhd_256x64+0x8c>)
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f837 	bl	8002ac8 <u8x8_d_helper_display_setup_memory>
      break;
 8002a5a:	e028      	b.n	8002aae <u8x8_d_ssd1322_nhd_256x64+0x82>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f846 	bl	8002aee <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_init_seq);
 8002a62:	4916      	ldr	r1, [pc, #88]	; (8002abc <u8x8_d_ssd1322_nhd_256x64+0x90>)
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff fe5c 	bl	8002722 <u8x8_cad_SendSequence>
      break;
 8002a6a:	e020      	b.n	8002aae <u8x8_d_ssd1322_nhd_256x64+0x82>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002a6c:	7abb      	ldrb	r3, [r7, #10]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <u8x8_d_ssd1322_nhd_256x64+0x5c>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip0_seq);
 8002a72:	4913      	ldr	r1, [pc, #76]	; (8002ac0 <u8x8_d_ssd1322_nhd_256x64+0x94>)
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff fe54 	bl	8002722 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	7c9a      	ldrb	r2, [r3, #18]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002a86:	e012      	b.n	8002aae <u8x8_d_ssd1322_nhd_256x64+0x82>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1322_256x64_flip1_seq);
 8002a88:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <u8x8_d_ssd1322_nhd_256x64+0x98>)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff fe49 	bl	8002722 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	7cda      	ldrb	r2, [r3, #19]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002a9c:	e007      	b.n	8002aae <u8x8_d_ssd1322_nhd_256x64+0x82>
    
    default:
      return u8x8_d_ssd1322_common(u8x8, msg, arg_int, arg_ptr);
 8002a9e:	7aba      	ldrb	r2, [r7, #10]
 8002aa0:	7af9      	ldrb	r1, [r7, #11]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7ff ff25 	bl	80028f4 <u8x8_d_ssd1322_common>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	e000      	b.n	8002ab0 <u8x8_d_ssd1322_nhd_256x64+0x84>
  }
  return 1;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	0800e4f4 	.word	0x0800e4f4
 8002abc:	0800e50c 	.word	0x0800e50c
 8002ac0:	0800e4dc 	.word	0x0800e4dc
 8002ac4:	0800e4e8 	.word	0x0800e4e8

08002ac8 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	7c9a      	ldrb	r2, [r3, #18]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002aee:	b590      	push	{r4, r7, lr}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695c      	ldr	r4, [r3, #20]
 8002afa:	2300      	movs	r3, #0
 8002afc:	2200      	movs	r2, #0
 8002afe:	2128      	movs	r1, #40	; 0x28
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68dc      	ldr	r4, [r3, #12]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2114      	movs	r1, #20
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002b12:	2201      	movs	r2, #1
 8002b14:	214b      	movs	r1, #75	; 0x4b
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f886 	bl	8002c28 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	791b      	ldrb	r3, [r3, #4]
 8002b22:	461a      	mov	r2, r3
 8002b24:	2129      	movs	r1, #41	; 0x29
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f87e 	bl	8002c28 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	214b      	movs	r1, #75	; 0x4b
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f879 	bl	8002c28 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	791b      	ldrb	r3, [r3, #4]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2129      	movs	r1, #41	; 0x29
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f871 	bl	8002c28 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002b46:	2201      	movs	r2, #1
 8002b48:	214b      	movs	r1, #75	; 0x4b
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f86c 	bl	8002c28 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	795b      	ldrb	r3, [r3, #5]
 8002b56:	461a      	mov	r2, r3
 8002b58:	2129      	movs	r1, #41	; 0x29
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f864 	bl	8002c28 <u8x8_gpio_call>
}    
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd90      	pop	{r4, r7, pc}

08002b68 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	4608      	mov	r0, r1
 8002b72:	4611      	mov	r1, r2
 8002b74:	461a      	mov	r2, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	70fb      	strb	r3, [r7, #3]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	70bb      	strb	r3, [r7, #2]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002b86:	78bb      	ldrb	r3, [r7, #2]
 8002b88:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002b8a:	787b      	ldrb	r3, [r7, #1]
 8002b8c:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689c      	ldr	r4, [r3, #8]
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	210f      	movs	r1, #15
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	47a0      	blx	r4
 8002ba2:	4603      	mov	r3, r0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd90      	pop	{r4, r7, pc}

08002bac <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689c      	ldr	r4, [r3, #8]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2109      	movs	r1, #9
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	47a0      	blx	r4
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}

08002bca <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002bca:	b590      	push	{r4, r7, lr}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689c      	ldr	r4, [r3, #8]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2200      	movs	r2, #0
 8002bda:	210a      	movs	r1, #10
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	47a0      	blx	r4
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}

08002be8 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689c      	ldr	r4, [r3, #8]
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	210b      	movs	r1, #11
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	47a0      	blx	r4
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd90      	pop	{r4, r7, pc}

08002c0a <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002c0a:	b590      	push	{r4, r7, lr}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689c      	ldr	r4, [r3, #8]
 8002c16:	2300      	movs	r3, #0
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	47a0      	blx	r4
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}

08002c28 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
 8002c34:	4613      	mov	r3, r2
 8002c36:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695c      	ldr	r4, [r3, #20]
 8002c3c:	78ba      	ldrb	r2, [r7, #2]
 8002c3e:	78f9      	ldrb	r1, [r7, #3]
 8002c40:	2300      	movs	r3, #0
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	47a0      	blx	r4
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}

08002c4e <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	72fb      	strb	r3, [r7, #11]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <u8x8_SetupDefaults+0x58>)
 8002c7e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a10      	ldr	r2, [pc, #64]	; (8002cc4 <u8x8_SetupDefaults+0x58>)
 8002c84:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <u8x8_SetupDefaults+0x58>)
 8002c8a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <u8x8_SetupDefaults+0x58>)
 8002c90:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	22ff      	movs	r2, #255	; 0xff
 8002cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	22ff      	movs	r2, #255	; 0xff
 8002cb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	08002c4f 	.word	0x08002c4f

08002cc8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff ffc8 	bl	8002c6c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff ff59 	bl	8002bac <u8x8_SetupMemory>
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
	...

08002d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d04:	480c      	ldr	r0, [pc, #48]	; (8002d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d06:	490d      	ldr	r1, [pc, #52]	; (8002d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d0c:	e002      	b.n	8002d14 <LoopCopyDataInit>

08002d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d12:	3304      	adds	r3, #4

08002d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d18:	d3f9      	bcc.n	8002d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d1c:	4c0a      	ldr	r4, [pc, #40]	; (8002d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d20:	e001      	b.n	8002d26 <LoopFillZerobss>

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d24:	3204      	adds	r2, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d2a:	f7fe f89f 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d2e:	f00a f805 	bl	800cd3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d32:	f7fd fa27 	bl	8000184 <main>
  bx lr
 8002d36:	4770      	bx	lr
  ldr r0, =_sdata
 8002d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d3c:	200009e0 	.word	0x200009e0
  ldr r2, =_sidata
 8002d40:	0800e59c 	.word	0x0800e59c
  ldr r2, =_sbss
 8002d44:	200009e0 	.word	0x200009e0
  ldr r4, =_ebss
 8002d48:	200025d4 	.word	0x200025d4

08002d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d4c:	e7fe      	b.n	8002d4c <ADC1_2_IRQHandler>
	...

08002d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_Init+0x28>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a07      	ldr	r2, [pc, #28]	; (8002d78 <HAL_Init+0x28>)
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d60:	2003      	movs	r0, #3
 8002d62:	f000 fdbf 	bl	80038e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d66:	200f      	movs	r0, #15
 8002d68:	f000 f808 	bl	8002d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d6c:	f7fd fe3c 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40022000 	.word	0x40022000

08002d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_InitTick+0x54>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_InitTick+0x58>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fdd7 	bl	800394e <HAL_SYSTICK_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00e      	b.n	8002dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b0f      	cmp	r3, #15
 8002dae:	d80a      	bhi.n	8002dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002db0:	2200      	movs	r2, #0
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002db8:	f000 fd9f 	bl	80038fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dbc:	4a06      	ldr	r2, [pc, #24]	; (8002dd8 <HAL_InitTick+0x5c>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000800 	.word	0x20000800
 8002dd4:	20000808 	.word	0x20000808
 8002dd8:	20000804 	.word	0x20000804

08002ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_IncTick+0x1c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_IncTick+0x20>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	4a03      	ldr	r2, [pc, #12]	; (8002dfc <HAL_IncTick+0x20>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	20000808 	.word	0x20000808
 8002dfc:	200013ec 	.word	0x200013ec

08002e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return uwTick;
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <HAL_GetTick+0x10>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	200013ec 	.word	0x200013ec

08002e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7ff fff0 	bl	8002e00 <HAL_GetTick>
 8002e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2c:	d005      	beq.n	8002e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_Delay+0x44>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e3a:	bf00      	nop
 8002e3c:	f7ff ffe0 	bl	8002e00 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d8f7      	bhi.n	8002e3c <HAL_Delay+0x28>
  {
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	20000808 	.word	0x20000808

08002e5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0be      	b.n	8002ffc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fdc6 	bl	8000a2c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 faff 	bl	80034a4 <ADC_ConversionStop_Disable>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 8099 	bne.w	8002fea <HAL_ADC_Init+0x18e>
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 8095 	bne.w	8002fea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ec8:	f023 0302 	bic.w	r3, r3, #2
 8002ecc:	f043 0202 	orr.w	r2, r3, #2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002edc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7b1b      	ldrb	r3, [r3, #12]
 8002ee2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ee4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef4:	d003      	beq.n	8002efe <HAL_ADC_Init+0xa2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_ADC_Init+0xa8>
 8002efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f02:	e000      	b.n	8002f06 <HAL_ADC_Init+0xaa>
 8002f04:	2300      	movs	r3, #0
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7d1b      	ldrb	r3, [r3, #20]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d119      	bne.n	8002f48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7b1b      	ldrb	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	035a      	lsls	r2, r3, #13
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e00b      	b.n	8002f48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_ADC_Init+0x1a8>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	430b      	orrs	r3, r1
 8002f6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f78:	d003      	beq.n	8002f82 <HAL_ADC_Init+0x126>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d104      	bne.n	8002f8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	051b      	lsls	r3, r3, #20
 8002f8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_ADC_Init+0x1ac>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d10b      	bne.n	8002fc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	f043 0201 	orr.w	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fc6:	e018      	b.n	8002ffa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	f023 0312 	bic.w	r3, r3, #18
 8002fd0:	f043 0210 	orr.w	r2, r3, #16
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fe8:	e007      	b.n	8002ffa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	f043 0210 	orr.w	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	ffe1f7fd 	.word	0xffe1f7fd
 8003008:	ff1f0efe 	.word	0xff1f0efe

0800300c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a64      	ldr	r2, [pc, #400]	; (80031b4 <HAL_ADC_Start_DMA+0x1a8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_ADC_Start_DMA+0x24>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a63      	ldr	r2, [pc, #396]	; (80031b8 <HAL_ADC_Start_DMA+0x1ac>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d106      	bne.n	800303e <HAL_ADC_Start_DMA+0x32>
 8003030:	4b60      	ldr	r3, [pc, #384]	; (80031b4 <HAL_ADC_Start_DMA+0x1a8>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f040 80b3 	bne.w	80031a4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_ADC_Start_DMA+0x40>
 8003048:	2302      	movs	r3, #2
 800304a:	e0ae      	b.n	80031aa <HAL_ADC_Start_DMA+0x19e>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f9cb 	bl	80033f0 <ADC_Enable>
 800305a:	4603      	mov	r3, r0
 800305c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f040 809a 	bne.w	800319a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4e      	ldr	r2, [pc, #312]	; (80031b8 <HAL_ADC_Start_DMA+0x1ac>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d105      	bne.n	8003090 <HAL_ADC_Start_DMA+0x84>
 8003084:	4b4b      	ldr	r3, [pc, #300]	; (80031b4 <HAL_ADC_Start_DMA+0x1a8>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d115      	bne.n	80030bc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003094:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d026      	beq.n	80030f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ba:	e01d      	b.n	80030f8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a39      	ldr	r2, [pc, #228]	; (80031b4 <HAL_ADC_Start_DMA+0x1a8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <HAL_ADC_Start_DMA+0xd0>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a38      	ldr	r2, [pc, #224]	; (80031b8 <HAL_ADC_Start_DMA+0x1ac>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d10d      	bne.n	80030f8 <HAL_ADC_Start_DMA+0xec>
 80030dc:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <HAL_ADC_Start_DMA+0x1a8>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f023 0206 	bic.w	r2, r3, #6
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003110:	e002      	b.n	8003118 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a25      	ldr	r2, [pc, #148]	; (80031bc <HAL_ADC_Start_DMA+0x1b0>)
 8003126:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_ADC_Start_DMA+0x1b4>)
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4a23      	ldr	r2, [pc, #140]	; (80031c4 <HAL_ADC_Start_DMA+0x1b8>)
 8003136:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0202 	mvn.w	r2, #2
 8003140:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003150:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a18      	ldr	r0, [r3, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	334c      	adds	r3, #76	; 0x4c
 800315c:	4619      	mov	r1, r3
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f000 fc5b 	bl	8003a1c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003170:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003174:	d108      	bne.n	8003188 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003184:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003186:	e00f      	b.n	80031a8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003196:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003198:	e006      	b.n	80031a8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80031a2:	e001      	b.n	80031a8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40012400 	.word	0x40012400
 80031b8:	40012800 	.word	0x40012800
 80031bc:	08003527 	.word	0x08003527
 80031c0:	080035a3 	.word	0x080035a3
 80031c4:	080035bf 	.word	0x080035bf

080031c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
	...

08003200 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x20>
 800321c:	2302      	movs	r3, #2
 800321e:	e0dc      	b.n	80033da <HAL_ADC_ConfigChannel+0x1da>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b06      	cmp	r3, #6
 800322e:	d81c      	bhi.n	800326a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	3b05      	subs	r3, #5
 8003242:	221f      	movs	r2, #31
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	4019      	ands	r1, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	3b05      	subs	r3, #5
 800325c:	fa00 f203 	lsl.w	r2, r0, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	; 0x34
 8003268:	e03c      	b.n	80032e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d81c      	bhi.n	80032ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b23      	subs	r3, #35	; 0x23
 8003284:	221f      	movs	r2, #31
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	4019      	ands	r1, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b23      	subs	r3, #35	; 0x23
 800329e:	fa00 f203 	lsl.w	r2, r0, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
 80032aa:	e01b      	b.n	80032e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	3b41      	subs	r3, #65	; 0x41
 80032be:	221f      	movs	r2, #31
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	43db      	mvns	r3, r3
 80032c6:	4019      	ands	r1, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	3b41      	subs	r3, #65	; 0x41
 80032d8:	fa00 f203 	lsl.w	r2, r0, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	d91c      	bls.n	8003326 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68d9      	ldr	r1, [r3, #12]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	3b1e      	subs	r3, #30
 80032fe:	2207      	movs	r2, #7
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	4019      	ands	r1, r3
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6898      	ldr	r0, [r3, #8]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	3b1e      	subs	r3, #30
 8003318:	fa00 f203 	lsl.w	r2, r0, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	e019      	b.n	800335a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6919      	ldr	r1, [r3, #16]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	2207      	movs	r2, #7
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	4019      	ands	r1, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6898      	ldr	r0, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	fa00 f203 	lsl.w	r2, r0, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b10      	cmp	r3, #16
 8003360:	d003      	beq.n	800336a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003366:	2b11      	cmp	r3, #17
 8003368:	d132      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d125      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d126      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003390:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b10      	cmp	r3, #16
 8003398:	d11a      	bne.n	80033d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a13      	ldr	r2, [pc, #76]	; (80033ec <HAL_ADC_ConfigChannel+0x1ec>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	0c9a      	lsrs	r2, r3, #18
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033b0:	e002      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3b01      	subs	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f9      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x1b2>
 80033be:	e007      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	40012400 	.word	0x40012400
 80033e8:	20000800 	.word	0x20000800
 80033ec:	431bde83 	.word	0x431bde83

080033f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d040      	beq.n	8003490 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800341e:	4b1f      	ldr	r3, [pc, #124]	; (800349c <ADC_Enable+0xac>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1f      	ldr	r2, [pc, #124]	; (80034a0 <ADC_Enable+0xb0>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	0c9b      	lsrs	r3, r3, #18
 800342a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800342c:	e002      	b.n	8003434 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	3b01      	subs	r3, #1
 8003432:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800343a:	f7ff fce1 	bl	8002e00 <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003440:	e01f      	b.n	8003482 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003442:	f7ff fcdd 	bl	8002e00 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d918      	bls.n	8003482 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b01      	cmp	r3, #1
 800345c:	d011      	beq.n	8003482 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	f043 0210 	orr.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	f043 0201 	orr.w	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e007      	b.n	8003492 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b01      	cmp	r3, #1
 800348e:	d1d8      	bne.n	8003442 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000800 	.word	0x20000800
 80034a0:	431bde83 	.word	0x431bde83

080034a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d12e      	bne.n	800351c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034ce:	f7ff fc97 	bl	8002e00 <HAL_GetTick>
 80034d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034d4:	e01b      	b.n	800350e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034d6:	f7ff fc93 	bl	8002e00 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d914      	bls.n	800350e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d10d      	bne.n	800350e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f043 0201 	orr.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e007      	b.n	800351e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b01      	cmp	r3, #1
 800351a:	d0dc      	beq.n	80034d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800353c:	2b00      	cmp	r3, #0
 800353e:	d127      	bne.n	8003590 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003544:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003556:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800355a:	d115      	bne.n	8003588 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003560:	2b00      	cmp	r3, #0
 8003562:	d111      	bne.n	8003588 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff fe1d 	bl	80031c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800358e:	e004      	b.n	800359a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
}
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff fe12 	bl	80031da <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b084      	sub	sp, #16
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	f043 0204 	orr.w	r2, r3, #4
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fe01 	bl	80031ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
	...

080035f4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_ADCEx_Calibration_Start+0x1e>
 800360e:	2302      	movs	r3, #2
 8003610:	e095      	b.n	800373e <HAL_ADCEx_Calibration_Start+0x14a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ff42 	bl	80034a4 <ADC_ConversionStop_Disable>
 8003620:	4603      	mov	r3, r0
 8003622:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8084 	bne.w	8003734 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003634:	f023 0302 	bic.w	r3, r3, #2
 8003638:	f043 0202 	orr.w	r2, r3, #2
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003640:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_ADCEx_Calibration_Start+0x154>)
 8003642:	681c      	ldr	r4, [r3, #0]
 8003644:	2002      	movs	r0, #2
 8003646:	f003 f82d 	bl	80066a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800364a:	4603      	mov	r3, r0
 800364c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003650:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003652:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003654:	e002      	b.n	800365c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3b01      	subs	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f9      	bne.n	8003656 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fec4 	bl	80033f0 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0208 	orr.w	r2, r2, #8
 8003676:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003678:	f7ff fbc2 	bl	8002e00 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800367e:	e01b      	b.n	80036b8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003680:	f7ff fbbe 	bl	8002e00 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b0a      	cmp	r3, #10
 800368c:	d914      	bls.n	80036b8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00d      	beq.n	80036b8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	f023 0312 	bic.w	r3, r3, #18
 80036a4:	f043 0210 	orr.w	r2, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e042      	b.n	800373e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1dc      	bne.n	8003680 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f042 0204 	orr.w	r2, r2, #4
 80036d4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80036d6:	f7ff fb93 	bl	8002e00 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036dc:	e01b      	b.n	8003716 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80036de:	f7ff fb8f 	bl	8002e00 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b0a      	cmp	r3, #10
 80036ea:	d914      	bls.n	8003716 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	f023 0312 	bic.w	r3, r3, #18
 8003702:	f043 0210 	orr.w	r2, r3, #16
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e013      	b.n	800373e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1dc      	bne.n	80036de <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	f023 0303 	bic.w	r3, r3, #3
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
}
 800373e:	4618      	mov	r0, r3
 8003740:	371c      	adds	r7, #28
 8003742:	46bd      	mov	sp, r7
 8003744:	bd90      	pop	{r4, r7, pc}
 8003746:	bf00      	nop
 8003748:	20000800 	.word	0x20000800

0800374c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <__NVIC_GetPriorityGrouping+0x18>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	f003 0307 	and.w	r3, r3, #7
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db0b      	blt.n	80037da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	4906      	ldr	r1, [pc, #24]	; (80037e4 <__NVIC_EnableIRQ+0x34>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2001      	movs	r0, #1
 80037d2:	fa00 f202 	lsl.w	r2, r0, r2
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	e000e100 	.word	0xe000e100

080037e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	db0a      	blt.n	8003812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	490c      	ldr	r1, [pc, #48]	; (8003834 <__NVIC_SetPriority+0x4c>)
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	0112      	lsls	r2, r2, #4
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	440b      	add	r3, r1
 800380c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003810:	e00a      	b.n	8003828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	4908      	ldr	r1, [pc, #32]	; (8003838 <__NVIC_SetPriority+0x50>)
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	3b04      	subs	r3, #4
 8003820:	0112      	lsls	r2, r2, #4
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	440b      	add	r3, r1
 8003826:	761a      	strb	r2, [r3, #24]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f1c3 0307 	rsb	r3, r3, #7
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf28      	it	cs
 800385a:	2304      	movcs	r3, #4
 800385c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3304      	adds	r3, #4
 8003862:	2b06      	cmp	r3, #6
 8003864:	d902      	bls.n	800386c <NVIC_EncodePriority+0x30>
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3b03      	subs	r3, #3
 800386a:	e000      	b.n	800386e <NVIC_EncodePriority+0x32>
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	401a      	ands	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003884:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	43d9      	mvns	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003894:	4313      	orrs	r3, r2
         );
}
 8003896:	4618      	mov	r0, r3
 8003898:	3724      	adds	r7, #36	; 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b0:	d301      	bcc.n	80038b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00f      	b.n	80038d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b6:	4a0a      	ldr	r2, [pc, #40]	; (80038e0 <SysTick_Config+0x40>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038be:	210f      	movs	r1, #15
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c4:	f7ff ff90 	bl	80037e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <SysTick_Config+0x40>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <SysTick_Config+0x40>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010

080038e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff2d 	bl	800374c <__NVIC_SetPriorityGrouping>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b086      	sub	sp, #24
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4603      	mov	r3, r0
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800390c:	f7ff ff42 	bl	8003794 <__NVIC_GetPriorityGrouping>
 8003910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	6978      	ldr	r0, [r7, #20]
 8003918:	f7ff ff90 	bl	800383c <NVIC_EncodePriority>
 800391c:	4602      	mov	r2, r0
 800391e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff5f 	bl	80037e8 <__NVIC_SetPriority>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800393c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff35 	bl	80037b0 <__NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ffa2 	bl	80038a0 <SysTick_Config>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e043      	b.n	8003a06 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_DMA_Init+0xa8>)
 8003986:	4413      	add	r3, r2
 8003988:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <HAL_DMA_Init+0xac>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	009a      	lsls	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a1f      	ldr	r2, [pc, #124]	; (8003a18 <HAL_DMA_Init+0xb0>)
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80039b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	bffdfff8 	.word	0xbffdfff8
 8003a14:	cccccccd 	.word	0xcccccccd
 8003a18:	40020000 	.word	0x40020000

08003a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_DMA_Start_IT+0x20>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e04a      	b.n	8003ad2 <HAL_DMA_Start_IT+0xb6>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d13a      	bne.n	8003ac4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f938 	bl	8003ce8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 020e 	orr.w	r2, r2, #14
 8003a8e:	601a      	str	r2, [r3, #0]
 8003a90:	e00f      	b.n	8003ab2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 020a 	orr.w	r2, r2, #10
 8003ab0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f042 0201 	orr.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e005      	b.n	8003ad0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
 8003ace:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	2204      	movs	r2, #4
 8003afa:	409a      	lsls	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d04f      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0xc8>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d04a      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0204 	bic.w	r2, r2, #4
 8003b2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a66      	ldr	r2, [pc, #408]	; (8003ccc <HAL_DMA_IRQHandler+0x1f0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d029      	beq.n	8003b8a <HAL_DMA_IRQHandler+0xae>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a65      	ldr	r2, [pc, #404]	; (8003cd0 <HAL_DMA_IRQHandler+0x1f4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <HAL_DMA_IRQHandler+0xaa>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a63      	ldr	r2, [pc, #396]	; (8003cd4 <HAL_DMA_IRQHandler+0x1f8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01a      	beq.n	8003b80 <HAL_DMA_IRQHandler+0xa4>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a62      	ldr	r2, [pc, #392]	; (8003cd8 <HAL_DMA_IRQHandler+0x1fc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d012      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x9e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a60      	ldr	r2, [pc, #384]	; (8003cdc <HAL_DMA_IRQHandler+0x200>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00a      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x98>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a5f      	ldr	r2, [pc, #380]	; (8003ce0 <HAL_DMA_IRQHandler+0x204>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d102      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x92>
 8003b68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b6c:	e00e      	b.n	8003b8c <HAL_DMA_IRQHandler+0xb0>
 8003b6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b72:	e00b      	b.n	8003b8c <HAL_DMA_IRQHandler+0xb0>
 8003b74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003b78:	e008      	b.n	8003b8c <HAL_DMA_IRQHandler+0xb0>
 8003b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b7e:	e005      	b.n	8003b8c <HAL_DMA_IRQHandler+0xb0>
 8003b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b84:	e002      	b.n	8003b8c <HAL_DMA_IRQHandler+0xb0>
 8003b86:	2340      	movs	r3, #64	; 0x40
 8003b88:	e000      	b.n	8003b8c <HAL_DMA_IRQHandler+0xb0>
 8003b8a:	2304      	movs	r3, #4
 8003b8c:	4a55      	ldr	r2, [pc, #340]	; (8003ce4 <HAL_DMA_IRQHandler+0x208>)
 8003b8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8094 	beq.w	8003cc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003ba2:	e08e      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2202      	movs	r2, #2
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d056      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x186>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d051      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 020a 	bic.w	r2, r2, #10
 8003bda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <HAL_DMA_IRQHandler+0x1f0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d029      	beq.n	8003c42 <HAL_DMA_IRQHandler+0x166>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a37      	ldr	r2, [pc, #220]	; (8003cd0 <HAL_DMA_IRQHandler+0x1f4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d022      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x162>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a35      	ldr	r2, [pc, #212]	; (8003cd4 <HAL_DMA_IRQHandler+0x1f8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01a      	beq.n	8003c38 <HAL_DMA_IRQHandler+0x15c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a34      	ldr	r2, [pc, #208]	; (8003cd8 <HAL_DMA_IRQHandler+0x1fc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d012      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x156>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a32      	ldr	r2, [pc, #200]	; (8003cdc <HAL_DMA_IRQHandler+0x200>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00a      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x150>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a31      	ldr	r2, [pc, #196]	; (8003ce0 <HAL_DMA_IRQHandler+0x204>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d102      	bne.n	8003c26 <HAL_DMA_IRQHandler+0x14a>
 8003c20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c24:	e00e      	b.n	8003c44 <HAL_DMA_IRQHandler+0x168>
 8003c26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c2a:	e00b      	b.n	8003c44 <HAL_DMA_IRQHandler+0x168>
 8003c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c30:	e008      	b.n	8003c44 <HAL_DMA_IRQHandler+0x168>
 8003c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c36:	e005      	b.n	8003c44 <HAL_DMA_IRQHandler+0x168>
 8003c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c3c:	e002      	b.n	8003c44 <HAL_DMA_IRQHandler+0x168>
 8003c3e:	2320      	movs	r3, #32
 8003c40:	e000      	b.n	8003c44 <HAL_DMA_IRQHandler+0x168>
 8003c42:	2302      	movs	r3, #2
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_DMA_IRQHandler+0x208>)
 8003c46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d034      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c60:	e02f      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2208      	movs	r2, #8
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d028      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x1e8>
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d023      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 020e 	bic.w	r2, r2, #14
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
    }
  }
  return;
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
}
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40020008 	.word	0x40020008
 8003cd0:	4002001c 	.word	0x4002001c
 8003cd4:	40020030 	.word	0x40020030
 8003cd8:	40020044 	.word	0x40020044
 8003cdc:	40020058 	.word	0x40020058
 8003ce0:	4002006c 	.word	0x4002006c
 8003ce4:	40020000 	.word	0x40020000

08003ce8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b10      	cmp	r3, #16
 8003d14:	d108      	bne.n	8003d28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d26:	e007      	b.n	8003d38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr
	...

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b08b      	sub	sp, #44	; 0x2c
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d52:	2300      	movs	r3, #0
 8003d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d56:	e169      	b.n	800402c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d58:	2201      	movs	r2, #1
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	f040 8158 	bne.w	8004026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4a9a      	ldr	r2, [pc, #616]	; (8003fe4 <HAL_GPIO_Init+0x2a0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d05e      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003d80:	4a98      	ldr	r2, [pc, #608]	; (8003fe4 <HAL_GPIO_Init+0x2a0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d875      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003d86:	4a98      	ldr	r2, [pc, #608]	; (8003fe8 <HAL_GPIO_Init+0x2a4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d058      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003d8c:	4a96      	ldr	r2, [pc, #600]	; (8003fe8 <HAL_GPIO_Init+0x2a4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d86f      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003d92:	4a96      	ldr	r2, [pc, #600]	; (8003fec <HAL_GPIO_Init+0x2a8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d052      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003d98:	4a94      	ldr	r2, [pc, #592]	; (8003fec <HAL_GPIO_Init+0x2a8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d869      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003d9e:	4a94      	ldr	r2, [pc, #592]	; (8003ff0 <HAL_GPIO_Init+0x2ac>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d04c      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003da4:	4a92      	ldr	r2, [pc, #584]	; (8003ff0 <HAL_GPIO_Init+0x2ac>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d863      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003daa:	4a92      	ldr	r2, [pc, #584]	; (8003ff4 <HAL_GPIO_Init+0x2b0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d046      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
 8003db0:	4a90      	ldr	r2, [pc, #576]	; (8003ff4 <HAL_GPIO_Init+0x2b0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d85d      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003db6:	2b12      	cmp	r3, #18
 8003db8:	d82a      	bhi.n	8003e10 <HAL_GPIO_Init+0xcc>
 8003dba:	2b12      	cmp	r3, #18
 8003dbc:	d859      	bhi.n	8003e72 <HAL_GPIO_Init+0x12e>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <HAL_GPIO_Init+0x80>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003e3f 	.word	0x08003e3f
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e2b 	.word	0x08003e2b
 8003dd0:	08003e6d 	.word	0x08003e6d
 8003dd4:	08003e73 	.word	0x08003e73
 8003dd8:	08003e73 	.word	0x08003e73
 8003ddc:	08003e73 	.word	0x08003e73
 8003de0:	08003e73 	.word	0x08003e73
 8003de4:	08003e73 	.word	0x08003e73
 8003de8:	08003e73 	.word	0x08003e73
 8003dec:	08003e73 	.word	0x08003e73
 8003df0:	08003e73 	.word	0x08003e73
 8003df4:	08003e73 	.word	0x08003e73
 8003df8:	08003e73 	.word	0x08003e73
 8003dfc:	08003e73 	.word	0x08003e73
 8003e00:	08003e73 	.word	0x08003e73
 8003e04:	08003e73 	.word	0x08003e73
 8003e08:	08003e21 	.word	0x08003e21
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	4a79      	ldr	r2, [pc, #484]	; (8003ff8 <HAL_GPIO_Init+0x2b4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e16:	e02c      	b.n	8003e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	623b      	str	r3, [r7, #32]
          break;
 8003e1e:	e029      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	623b      	str	r3, [r7, #32]
          break;
 8003e28:	e024      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	623b      	str	r3, [r7, #32]
          break;
 8003e32:	e01f      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	623b      	str	r3, [r7, #32]
          break;
 8003e3c:	e01a      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d102      	bne.n	8003e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e46:	2304      	movs	r3, #4
 8003e48:	623b      	str	r3, [r7, #32]
          break;
 8003e4a:	e013      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e54:	2308      	movs	r3, #8
 8003e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	611a      	str	r2, [r3, #16]
          break;
 8003e5e:	e009      	b.n	8003e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e60:	2308      	movs	r3, #8
 8003e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	615a      	str	r2, [r3, #20]
          break;
 8003e6a:	e003      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
          break;
 8003e70:	e000      	b.n	8003e74 <HAL_GPIO_Init+0x130>
          break;
 8003e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	2bff      	cmp	r3, #255	; 0xff
 8003e78:	d801      	bhi.n	8003e7e <HAL_GPIO_Init+0x13a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	e001      	b.n	8003e82 <HAL_GPIO_Init+0x13e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2bff      	cmp	r3, #255	; 0xff
 8003e88:	d802      	bhi.n	8003e90 <HAL_GPIO_Init+0x14c>
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	e002      	b.n	8003e96 <HAL_GPIO_Init+0x152>
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	3b08      	subs	r3, #8
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	210f      	movs	r1, #15
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	401a      	ands	r2, r3
 8003ea8:	6a39      	ldr	r1, [r7, #32]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80b1 	beq.w	8004026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ec4:	4b4d      	ldr	r3, [pc, #308]	; (8003ffc <HAL_GPIO_Init+0x2b8>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4a4c      	ldr	r2, [pc, #304]	; (8003ffc <HAL_GPIO_Init+0x2b8>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6193      	str	r3, [r2, #24]
 8003ed0:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <HAL_GPIO_Init+0x2b8>)
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	60bb      	str	r3, [r7, #8]
 8003eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003edc:	4a48      	ldr	r2, [pc, #288]	; (8004000 <HAL_GPIO_Init+0x2bc>)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	089b      	lsrs	r3, r3, #2
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	220f      	movs	r2, #15
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4013      	ands	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a40      	ldr	r2, [pc, #256]	; (8004004 <HAL_GPIO_Init+0x2c0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <HAL_GPIO_Init+0x1ec>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3f      	ldr	r2, [pc, #252]	; (8004008 <HAL_GPIO_Init+0x2c4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00d      	beq.n	8003f2c <HAL_GPIO_Init+0x1e8>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a3e      	ldr	r2, [pc, #248]	; (800400c <HAL_GPIO_Init+0x2c8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <HAL_GPIO_Init+0x1e4>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3d      	ldr	r2, [pc, #244]	; (8004010 <HAL_GPIO_Init+0x2cc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d101      	bne.n	8003f24 <HAL_GPIO_Init+0x1e0>
 8003f20:	2303      	movs	r3, #3
 8003f22:	e006      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e004      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e002      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f30:	2300      	movs	r3, #0
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	f002 0203 	and.w	r2, r2, #3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4093      	lsls	r3, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f42:	492f      	ldr	r1, [pc, #188]	; (8004000 <HAL_GPIO_Init+0x2bc>)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f5c:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	492c      	ldr	r1, [pc, #176]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	600b      	str	r3, [r1, #0]
 8003f68:	e006      	b.n	8003f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f6a:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	4928      	ldr	r1, [pc, #160]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d006      	beq.n	8003f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f84:	4b23      	ldr	r3, [pc, #140]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	4922      	ldr	r1, [pc, #136]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
 8003f90:	e006      	b.n	8003fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	491e      	ldr	r1, [pc, #120]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d006      	beq.n	8003fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	4918      	ldr	r1, [pc, #96]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]
 8003fb8:	e006      	b.n	8003fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	4914      	ldr	r1, [pc, #80]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d021      	beq.n	8004018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <HAL_GPIO_Init+0x2d0>)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	60cb      	str	r3, [r1, #12]
 8003fe0:	e021      	b.n	8004026 <HAL_GPIO_Init+0x2e2>
 8003fe2:	bf00      	nop
 8003fe4:	10320000 	.word	0x10320000
 8003fe8:	10310000 	.word	0x10310000
 8003fec:	10220000 	.word	0x10220000
 8003ff0:	10210000 	.word	0x10210000
 8003ff4:	10120000 	.word	0x10120000
 8003ff8:	10110000 	.word	0x10110000
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40010000 	.word	0x40010000
 8004004:	40010800 	.word	0x40010800
 8004008:	40010c00 	.word	0x40010c00
 800400c:	40011000 	.word	0x40011000
 8004010:	40011400 	.word	0x40011400
 8004014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_GPIO_Init+0x304>)
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	43db      	mvns	r3, r3
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <HAL_GPIO_Init+0x304>)
 8004022:	4013      	ands	r3, r2
 8004024:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	3301      	adds	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	f47f ae8e 	bne.w	8003d58 <HAL_GPIO_Init+0x14>
  }
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	372c      	adds	r7, #44	; 0x2c
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr
 8004048:	40010400 	.word	0x40010400

0800404c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	887b      	ldrh	r3, [r7, #2]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
 8004068:	e001      	b.n	800406e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	807b      	strh	r3, [r7, #2]
 8004086:	4613      	mov	r3, r2
 8004088:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800408a:	787b      	ldrb	r3, [r7, #1]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004090:	887a      	ldrh	r2, [r7, #2]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004096:	e003      	b.n	80040a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	041a      	lsls	r2, r3, #16
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	611a      	str	r2, [r3, #16]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr

080040aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b085      	sub	sp, #20
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040bc:	887a      	ldrh	r2, [r7, #2]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4013      	ands	r3, r2
 80040c2:	041a      	lsls	r2, r3, #16
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	43d9      	mvns	r1, r3
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	400b      	ands	r3, r1
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	611a      	str	r2, [r3, #16]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e12b      	b.n	8004346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fc fd12 	bl	8000b2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800413e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004140:	f002 f9b4 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8004144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4a81      	ldr	r2, [pc, #516]	; (8004350 <HAL_I2C_Init+0x274>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d807      	bhi.n	8004160 <HAL_I2C_Init+0x84>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a80      	ldr	r2, [pc, #512]	; (8004354 <HAL_I2C_Init+0x278>)
 8004154:	4293      	cmp	r3, r2
 8004156:	bf94      	ite	ls
 8004158:	2301      	movls	r3, #1
 800415a:	2300      	movhi	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e006      	b.n	800416e <HAL_I2C_Init+0x92>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4a7d      	ldr	r2, [pc, #500]	; (8004358 <HAL_I2C_Init+0x27c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	bf94      	ite	ls
 8004168:	2301      	movls	r3, #1
 800416a:	2300      	movhi	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0e7      	b.n	8004346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4a78      	ldr	r2, [pc, #480]	; (800435c <HAL_I2C_Init+0x280>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0c9b      	lsrs	r3, r3, #18
 8004180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a6a      	ldr	r2, [pc, #424]	; (8004350 <HAL_I2C_Init+0x274>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d802      	bhi.n	80041b0 <HAL_I2C_Init+0xd4>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	3301      	adds	r3, #1
 80041ae:	e009      	b.n	80041c4 <HAL_I2C_Init+0xe8>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	4a69      	ldr	r2, [pc, #420]	; (8004360 <HAL_I2C_Init+0x284>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	3301      	adds	r3, #1
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	430b      	orrs	r3, r1
 80041ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	495c      	ldr	r1, [pc, #368]	; (8004350 <HAL_I2C_Init+0x274>)
 80041e0:	428b      	cmp	r3, r1
 80041e2:	d819      	bhi.n	8004218 <HAL_I2C_Init+0x13c>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e59      	subs	r1, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80041f2:	1c59      	adds	r1, r3, #1
 80041f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80041f8:	400b      	ands	r3, r1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_I2C_Init+0x138>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1e59      	subs	r1, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	fbb1 f3f3 	udiv	r3, r1, r3
 800420c:	3301      	adds	r3, #1
 800420e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004212:	e051      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004214:	2304      	movs	r3, #4
 8004216:	e04f      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d111      	bne.n	8004244 <HAL_I2C_Init+0x168>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1e58      	subs	r0, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	440b      	add	r3, r1
 800422e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004232:	3301      	adds	r3, #1
 8004234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf0c      	ite	eq
 800423c:	2301      	moveq	r3, #1
 800423e:	2300      	movne	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e012      	b.n	800426a <HAL_I2C_Init+0x18e>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e58      	subs	r0, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	0099      	lsls	r1, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	fbb0 f3f3 	udiv	r3, r0, r3
 800425a:	3301      	adds	r3, #1
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Init+0x196>
 800426e:	2301      	movs	r3, #1
 8004270:	e022      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10e      	bne.n	8004298 <HAL_I2C_Init+0x1bc>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1e58      	subs	r0, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	440b      	add	r3, r1
 8004288:	fbb0 f3f3 	udiv	r3, r0, r3
 800428c:	3301      	adds	r3, #1
 800428e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004296:	e00f      	b.n	80042b8 <HAL_I2C_Init+0x1dc>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1e58      	subs	r0, r3, #1
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	0099      	lsls	r1, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ae:	3301      	adds	r3, #1
 80042b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	6809      	ldr	r1, [r1, #0]
 80042bc:	4313      	orrs	r3, r2
 80042be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69da      	ldr	r2, [r3, #28]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6911      	ldr	r1, [r2, #16]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68d2      	ldr	r2, [r2, #12]
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	000186a0 	.word	0x000186a0
 8004354:	001e847f 	.word	0x001e847f
 8004358:	003d08ff 	.word	0x003d08ff
 800435c:	431bde83 	.word	0x431bde83
 8004360:	10624dd3 	.word	0x10624dd3

08004364 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004366:	b08b      	sub	sp, #44	; 0x2c
 8004368:	af06      	add	r7, sp, #24
 800436a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0fd      	b.n	8004572 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f008 fa26 	bl	800c7dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2203      	movs	r2, #3
 8004394:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f003 ff6b 	bl	8008278 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	687e      	ldr	r6, [r7, #4]
 80043aa:	466d      	mov	r5, sp
 80043ac:	f106 0410 	add.w	r4, r6, #16
 80043b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	602b      	str	r3, [r5, #0]
 80043b8:	1d33      	adds	r3, r6, #4
 80043ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043bc:	6838      	ldr	r0, [r7, #0]
 80043be:	f003 ff35 	bl	800822c <USB_CoreInit>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0ce      	b.n	8004572 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f003 ff66 	bl	80082ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	e04c      	b.n	8004480 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	440b      	add	r3, r1
 80043f6:	3301      	adds	r3, #1
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	440b      	add	r3, r1
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004410:	7bfa      	ldrb	r2, [r7, #15]
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	b298      	uxth	r0, r3
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	440b      	add	r3, r1
 8004422:	3336      	adds	r3, #54	; 0x36
 8004424:	4602      	mov	r2, r0
 8004426:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	440b      	add	r3, r1
 8004438:	3303      	adds	r3, #3
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	440b      	add	r3, r1
 800444c:	3338      	adds	r3, #56	; 0x38
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004452:	7bfa      	ldrb	r2, [r7, #15]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	440b      	add	r3, r1
 8004460:	333c      	adds	r3, #60	; 0x3c
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004466:	7bfa      	ldrb	r2, [r7, #15]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	440b      	add	r3, r1
 8004474:	3340      	adds	r3, #64	; 0x40
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	3301      	adds	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	429a      	cmp	r2, r3
 8004488:	d3ad      	bcc.n	80043e6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
 800448e:	e044      	b.n	800451a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004490:	7bfa      	ldrb	r2, [r7, #15]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	440b      	add	r3, r1
 800449e:	f203 1369 	addw	r3, r3, #361	; 0x169
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	440b      	add	r3, r1
 80044b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044b8:	7bfa      	ldrb	r2, [r7, #15]
 80044ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044bc:	7bfa      	ldrb	r2, [r7, #15]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	440b      	add	r3, r1
 80044ca:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	440b      	add	r3, r1
 80044e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044e8:	7bfa      	ldrb	r2, [r7, #15]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	440b      	add	r3, r1
 80044f6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044fe:	7bfa      	ldrb	r2, [r7, #15]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	440b      	add	r3, r1
 800450c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	3301      	adds	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d3b5      	bcc.n	8004490 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	687e      	ldr	r6, [r7, #4]
 800452c:	466d      	mov	r5, sp
 800452e:	f106 0410 	add.w	r4, r6, #16
 8004532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	602b      	str	r3, [r5, #0]
 800453a:	1d33      	adds	r3, r6, #4
 800453c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800453e:	6838      	ldr	r0, [r7, #0]
 8004540:	f003 fec0 	bl	80082c4 <USB_DevInit>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e00d      	b.n	8004572 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f006 fb72 	bl	800ac54 <USB_DevDisconnect>

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800457a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_PCD_Start+0x16>
 800458c:	2302      	movs	r3, #2
 800458e:	e016      	b.n	80045be <HAL_PCD_Start+0x44>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f003 fe55 	bl	800824c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80045a2:	2101      	movs	r1, #1
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f008 fb8c 	bl	800ccc2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f006 fb46 	bl	800ac40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b088      	sub	sp, #32
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f006 fb48 	bl	800ac68 <USB_ReadInterrupts>
 80045d8:	4603      	mov	r3, r0
 80045da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e2:	d102      	bne.n	80045ea <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fb5f 	bl	8004ca8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f006 fb3a 	bl	800ac68 <USB_ReadInterrupts>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fe:	d112      	bne.n	8004626 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004612:	b292      	uxth	r2, r2
 8004614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f008 f95a 	bl	800c8d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800461e:	2100      	movs	r1, #0
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f923 	bl	800486c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f006 fb1c 	bl	800ac68 <USB_ReadInterrupts>
 8004630:	4603      	mov	r3, r0
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800463a:	d10b      	bne.n	8004654 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800464e:	b292      	uxth	r2, r2
 8004650:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f006 fb05 	bl	800ac68 <USB_ReadInterrupts>
 800465e:	4603      	mov	r3, r0
 8004660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004668:	d10b      	bne.n	8004682 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004672:	b29a      	uxth	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800467c:	b292      	uxth	r2, r2
 800467e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f006 faee 	bl	800ac68 <USB_ReadInterrupts>
 800468c:	4603      	mov	r3, r0
 800468e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	d126      	bne.n	80046e6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0204 	bic.w	r2, r2, #4
 80046aa:	b292      	uxth	r2, r2
 80046ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0208 	bic.w	r2, r2, #8
 80046c2:	b292      	uxth	r2, r2
 80046c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f008 f93b 	bl	800c944 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046e0:	b292      	uxth	r2, r2
 80046e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f006 fabc 	bl	800ac68 <USB_ReadInterrupts>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fa:	f040 8082 	bne.w	8004802 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80046fe:	2300      	movs	r3, #0
 8004700:	77fb      	strb	r3, [r7, #31]
 8004702:	e010      	b.n	8004726 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	7ffb      	ldrb	r3, [r7, #31]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	441a      	add	r2, r3
 8004710:	7ffb      	ldrb	r3, [r7, #31]
 8004712:	8812      	ldrh	r2, [r2, #0]
 8004714:	b292      	uxth	r2, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	3320      	adds	r3, #32
 800471a:	443b      	add	r3, r7
 800471c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8004720:	7ffb      	ldrb	r3, [r7, #31]
 8004722:	3301      	adds	r3, #1
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	2b07      	cmp	r3, #7
 800472a:	d9eb      	bls.n	8004704 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004734:	b29a      	uxth	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	b292      	uxth	r2, r2
 8004740:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0201 	bic.w	r2, r2, #1
 8004756:	b292      	uxth	r2, r2
 8004758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800475c:	bf00      	nop
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004766:	b29b      	uxth	r3, r3
 8004768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f6      	beq.n	800475e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004782:	b292      	uxth	r2, r2
 8004784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004788:	2300      	movs	r3, #0
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e00f      	b.n	80047ae <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800478e:	7ffb      	ldrb	r3, [r7, #31]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	4611      	mov	r1, r2
 8004796:	7ffa      	ldrb	r2, [r7, #31]
 8004798:	0092      	lsls	r2, r2, #2
 800479a:	440a      	add	r2, r1
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	3320      	adds	r3, #32
 80047a0:	443b      	add	r3, r7
 80047a2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80047a6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80047a8:	7ffb      	ldrb	r3, [r7, #31]
 80047aa:	3301      	adds	r3, #1
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	7ffb      	ldrb	r3, [r7, #31]
 80047b0:	2b07      	cmp	r3, #7
 80047b2:	d9ec      	bls.n	800478e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047bc:	b29a      	uxth	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0208 	orr.w	r2, r2, #8
 80047c6:	b292      	uxth	r2, r2
 80047c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047de:	b292      	uxth	r2, r2
 80047e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0204 	orr.w	r2, r2, #4
 80047f6:	b292      	uxth	r2, r2
 80047f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f008 f887 	bl	800c910 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f006 fa2e 	bl	800ac68 <USB_ReadInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004816:	d10e      	bne.n	8004836 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800482a:	b292      	uxth	r2, r2
 800482c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f008 f840 	bl	800c8b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f006 fa14 	bl	800ac68 <USB_ReadInterrupts>
 8004840:	4603      	mov	r3, r0
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484a:	d10b      	bne.n	8004864 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800485e:	b292      	uxth	r2, r2
 8004860:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_PCD_SetAddress+0x1a>
 8004882:	2302      	movs	r3, #2
 8004884:	e013      	b.n	80048ae <HAL_PCD_SetAddress+0x42>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f006 f9bb 	bl	800ac1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	4608      	mov	r0, r1
 80048c0:	4611      	mov	r1, r2
 80048c2:	461a      	mov	r2, r3
 80048c4:	4603      	mov	r3, r0
 80048c6:	70fb      	strb	r3, [r7, #3]
 80048c8:	460b      	mov	r3, r1
 80048ca:	803b      	strh	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da0e      	bge.n	80048fa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4413      	add	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	705a      	strb	r2, [r3, #1]
 80048f8:	e00e      	b.n	8004918 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	f003 0207 	and.w	r2, r3, #7
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	b2da      	uxtb	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004924:	883a      	ldrh	r2, [r7, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	78ba      	ldrb	r2, [r7, #2]
 800492e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	785b      	ldrb	r3, [r3, #1]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004942:	78bb      	ldrb	r3, [r7, #2]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d102      	bne.n	800494e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_PCD_EP_Open+0xa6>
 8004958:	2302      	movs	r3, #2
 800495a:	e00e      	b.n	800497a <HAL_PCD_EP_Open+0xc4>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68f9      	ldr	r1, [r7, #12]
 800496a:	4618      	mov	r0, r3
 800496c:	f003 fcca 	bl	8008304 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004978:	7afb      	ldrb	r3, [r7, #11]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	460b      	mov	r3, r1
 800498c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800498e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004992:	2b00      	cmp	r3, #0
 8004994:	da0e      	bge.n	80049b4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	705a      	strb	r2, [r3, #1]
 80049b2:	e00e      	b.n	80049d2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	f003 0207 	and.w	r2, r3, #7
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_PCD_EP_Close+0x6a>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e00e      	b.n	8004a0a <HAL_PCD_EP_Close+0x88>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f003 ffec 	bl	80089d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b086      	sub	sp, #24
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a22:	7afb      	ldrb	r3, [r7, #11]
 8004a24:	f003 0207 	and.w	r2, r3, #7
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a5e:	7afb      	ldrb	r3, [r7, #11]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6979      	ldr	r1, [r7, #20]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 f99e 	bl	8008db0 <USB_EPStartXfer>
 8004a74:	e005      	b.n	8004a82 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6979      	ldr	r1, [r7, #20]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f004 f997 	bl	8008db0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	f003 0207 	and.w	r2, r3, #7
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bc80      	pop	{r7}
 8004ab8:	4770      	bx	lr

08004aba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aca:	7afb      	ldrb	r3, [r7, #11]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2200      	movs	r2, #0
 8004afe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2201      	movs	r2, #1
 8004b04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b06:	7afb      	ldrb	r3, [r7, #11]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b12:	7afb      	ldrb	r3, [r7, #11]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6979      	ldr	r1, [r7, #20]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f004 f944 	bl	8008db0 <USB_EPStartXfer>
 8004b28:	e005      	b.n	8004b36 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6979      	ldr	r1, [r7, #20]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f004 f93d 	bl	8008db0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	f003 0207 	and.w	r2, r3, #7
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d901      	bls.n	8004b5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e04c      	b.n	8004bf8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	da0e      	bge.n	8004b84 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	705a      	strb	r2, [r3, #1]
 8004b82:	e00c      	b.n	8004b9e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_PCD_EP_SetStall+0x7e>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e01c      	b.n	8004bf8 <HAL_PCD_EP_SetStall+0xb8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68f9      	ldr	r1, [r7, #12]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f005 ff27 	bl	800aa20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bd2:	78fb      	ldrb	r3, [r7, #3]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d108      	bne.n	8004bee <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f006 f84c 	bl	800ac86 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	f003 020f 	and.w	r2, r3, #15
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d901      	bls.n	8004c1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e040      	b.n	8004ca0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da0e      	bge.n	8004c44 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	705a      	strb	r2, [r3, #1]
 8004c42:	e00e      	b.n	8004c62 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	f003 0207 	and.w	r2, r3, #7
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4413      	add	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 0307 	and.w	r3, r3, #7
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_PCD_EP_ClrStall+0x82>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e00e      	b.n	8004ca0 <HAL_PCD_EP_ClrStall+0xa0>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68f9      	ldr	r1, [r7, #12]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f005 ff15 	bl	800aac0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cb0:	e2ec      	b.n	800528c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004cba:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004cbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8004cc8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f040 8161 	bne.w	8004f94 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cd4:	f003 0310 	and.w	r3, r3, #16
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d152      	bne.n	8004d82 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cec:	81fb      	strh	r3, [r7, #14]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3328      	adds	r3, #40	; 0x28
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	3302      	adds	r3, #2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	4413      	add	r3, r2
 8004d24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	441a      	add	r2, r3
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d40:	2100      	movs	r1, #0
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f007 fd9d 	bl	800c882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 829b 	beq.w	800528c <PCD_EP_ISR_Handler+0x5e4>
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 8296 	bne.w	800528c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	b292      	uxth	r2, r2
 8004d74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004d80:	e284      	b.n	800528c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d034      	beq.n	8004e06 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	3306      	adds	r3, #6
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f005 ffa3 	bl	800ad26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004dec:	4013      	ands	r3, r2
 8004dee:	823b      	strh	r3, [r7, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	8a3a      	ldrh	r2, [r7, #16]
 8004df6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dfa:	b292      	uxth	r2, r2
 8004dfc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f007 fd12 	bl	800c828 <HAL_PCD_SetupStageCallback>
 8004e04:	e242      	b.n	800528c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e06:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f280 823e 	bge.w	800528c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	83bb      	strh	r3, [r7, #28]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	8bba      	ldrh	r2, [r7, #28]
 8004e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e2a:	b292      	uxth	r2, r2
 8004e2c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	3306      	adds	r3, #6
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d019      	beq.n	8004e96 <PCD_EP_ISR_Handler+0x1ee>
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d015      	beq.n	8004e96 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	6959      	ldr	r1, [r3, #20]
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f005 ff53 	bl	800ad26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	441a      	add	r2, r3
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e8e:	2100      	movs	r1, #0
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f007 fcdb 	bl	800c84c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 81f2 	bne.w	800528c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d112      	bne.n	8004ef6 <PCD_EP_ISR_Handler+0x24e>
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e02f      	b.n	8004f56 <PCD_EP_ISR_Handler+0x2ae>
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b3e      	cmp	r3, #62	; 0x3e
 8004efc:	d813      	bhi.n	8004f26 <PCD_EP_ISR_Handler+0x27e>
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	633b      	str	r3, [r7, #48]	; 0x30
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <PCD_EP_ISR_Handler+0x270>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	3301      	adds	r3, #1
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e017      	b.n	8004f56 <PCD_EP_ISR_Handler+0x2ae>
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <PCD_EP_ISR_Handler+0x298>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	827b      	strh	r3, [r7, #18]
 8004f68:	8a7b      	ldrh	r3, [r7, #18]
 8004f6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f6e:	827b      	strh	r3, [r7, #18]
 8004f70:	8a7b      	ldrh	r3, [r7, #18]
 8004f72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f76:	827b      	strh	r3, [r7, #18]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	8a7b      	ldrh	r3, [r7, #18]
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]
 8004f92:	e17b      	b.n	800528c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fa6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f280 80ea 	bge.w	8005184 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	853b      	strh	r3, [r7, #40]	; 0x28
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fde:	b292      	uxth	r2, r2
 8004fe0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004fe2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	7b1b      	ldrb	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d122      	bne.n	8005046 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005008:	b29b      	uxth	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4413      	add	r3, r2
 8005014:	3306      	adds	r3, #6
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005028:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800502a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8087 	beq.w	8005140 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	6959      	ldr	r1, [r3, #20]
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	88da      	ldrh	r2, [r3, #6]
 800503e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005040:	f005 fe71 	bl	800ad26 <USB_ReadPMA>
 8005044:	e07c      	b.n	8005140 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	78db      	ldrb	r3, [r3, #3]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d108      	bne.n	8005060 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800504e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005050:	461a      	mov	r2, r3
 8005052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f927 	bl	80052a8 <HAL_PCD_EP_DB_Receive>
 800505a:	4603      	mov	r3, r0
 800505c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800505e:	e06f      	b.n	8005140 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	847b      	strh	r3, [r7, #34]	; 0x22
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	441a      	add	r2, r3
 800508a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800508c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005098:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800509c:	b29b      	uxth	r3, r3
 800509e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d021      	beq.n	80050fe <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	4413      	add	r3, r2
 80050ce:	3302      	adds	r3, #2
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6812      	ldr	r2, [r2, #0]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80050e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d02a      	beq.n	8005140 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	6959      	ldr	r1, [r3, #20]
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	891a      	ldrh	r2, [r3, #8]
 80050f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050f8:	f005 fe15 	bl	800ad26 <USB_ReadPMA>
 80050fc:	e020      	b.n	8005140 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4413      	add	r3, r2
 8005112:	3306      	adds	r3, #6
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005126:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	6959      	ldr	r1, [r3, #20]
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	895a      	ldrh	r2, [r3, #10]
 800513a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800513c:	f005 fdf3 	bl	800ad26 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005146:	441a      	add	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005152:	441a      	add	r2, r3
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <PCD_EP_ISR_Handler+0x4c2>
 8005160:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	429a      	cmp	r2, r3
 8005168:	d206      	bcs.n	8005178 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f007 fb6b 	bl	800c84c <HAL_PCD_DataOutStageCallback>
 8005176:	e005      	b.n	8005184 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800517e:	4618      	mov	r0, r3
 8005180:	f003 fe16 	bl	8008db0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005184:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518a:	2b00      	cmp	r3, #0
 800518c:	d07e      	beq.n	800528c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800518e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	4413      	add	r3, r2
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	843b      	strh	r3, [r7, #32]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	441a      	add	r2, r3
 80051cc:	8c3b      	ldrh	r3, [r7, #32]
 80051ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d00c      	beq.n	80051fc <PCD_EP_ISR_Handler+0x554>
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	78db      	ldrb	r3, [r3, #3]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d146      	bne.n	8005280 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80051f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d141      	bne.n	8005280 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005204:	b29b      	uxth	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	3302      	adds	r3, #2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005224:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	8bfb      	ldrh	r3, [r7, #30]
 800522c:	429a      	cmp	r2, r3
 800522e:	d906      	bls.n	800523e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	699a      	ldr	r2, [r3, #24]
 8005234:	8bfb      	ldrh	r3, [r7, #30]
 8005236:	1ad2      	subs	r2, r2, r3
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	619a      	str	r2, [r3, #24]
 800523c:	e002      	b.n	8005244 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	2200      	movs	r2, #0
 8005242:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f007 fb15 	bl	800c882 <HAL_PCD_DataInStageCallback>
 8005258:	e018      	b.n	800528c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	8bfb      	ldrh	r3, [r7, #30]
 8005260:	441a      	add	r2, r3
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	8bfb      	ldrh	r3, [r7, #30]
 800526c:	441a      	add	r2, r3
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005278:	4618      	mov	r0, r3
 800527a:	f003 fd99 	bl	8008db0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800527e:	e005      	b.n	800528c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005280:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005282:	461a      	mov	r2, r3
 8005284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f91b 	bl	80054c2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005294:	b29b      	uxth	r3, r3
 8005296:	b21b      	sxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	f6ff ad0a 	blt.w	8004cb2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3738      	adds	r7, #56	; 0x38
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d07e      	beq.n	80053be <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	461a      	mov	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	3302      	adds	r3, #2
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	8b7b      	ldrh	r3, [r7, #26]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d306      	bcc.n	8005302 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	699a      	ldr	r2, [r3, #24]
 80052f8:	8b7b      	ldrh	r3, [r7, #26]
 80052fa:	1ad2      	subs	r2, r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	619a      	str	r2, [r3, #24]
 8005300:	e002      	b.n	8005308 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2200      	movs	r2, #0
 8005306:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d123      	bne.n	8005358 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	833b      	strh	r3, [r7, #24]
 800532c:	8b3b      	ldrh	r3, [r7, #24]
 800532e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005332:	833b      	strh	r3, [r7, #24]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	441a      	add	r2, r3
 8005342:	8b3b      	ldrh	r3, [r7, #24]
 8005344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800534c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	b29b      	uxth	r3, r3
 8005356:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01f      	beq.n	80053a2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	82fb      	strh	r3, [r7, #22]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	441a      	add	r2, r3
 800538c:	8afb      	ldrh	r3, [r7, #22]
 800538e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800539a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053a2:	8b7b      	ldrh	r3, [r7, #26]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 8087 	beq.w	80054b8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6959      	ldr	r1, [r3, #20]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	891a      	ldrh	r2, [r3, #8]
 80053b6:	8b7b      	ldrh	r3, [r7, #26]
 80053b8:	f005 fcb5 	bl	800ad26 <USB_ReadPMA>
 80053bc:	e07c      	b.n	80054b8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	3306      	adds	r3, #6
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	8b7b      	ldrh	r3, [r7, #26]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d306      	bcc.n	8005400 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	8b7b      	ldrh	r3, [r7, #26]
 80053f8:	1ad2      	subs	r2, r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	619a      	str	r2, [r3, #24]
 80053fe:	e002      	b.n	8005406 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2200      	movs	r2, #0
 8005404:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d123      	bne.n	8005456 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005428:	83fb      	strh	r3, [r7, #30]
 800542a:	8bfb      	ldrh	r3, [r7, #30]
 800542c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005430:	83fb      	strh	r3, [r7, #30]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	441a      	add	r2, r3
 8005440:	8bfb      	ldrh	r3, [r7, #30]
 8005442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800544a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	b29b      	uxth	r3, r3
 8005454:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11f      	bne.n	80054a0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	461a      	mov	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4413      	add	r3, r2
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b29b      	uxth	r3, r3
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547a:	83bb      	strh	r3, [r7, #28]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	441a      	add	r2, r3
 800548a:	8bbb      	ldrh	r3, [r7, #28]
 800548c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005498:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800549c:	b29b      	uxth	r3, r3
 800549e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054a0:	8b7b      	ldrh	r3, [r7, #26]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d008      	beq.n	80054b8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6959      	ldr	r1, [r3, #20]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	895a      	ldrh	r2, [r3, #10]
 80054b2:	8b7b      	ldrh	r3, [r7, #26]
 80054b4:	f005 fc37 	bl	800ad26 <USB_ReadPMA>
    }
  }

  return count;
 80054b8:	8b7b      	ldrh	r3, [r7, #26]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b0a2      	sub	sp, #136	; 0x88
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	4613      	mov	r3, r2
 80054ce:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 81c7 	beq.w	800586a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	3302      	adds	r3, #2
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005504:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005510:	429a      	cmp	r2, r3
 8005512:	d907      	bls.n	8005524 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800551c:	1ad2      	subs	r2, r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	619a      	str	r2, [r3, #24]
 8005522:	e002      	b.n	800552a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2200      	movs	r2, #0
 8005528:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f040 80b9 	bne.w	80056a6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d126      	bne.n	800558a <HAL_PCD_EP_DB_Transmit+0xc8>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	62bb      	str	r3, [r7, #40]	; 0x28
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	4413      	add	r3, r2
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	011a      	lsls	r2, r3, #4
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	4413      	add	r3, r2
 800555e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800556e:	b29a      	uxth	r2, r3
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800557e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005582:	b29a      	uxth	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e01a      	b.n	80055c0 <HAL_PCD_EP_DB_Transmit+0xfe>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d116      	bne.n	80055c0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	4413      	add	r3, r2
 80055a8:	633b      	str	r3, [r7, #48]	; 0x30
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	011a      	lsls	r2, r3, #4
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	4413      	add	r3, r2
 80055b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	2200      	movs	r2, #0
 80055be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	785b      	ldrb	r3, [r3, #1]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d126      	bne.n	800561c <HAL_PCD_EP_DB_Transmit+0x15a>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055dc:	b29b      	uxth	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	4413      	add	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	011a      	lsls	r2, r3, #4
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005600:	b29a      	uxth	r2, r3
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005614:	b29a      	uxth	r2, r3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	e017      	b.n	800564c <HAL_PCD_EP_DB_Transmit+0x18a>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d113      	bne.n	800564c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	4413      	add	r3, r2
 8005634:	623b      	str	r3, [r7, #32]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	011a      	lsls	r2, r3, #4
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	4413      	add	r3, r2
 8005640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	2200      	movs	r2, #0
 800564a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	4619      	mov	r1, r3
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f007 f915 	bl	800c882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 82d4 	beq.w	8005c0c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	827b      	strh	r3, [r7, #18]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	461a      	mov	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	441a      	add	r2, r3
 800568e:	8a7b      	ldrh	r3, [r7, #18]
 8005690:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005694:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800569c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	8013      	strh	r3, [r2, #0]
 80056a4:	e2b2      	b.n	8005c0c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d021      	beq.n	80056f4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	441a      	add	r2, r3
 80056dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80056e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	f040 8286 	bne.w	8005c0c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005708:	441a      	add	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005716:	441a      	add	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6a1a      	ldr	r2, [r3, #32]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d309      	bcc.n	800573c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6a1a      	ldr	r2, [r3, #32]
 8005732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005734:	1ad2      	subs	r2, r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	621a      	str	r2, [r3, #32]
 800573a:	e015      	b.n	8005768 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d107      	bne.n	8005754 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8005744:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005748:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005752:	e009      	b.n	8005768 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2200      	movs	r2, #0
 8005766:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d155      	bne.n	800581c <HAL_PCD_EP_DB_Transmit+0x35a>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577e:	b29b      	uxth	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	4413      	add	r3, r2
 8005786:	63bb      	str	r3, [r7, #56]	; 0x38
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	011a      	lsls	r2, r3, #4
 800578e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005790:	4413      	add	r3, r2
 8005792:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
 8005798:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800579a:	2b00      	cmp	r3, #0
 800579c:	d112      	bne.n	80057c4 <HAL_PCD_EP_DB_Transmit+0x302>
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057bc:	b29a      	uxth	r2, r3
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	e047      	b.n	8005854 <HAL_PCD_EP_DB_Transmit+0x392>
 80057c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c6:	2b3e      	cmp	r3, #62	; 0x3e
 80057c8:	d811      	bhi.n	80057ee <HAL_PCD_EP_DB_Transmit+0x32c>
 80057ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_PCD_EP_DB_Transmit+0x31e>
 80057da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057dc:	3301      	adds	r3, #1
 80057de:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	029b      	lsls	r3, r3, #10
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e032      	b.n	8005854 <HAL_PCD_EP_DB_Transmit+0x392>
 80057ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <HAL_PCD_EP_DB_Transmit+0x342>
 80057fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005800:	3b01      	subs	r3, #1
 8005802:	64bb      	str	r3, [r7, #72]	; 0x48
 8005804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005806:	b29b      	uxth	r3, r3
 8005808:	029b      	lsls	r3, r3, #10
 800580a:	b29b      	uxth	r3, r3
 800580c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005814:	b29a      	uxth	r2, r3
 8005816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005818:	801a      	strh	r2, [r3, #0]
 800581a:	e01b      	b.n	8005854 <HAL_PCD_EP_DB_Transmit+0x392>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d117      	bne.n	8005854 <HAL_PCD_EP_DB_Transmit+0x392>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	643b      	str	r3, [r7, #64]	; 0x40
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005832:	b29b      	uxth	r3, r3
 8005834:	461a      	mov	r2, r3
 8005836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005838:	4413      	add	r3, r2
 800583a:	643b      	str	r3, [r7, #64]	; 0x40
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	011a      	lsls	r2, r3, #4
 8005842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005844:	4413      	add	r3, r2
 8005846:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800584e:	b29a      	uxth	r2, r3
 8005850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005852:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6959      	ldr	r1, [r3, #20]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	891a      	ldrh	r2, [r3, #8]
 8005860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005862:	b29b      	uxth	r3, r3
 8005864:	f005 fa1a 	bl	800ac9c <USB_WritePMA>
 8005868:	e1d0      	b.n	8005c0c <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005872:	b29b      	uxth	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4413      	add	r3, r2
 800587e:	3306      	adds	r3, #6
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	6812      	ldr	r2, [r2, #0]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800589e:	429a      	cmp	r2, r3
 80058a0:	d307      	bcc.n	80058b2 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80058aa:	1ad2      	subs	r2, r2, r3
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	619a      	str	r2, [r3, #24]
 80058b0:	e002      	b.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2200      	movs	r2, #0
 80058b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f040 80c4 	bne.w	8005a4a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	785b      	ldrb	r3, [r3, #1]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d126      	bne.n	8005918 <HAL_PCD_EP_DB_Transmit+0x456>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d8:	b29b      	uxth	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058de:	4413      	add	r3, r2
 80058e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	011a      	lsls	r2, r3, #4
 80058e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ea:	4413      	add	r3, r2
 80058ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80058f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005910:	b29a      	uxth	r2, r3
 8005912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	e01a      	b.n	800594e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	785b      	ldrb	r3, [r3, #1]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d116      	bne.n	800594e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	677b      	str	r3, [r7, #116]	; 0x74
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592e:	b29b      	uxth	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005934:	4413      	add	r3, r2
 8005936:	677b      	str	r3, [r7, #116]	; 0x74
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	011a      	lsls	r2, r3, #4
 800593e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005940:	4413      	add	r3, r2
 8005942:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005946:	673b      	str	r3, [r7, #112]	; 0x70
 8005948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800594a:	2200      	movs	r2, #0
 800594c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	67bb      	str	r3, [r7, #120]	; 0x78
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d12f      	bne.n	80059bc <HAL_PCD_EP_DB_Transmit+0x4fa>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005974:	4413      	add	r3, r2
 8005976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	011a      	lsls	r2, r3, #4
 8005980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005984:	4413      	add	r3, r2
 8005986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800598a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800598e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800599a:	b29a      	uxth	r2, r3
 800599c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	e017      	b.n	80059ec <HAL_PCD_EP_DB_Transmit+0x52a>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d113      	bne.n	80059ec <HAL_PCD_EP_DB_Transmit+0x52a>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d2:	4413      	add	r3, r2
 80059d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	011a      	lsls	r2, r3, #4
 80059dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059de:	4413      	add	r3, r2
 80059e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80059e8:	2200      	movs	r2, #0
 80059ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f006 ff45 	bl	800c882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 8104 	bne.w	8005c0c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]
 8005a48:	e0e0      	b.n	8005c0c <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d121      	bne.n	8005a98 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	441a      	add	r2, r3
 8005a80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	f040 80b4 	bne.w	8005c0c <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005aac:	441a      	add	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005aba:	441a      	add	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6a1a      	ldr	r2, [r3, #32]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d309      	bcc.n	8005ae0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	6a1a      	ldr	r2, [r3, #32]
 8005ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	621a      	str	r2, [r3, #32]
 8005ade:	e015      	b.n	8005b0c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d107      	bne.n	8005af8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8005ae8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005aec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005af6:	e009      	b.n	8005b0c <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	667b      	str	r3, [r7, #100]	; 0x64
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	785b      	ldrb	r3, [r3, #1]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d155      	bne.n	8005bc6 <HAL_PCD_EP_DB_Transmit+0x704>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2e:	4413      	add	r3, r2
 8005b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	011a      	lsls	r2, r3, #4
 8005b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d112      	bne.n	8005b6e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	e044      	b.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b70:	2b3e      	cmp	r3, #62	; 0x3e
 8005b72:	d811      	bhi.n	8005b98 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b76:	085b      	lsrs	r3, r3, #1
 8005b78:	657b      	str	r3, [r7, #84]	; 0x54
 8005b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b86:	3301      	adds	r3, #1
 8005b88:	657b      	str	r3, [r7, #84]	; 0x54
 8005b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	029b      	lsls	r3, r3, #10
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e02f      	b.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	657b      	str	r3, [r7, #84]	; 0x54
 8005b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005baa:	3b01      	subs	r3, #1
 8005bac:	657b      	str	r3, [r7, #84]	; 0x54
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	e018      	b.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d114      	bne.n	8005bf8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bdc:	4413      	add	r3, r2
 8005bde:	667b      	str	r3, [r7, #100]	; 0x64
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	011a      	lsls	r2, r3, #4
 8005be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be8:	4413      	add	r3, r2
 8005bea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bee:	663b      	str	r3, [r7, #96]	; 0x60
 8005bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6959      	ldr	r1, [r3, #20]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	895a      	ldrh	r2, [r3, #10]
 8005c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	f005 f848 	bl	800ac9c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c26:	823b      	strh	r3, [r7, #16]
 8005c28:	8a3b      	ldrh	r3, [r7, #16]
 8005c2a:	f083 0310 	eor.w	r3, r3, #16
 8005c2e:	823b      	strh	r3, [r7, #16]
 8005c30:	8a3b      	ldrh	r3, [r7, #16]
 8005c32:	f083 0320 	eor.w	r3, r3, #32
 8005c36:	823b      	strh	r3, [r7, #16]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	8a3b      	ldrh	r3, [r7, #16]
 8005c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3788      	adds	r7, #136	; 0x88
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b087      	sub	sp, #28
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	60f8      	str	r0, [r7, #12]
 8005c6e:	607b      	str	r3, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	817b      	strh	r3, [r7, #10]
 8005c74:	4613      	mov	r3, r2
 8005c76:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c78:	897b      	ldrh	r3, [r7, #10]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c84:	897b      	ldrh	r3, [r7, #10]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e009      	b.n	8005cb0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c9c:	897a      	ldrh	r2, [r7, #10]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cb0:	893b      	ldrh	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d107      	bne.n	8005cc6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	80da      	strh	r2, [r3, #6]
 8005cc4:	e00b      	b.n	8005cde <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	0c1b      	lsrs	r3, r3, #16
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
	...

08005cec <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005cf0:	4b03      	ldr	r3, [pc, #12]	; (8005d00 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	420e0020 	.word	0x420e0020

08005d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e272      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 8087 	beq.w	8005e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d24:	4b92      	ldr	r3, [pc, #584]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f003 030c 	and.w	r3, r3, #12
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d00c      	beq.n	8005d4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d30:	4b8f      	ldr	r3, [pc, #572]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 030c 	and.w	r3, r3, #12
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d112      	bne.n	8005d62 <HAL_RCC_OscConfig+0x5e>
 8005d3c:	4b8c      	ldr	r3, [pc, #560]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d48:	d10b      	bne.n	8005d62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4a:	4b89      	ldr	r3, [pc, #548]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d06c      	beq.n	8005e30 <HAL_RCC_OscConfig+0x12c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d168      	bne.n	8005e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e24c      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6a:	d106      	bne.n	8005d7a <HAL_RCC_OscConfig+0x76>
 8005d6c:	4b80      	ldr	r3, [pc, #512]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a7f      	ldr	r2, [pc, #508]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d76:	6013      	str	r3, [r2, #0]
 8005d78:	e02e      	b.n	8005dd8 <HAL_RCC_OscConfig+0xd4>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10c      	bne.n	8005d9c <HAL_RCC_OscConfig+0x98>
 8005d82:	4b7b      	ldr	r3, [pc, #492]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a7a      	ldr	r2, [pc, #488]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	4b78      	ldr	r3, [pc, #480]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a77      	ldr	r2, [pc, #476]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e01d      	b.n	8005dd8 <HAL_RCC_OscConfig+0xd4>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005da4:	d10c      	bne.n	8005dc0 <HAL_RCC_OscConfig+0xbc>
 8005da6:	4b72      	ldr	r3, [pc, #456]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a71      	ldr	r2, [pc, #452]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	4b6f      	ldr	r3, [pc, #444]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a6e      	ldr	r2, [pc, #440]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e00b      	b.n	8005dd8 <HAL_RCC_OscConfig+0xd4>
 8005dc0:	4b6b      	ldr	r3, [pc, #428]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6a      	ldr	r2, [pc, #424]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	4b68      	ldr	r3, [pc, #416]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a67      	ldr	r2, [pc, #412]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d013      	beq.n	8005e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fd f80e 	bl	8002e00 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de8:	f7fd f80a 	bl	8002e00 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	; 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e200      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfa:	4b5d      	ldr	r3, [pc, #372]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f0      	beq.n	8005de8 <HAL_RCC_OscConfig+0xe4>
 8005e06:	e014      	b.n	8005e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e08:	f7fc fffa 	bl	8002e00 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e10:	f7fc fff6 	bl	8002e00 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e1ec      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e22:	4b53      	ldr	r3, [pc, #332]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x10c>
 8005e2e:	e000      	b.n	8005e32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d063      	beq.n	8005f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e3e:	4b4c      	ldr	r3, [pc, #304]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f003 030c 	and.w	r3, r3, #12
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00b      	beq.n	8005e62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e4a:	4b49      	ldr	r3, [pc, #292]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d11c      	bne.n	8005e90 <HAL_RCC_OscConfig+0x18c>
 8005e56:	4b46      	ldr	r3, [pc, #280]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d116      	bne.n	8005e90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e62:	4b43      	ldr	r3, [pc, #268]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_RCC_OscConfig+0x176>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d001      	beq.n	8005e7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e1c0      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7a:	4b3d      	ldr	r3, [pc, #244]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	4939      	ldr	r1, [pc, #228]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e8e:	e03a      	b.n	8005f06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d020      	beq.n	8005eda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e98:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <HAL_RCC_OscConfig+0x270>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e9e:	f7fc ffaf 	bl	8002e00 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea6:	f7fc ffab 	bl	8002e00 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e1a1      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb8:	4b2d      	ldr	r3, [pc, #180]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec4:	4b2a      	ldr	r3, [pc, #168]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4927      	ldr	r1, [pc, #156]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	600b      	str	r3, [r1, #0]
 8005ed8:	e015      	b.n	8005f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eda:	4b26      	ldr	r3, [pc, #152]	; (8005f74 <HAL_RCC_OscConfig+0x270>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fc ff8e 	bl	8002e00 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee8:	f7fc ff8a 	bl	8002e00 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e180      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005efa:	4b1d      	ldr	r3, [pc, #116]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d03a      	beq.n	8005f88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d019      	beq.n	8005f4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <HAL_RCC_OscConfig+0x274>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f20:	f7fc ff6e 	bl	8002e00 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f28:	f7fc ff6a 	bl	8002e00 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e160      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f3a:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <HAL_RCC_OscConfig+0x26c>)
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0f0      	beq.n	8005f28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f46:	2001      	movs	r0, #1
 8005f48:	f000 fad8 	bl	80064fc <RCC_Delay>
 8005f4c:	e01c      	b.n	8005f88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_RCC_OscConfig+0x274>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f54:	f7fc ff54 	bl	8002e00 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f5a:	e00f      	b.n	8005f7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5c:	f7fc ff50 	bl	8002e00 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d908      	bls.n	8005f7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e146      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
 8005f6e:	bf00      	nop
 8005f70:	40021000 	.word	0x40021000
 8005f74:	42420000 	.word	0x42420000
 8005f78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f7c:	4b92      	ldr	r3, [pc, #584]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e9      	bne.n	8005f5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 80a6 	beq.w	80060e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f96:	2300      	movs	r3, #0
 8005f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f9a:	4b8b      	ldr	r3, [pc, #556]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10d      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fa6:	4b88      	ldr	r3, [pc, #544]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	4a87      	ldr	r2, [pc, #540]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8005fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	61d3      	str	r3, [r2, #28]
 8005fb2:	4b85      	ldr	r3, [pc, #532]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fba:	60bb      	str	r3, [r7, #8]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc2:	4b82      	ldr	r3, [pc, #520]	; (80061cc <HAL_RCC_OscConfig+0x4c8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d118      	bne.n	8006000 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fce:	4b7f      	ldr	r3, [pc, #508]	; (80061cc <HAL_RCC_OscConfig+0x4c8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a7e      	ldr	r2, [pc, #504]	; (80061cc <HAL_RCC_OscConfig+0x4c8>)
 8005fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fda:	f7fc ff11 	bl	8002e00 <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe2:	f7fc ff0d 	bl	8002e00 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b64      	cmp	r3, #100	; 0x64
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e103      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff4:	4b75      	ldr	r3, [pc, #468]	; (80061cc <HAL_RCC_OscConfig+0x4c8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f0      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d106      	bne.n	8006016 <HAL_RCC_OscConfig+0x312>
 8006008:	4b6f      	ldr	r3, [pc, #444]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	4a6e      	ldr	r2, [pc, #440]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	6213      	str	r3, [r2, #32]
 8006014:	e02d      	b.n	8006072 <HAL_RCC_OscConfig+0x36e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10c      	bne.n	8006038 <HAL_RCC_OscConfig+0x334>
 800601e:	4b6a      	ldr	r3, [pc, #424]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	4a69      	ldr	r2, [pc, #420]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	6213      	str	r3, [r2, #32]
 800602a:	4b67      	ldr	r3, [pc, #412]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	4a66      	ldr	r2, [pc, #408]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006030:	f023 0304 	bic.w	r3, r3, #4
 8006034:	6213      	str	r3, [r2, #32]
 8006036:	e01c      	b.n	8006072 <HAL_RCC_OscConfig+0x36e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	2b05      	cmp	r3, #5
 800603e:	d10c      	bne.n	800605a <HAL_RCC_OscConfig+0x356>
 8006040:	4b61      	ldr	r3, [pc, #388]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	4a60      	ldr	r2, [pc, #384]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006046:	f043 0304 	orr.w	r3, r3, #4
 800604a:	6213      	str	r3, [r2, #32]
 800604c:	4b5e      	ldr	r3, [pc, #376]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	4a5d      	ldr	r2, [pc, #372]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006052:	f043 0301 	orr.w	r3, r3, #1
 8006056:	6213      	str	r3, [r2, #32]
 8006058:	e00b      	b.n	8006072 <HAL_RCC_OscConfig+0x36e>
 800605a:	4b5b      	ldr	r3, [pc, #364]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4a5a      	ldr	r2, [pc, #360]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	6213      	str	r3, [r2, #32]
 8006066:	4b58      	ldr	r3, [pc, #352]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	4a57      	ldr	r2, [pc, #348]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800606c:	f023 0304 	bic.w	r3, r3, #4
 8006070:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d015      	beq.n	80060a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800607a:	f7fc fec1 	bl	8002e00 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006080:	e00a      	b.n	8006098 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006082:	f7fc febd 	bl	8002e00 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006090:	4293      	cmp	r3, r2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e0b1      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006098:	4b4b      	ldr	r3, [pc, #300]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ee      	beq.n	8006082 <HAL_RCC_OscConfig+0x37e>
 80060a4:	e014      	b.n	80060d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a6:	f7fc feab 	bl	8002e00 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ac:	e00a      	b.n	80060c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ae:	f7fc fea7 	bl	8002e00 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060bc:	4293      	cmp	r3, r2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e09b      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c4:	4b40      	ldr	r3, [pc, #256]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1ee      	bne.n	80060ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d105      	bne.n	80060e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d6:	4b3c      	ldr	r3, [pc, #240]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	4a3b      	ldr	r2, [pc, #236]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 80060dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 8087 	beq.w	80061fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ec:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f003 030c 	and.w	r3, r3, #12
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d061      	beq.n	80061bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d146      	bne.n	800618e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006100:	4b33      	ldr	r3, [pc, #204]	; (80061d0 <HAL_RCC_OscConfig+0x4cc>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006106:	f7fc fe7b 	bl	8002e00 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800610e:	f7fc fe77 	bl	8002e00 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e06d      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006120:	4b29      	ldr	r3, [pc, #164]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f0      	bne.n	800610e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006134:	d108      	bne.n	8006148 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006136:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	4921      	ldr	r1, [pc, #132]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006144:	4313      	orrs	r3, r2
 8006146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006148:	4b1f      	ldr	r3, [pc, #124]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a19      	ldr	r1, [r3, #32]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	430b      	orrs	r3, r1
 800615a:	491b      	ldr	r1, [pc, #108]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 800615c:	4313      	orrs	r3, r2
 800615e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <HAL_RCC_OscConfig+0x4cc>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006166:	f7fc fe4b 	bl	8002e00 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800616e:	f7fc fe47 	bl	8002e00 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e03d      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006180:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0f0      	beq.n	800616e <HAL_RCC_OscConfig+0x46a>
 800618c:	e035      	b.n	80061fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <HAL_RCC_OscConfig+0x4cc>)
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fc fe34 	bl	8002e00 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619c:	f7fc fe30 	bl	8002e00 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e026      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ae:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <HAL_RCC_OscConfig+0x4c4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f0      	bne.n	800619c <HAL_RCC_OscConfig+0x498>
 80061ba:	e01e      	b.n	80061fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d107      	bne.n	80061d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e019      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
 80061c8:	40021000 	.word	0x40021000
 80061cc:	40007000 	.word	0x40007000
 80061d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <HAL_RCC_OscConfig+0x500>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d106      	bne.n	80061f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d001      	beq.n	80061fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e000      	b.n	80061fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40021000 	.word	0x40021000

08006208 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0d0      	b.n	80063be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800621c:	4b6a      	ldr	r3, [pc, #424]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d910      	bls.n	800624c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	4b67      	ldr	r3, [pc, #412]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 0207 	bic.w	r2, r3, #7
 8006232:	4965      	ldr	r1, [pc, #404]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	4313      	orrs	r3, r2
 8006238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0b8      	b.n	80063be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d020      	beq.n	800629a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006264:	4b59      	ldr	r3, [pc, #356]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a58      	ldr	r2, [pc, #352]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800626a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800626e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800627c:	4b53      	ldr	r3, [pc, #332]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a52      	ldr	r2, [pc, #328]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006282:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006286:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006288:	4b50      	ldr	r3, [pc, #320]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	494d      	ldr	r1, [pc, #308]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	4313      	orrs	r3, r2
 8006298:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d040      	beq.n	8006328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ae:	4b47      	ldr	r3, [pc, #284]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d115      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07f      	b.n	80063be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d107      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062c6:	4b41      	ldr	r3, [pc, #260]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e073      	b.n	80063be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062d6:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e06b      	b.n	80063be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062e6:	4b39      	ldr	r3, [pc, #228]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f023 0203 	bic.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	4936      	ldr	r1, [pc, #216]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062f8:	f7fc fd82 	bl	8002e00 <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006300:	f7fc fd7e 	bl	8002e00 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	; 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e053      	b.n	80063be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 020c 	and.w	r2, r3, #12
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	429a      	cmp	r2, r3
 8006326:	d1eb      	bne.n	8006300 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d210      	bcs.n	8006358 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f023 0207 	bic.w	r2, r3, #7
 800633e:	4922      	ldr	r1, [pc, #136]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	4313      	orrs	r3, r2
 8006344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_RCC_ClockConfig+0x1c0>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d001      	beq.n	8006358 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e032      	b.n	80063be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	4916      	ldr	r1, [pc, #88]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006372:	4313      	orrs	r3, r2
 8006374:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006382:	4b12      	ldr	r3, [pc, #72]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	490e      	ldr	r1, [pc, #56]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006392:	4313      	orrs	r3, r2
 8006394:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006396:	f000 f821 	bl	80063dc <HAL_RCC_GetSysClockFreq>
 800639a:	4602      	mov	r2, r0
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	490a      	ldr	r1, [pc, #40]	; (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80063a8:	5ccb      	ldrb	r3, [r1, r3]
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <HAL_RCC_ClockConfig+0x1cc>)
 80063b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <HAL_RCC_ClockConfig+0x1d0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fc fce0 	bl	8002d7c <HAL_InitTick>

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40022000 	.word	0x40022000
 80063cc:	40021000 	.word	0x40021000
 80063d0:	0800d738 	.word	0x0800d738
 80063d4:	20000800 	.word	0x20000800
 80063d8:	20000804 	.word	0x20000804

080063dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063dc:	b490      	push	{r4, r7}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063e2:	4b29      	ldr	r3, [pc, #164]	; (8006488 <HAL_RCC_GetSysClockFreq+0xac>)
 80063e4:	1d3c      	adds	r4, r7, #4
 80063e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80063ec:	f240 2301 	movw	r3, #513	; 0x201
 80063f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	2300      	movs	r3, #0
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	2300      	movs	r3, #0
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006406:	4b21      	ldr	r3, [pc, #132]	; (800648c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f003 030c 	and.w	r3, r3, #12
 8006412:	2b04      	cmp	r3, #4
 8006414:	d002      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0x40>
 8006416:	2b08      	cmp	r3, #8
 8006418:	d003      	beq.n	8006422 <HAL_RCC_GetSysClockFreq+0x46>
 800641a:	e02b      	b.n	8006474 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800641c:	4b1c      	ldr	r3, [pc, #112]	; (8006490 <HAL_RCC_GetSysClockFreq+0xb4>)
 800641e:	623b      	str	r3, [r7, #32]
      break;
 8006420:	e02b      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	0c9b      	lsrs	r3, r3, #18
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	3328      	adds	r3, #40	; 0x28
 800642c:	443b      	add	r3, r7
 800642e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006432:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d012      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800643e:	4b13      	ldr	r3, [pc, #76]	; (800648c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	0c5b      	lsrs	r3, r3, #17
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	3328      	adds	r3, #40	; 0x28
 800644a:	443b      	add	r3, r7
 800644c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006450:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4a0e      	ldr	r2, [pc, #56]	; (8006490 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006456:	fb03 f202 	mul.w	r2, r3, r2
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	627b      	str	r3, [r7, #36]	; 0x24
 8006462:	e004      	b.n	800646e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4a0b      	ldr	r2, [pc, #44]	; (8006494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	623b      	str	r3, [r7, #32]
      break;
 8006472:	e002      	b.n	800647a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006474:	4b06      	ldr	r3, [pc, #24]	; (8006490 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006476:	623b      	str	r3, [r7, #32]
      break;
 8006478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800647a:	6a3b      	ldr	r3, [r7, #32]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3728      	adds	r7, #40	; 0x28
 8006480:	46bd      	mov	sp, r7
 8006482:	bc90      	pop	{r4, r7}
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	0800d6d0 	.word	0x0800d6d0
 800648c:	40021000 	.word	0x40021000
 8006490:	007a1200 	.word	0x007a1200
 8006494:	003d0900 	.word	0x003d0900

08006498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800649c:	4b02      	ldr	r3, [pc, #8]	; (80064a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800649e:	681b      	ldr	r3, [r3, #0]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr
 80064a8:	20000800 	.word	0x20000800

080064ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064b0:	f7ff fff2 	bl	8006498 <HAL_RCC_GetHCLKFreq>
 80064b4:	4602      	mov	r2, r0
 80064b6:	4b05      	ldr	r3, [pc, #20]	; (80064cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	0a1b      	lsrs	r3, r3, #8
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4903      	ldr	r1, [pc, #12]	; (80064d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064c2:	5ccb      	ldrb	r3, [r1, r3]
 80064c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40021000 	.word	0x40021000
 80064d0:	0800d748 	.word	0x0800d748

080064d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064d8:	f7ff ffde 	bl	8006498 <HAL_RCC_GetHCLKFreq>
 80064dc:	4602      	mov	r2, r0
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	0adb      	lsrs	r3, r3, #11
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	4903      	ldr	r1, [pc, #12]	; (80064f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064ea:	5ccb      	ldrb	r3, [r1, r3]
 80064ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40021000 	.word	0x40021000
 80064f8:	0800d748 	.word	0x0800d748

080064fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006504:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <RCC_Delay+0x34>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a0a      	ldr	r2, [pc, #40]	; (8006534 <RCC_Delay+0x38>)
 800650a:	fba2 2303 	umull	r2, r3, r2, r3
 800650e:	0a5b      	lsrs	r3, r3, #9
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	fb02 f303 	mul.w	r3, r2, r3
 8006516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006518:	bf00      	nop
  }
  while (Delay --);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1e5a      	subs	r2, r3, #1
 800651e:	60fa      	str	r2, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f9      	bne.n	8006518 <RCC_Delay+0x1c>
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr
 8006530:	20000800 	.word	0x20000800
 8006534:	10624dd3 	.word	0x10624dd3

08006538 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d07d      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006554:	2300      	movs	r3, #0
 8006556:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006558:	4b4f      	ldr	r3, [pc, #316]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10d      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006564:	4b4c      	ldr	r3, [pc, #304]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	4a4b      	ldr	r2, [pc, #300]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800656a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800656e:	61d3      	str	r3, [r2, #28]
 8006570:	4b49      	ldr	r3, [pc, #292]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006580:	4b46      	ldr	r3, [pc, #280]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d118      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800658c:	4b43      	ldr	r3, [pc, #268]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a42      	ldr	r2, [pc, #264]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006598:	f7fc fc32 	bl	8002e00 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659e:	e008      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065a0:	f7fc fc2e 	bl	8002e00 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b64      	cmp	r3, #100	; 0x64
 80065ac:	d901      	bls.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e06d      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b2:	4b3a      	ldr	r3, [pc, #232]	; (800669c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065be:	4b36      	ldr	r3, [pc, #216]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c0:	6a1b      	ldr	r3, [r3, #32]
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d02e      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d027      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065dc:	4b2e      	ldr	r3, [pc, #184]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065e6:	4b2e      	ldr	r3, [pc, #184]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065ec:	4b2c      	ldr	r3, [pc, #176]	; (80066a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80065f2:	4a29      	ldr	r2, [pc, #164]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d014      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006602:	f7fc fbfd 	bl	8002e00 <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006608:	e00a      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800660a:	f7fc fbf9 	bl	8002e00 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	f241 3288 	movw	r2, #5000	; 0x1388
 8006618:	4293      	cmp	r3, r2
 800661a:	d901      	bls.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e036      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006620:	4b1d      	ldr	r3, [pc, #116]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0ee      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800662c:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	4917      	ldr	r1, [pc, #92]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800663a:	4313      	orrs	r3, r2
 800663c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800663e:	7dfb      	ldrb	r3, [r7, #23]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d105      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006644:	4b14      	ldr	r3, [pc, #80]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	4a13      	ldr	r2, [pc, #76]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800664a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800664e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800665c:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	490b      	ldr	r1, [pc, #44]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800666a:	4313      	orrs	r3, r2
 800666c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0310 	and.w	r3, r3, #16
 8006676:	2b00      	cmp	r3, #0
 8006678:	d008      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	4904      	ldr	r1, [pc, #16]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006688:	4313      	orrs	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40021000 	.word	0x40021000
 800669c:	40007000 	.word	0x40007000
 80066a0:	42420440 	.word	0x42420440

080066a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b08d      	sub	sp, #52	; 0x34
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80066ac:	4b58      	ldr	r3, [pc, #352]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80066ae:	f107 040c 	add.w	r4, r7, #12
 80066b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80066b8:	f240 2301 	movw	r3, #513	; 0x201
 80066bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
 80066c2:	2300      	movs	r3, #0
 80066c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c6:	2300      	movs	r3, #0
 80066c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	2300      	movs	r3, #0
 80066d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b10      	cmp	r3, #16
 80066d6:	d00a      	beq.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b10      	cmp	r3, #16
 80066dc:	f200 808e 	bhi.w	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d049      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d079      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80066ec:	e086      	b.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80066ee:	4b49      	ldr	r3, [pc, #292]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80066f4:	4b47      	ldr	r3, [pc, #284]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d07f      	beq.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	0c9b      	lsrs	r3, r3, #18
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	3330      	adds	r3, #48	; 0x30
 800670a:	443b      	add	r3, r7
 800670c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006710:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d017      	beq.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800671c:	4b3d      	ldr	r3, [pc, #244]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	0c5b      	lsrs	r3, r3, #17
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	3330      	adds	r3, #48	; 0x30
 8006728:	443b      	add	r3, r7
 800672a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800672e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00d      	beq.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800673a:	4a37      	ldr	r2, [pc, #220]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	fb02 f303 	mul.w	r3, r2, r3
 8006748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800674a:	e004      	b.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	4a33      	ldr	r2, [pc, #204]	; (800681c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006750:	fb02 f303 	mul.w	r3, r2, r3
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006756:	4b2f      	ldr	r3, [pc, #188]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800675e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006762:	d102      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006768:	e04a      	b.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006778:	e042      	b.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800677a:	4b26      	ldr	r3, [pc, #152]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678a:	d108      	bne.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8006796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800679a:	62bb      	str	r3, [r7, #40]	; 0x28
 800679c:	e01f      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a8:	d109      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80067aa:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80067b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80067bc:	e00f      	b.n	80067de <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c8:	d11c      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d016      	beq.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80067d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80067dc:	e012      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80067de:	e011      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80067e0:	f7ff fe78 	bl	80064d4 <HAL_RCC_GetPCLK2Freq>
 80067e4:	4602      	mov	r2, r0
 80067e6:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	0b9b      	lsrs	r3, r3, #14
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	3301      	adds	r3, #1
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80067fa:	e004      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80067fc:	bf00      	nop
 80067fe:	e002      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006800:	bf00      	nop
 8006802:	e000      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006804:	bf00      	nop
    }
  }
  return (frequency);
 8006806:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006808:	4618      	mov	r0, r3
 800680a:	3734      	adds	r7, #52	; 0x34
 800680c:	46bd      	mov	sp, r7
 800680e:	bd90      	pop	{r4, r7, pc}
 8006810:	0800d6e0 	.word	0x0800d6e0
 8006814:	40021000 	.word	0x40021000
 8006818:	007a1200 	.word	0x007a1200
 800681c:	003d0900 	.word	0x003d0900
 8006820:	aaaaaaab 	.word	0xaaaaaaab

08006824 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e084      	b.n	8006944 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	7c5b      	ldrb	r3, [r3, #17]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fa f9ae 	bl	8000bac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 faa0 	bl	8006d9c <HAL_RTC_WaitForSynchro>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d004      	beq.n	800686c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2204      	movs	r2, #4
 8006866:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e06b      	b.n	8006944 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb59 	bl	8006f24 <RTC_EnterInitMode>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2204      	movs	r2, #4
 800687c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e060      	b.n	8006944 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0207 	bic.w	r2, r2, #7
 8006890:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d005      	beq.n	80068a6 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800689a:	4b2c      	ldr	r3, [pc, #176]	; (800694c <HAL_RTC_Init+0x128>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	4a2b      	ldr	r2, [pc, #172]	; (800694c <HAL_RTC_Init+0x128>)
 80068a0:	f023 0301 	bic.w	r3, r3, #1
 80068a4:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80068a6:	4b29      	ldr	r3, [pc, #164]	; (800694c <HAL_RTC_Init+0x128>)
 80068a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068aa:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	4926      	ldr	r1, [pc, #152]	; (800694c <HAL_RTC_Init+0x128>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c0:	d003      	beq.n	80068ca <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	e00e      	b.n	80068e8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80068ca:	2001      	movs	r0, #1
 80068cc:	f7ff feea 	bl	80066a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80068d0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2204      	movs	r2, #4
 80068dc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e030      	b.n	8006944 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f023 010f 	bic.w	r1, r3, #15
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	0c1a      	lsrs	r2, r3, #16
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	0c1b      	lsrs	r3, r3, #16
 8006906:	041b      	lsls	r3, r3, #16
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	b291      	uxth	r1, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	430b      	orrs	r3, r1
 8006912:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb2d 	bl	8006f74 <RTC_ExitInitMode>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2204      	movs	r2, #4
 8006924:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e00c      	b.n	8006944 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006942:	2300      	movs	r3, #0
  }
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40006c00 	.word	0x40006c00

08006950 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_RTC_SetTime+0x20>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e080      	b.n	8006a76 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	7c1b      	ldrb	r3, [r3, #16]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_RTC_SetTime+0x30>
 800697c:	2302      	movs	r3, #2
 800697e:	e07a      	b.n	8006a76 <HAL_RTC_SetTime+0x126>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2202      	movs	r2, #2
 800698a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d113      	bne.n	80069ba <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800699c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	4619      	mov	r1, r3
 80069a6:	460b      	mov	r3, r1
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	1a5b      	subs	r3, r3, r1
 80069ac:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80069ae:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80069b4:	4413      	add	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e01e      	b.n	80069f8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 fb1d 	bl	8006ffe <RTC_Bcd2ToByte>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80069cc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fb12 	bl	8006ffe <RTC_Bcd2ToByte>
 80069da:	4603      	mov	r3, r0
 80069dc:	461a      	mov	r2, r3
 80069de:	4613      	mov	r3, r2
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	1a9b      	subs	r3, r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069e6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	789b      	ldrb	r3, [r3, #2]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fb06 	bl	8006ffe <RTC_Bcd2ToByte>
 80069f2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069f4:	4423      	add	r3, r4
 80069f6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80069f8:	6979      	ldr	r1, [r7, #20]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 fa2b 	bl	8006e56 <RTC_WriteTimeCounter>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d007      	beq.n	8006a16 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e02f      	b.n	8006a76 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0205 	bic.w	r2, r2, #5
 8006a24:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fa3c 	bl	8006ea4 <RTC_ReadAlarmCounter>
 8006a2c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a34:	d018      	beq.n	8006a68 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d214      	bcs.n	8006a68 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006a44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006a48:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006a4a:	6939      	ldr	r1, [r7, #16]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fa42 	bl	8006ed6 <RTC_WriteAlarmCounter>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d007      	beq.n	8006a68 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e006      	b.n	8006a76 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006a74:	2300      	movs	r3, #0
  }
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd90      	pop	{r4, r7, pc}
	...

08006a80 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <HAL_RTC_GetTime+0x28>
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0b5      	b.n	8006c18 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e0ac      	b.n	8006c18 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f999 	bl	8006df6 <RTC_ReadTimeCounter>
 8006ac4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	4a55      	ldr	r2, [pc, #340]	; (8006c20 <HAL_RTC_GetTime+0x1a0>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	0adb      	lsrs	r3, r3, #11
 8006ad0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	4b52      	ldr	r3, [pc, #328]	; (8006c20 <HAL_RTC_GetTime+0x1a0>)
 8006ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8006ada:	0adb      	lsrs	r3, r3, #11
 8006adc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	4a4f      	ldr	r2, [pc, #316]	; (8006c24 <HAL_RTC_GetTime+0x1a4>)
 8006ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	4a4a      	ldr	r2, [pc, #296]	; (8006c20 <HAL_RTC_GetTime+0x1a0>)
 8006af8:	fba2 1203 	umull	r1, r2, r2, r3
 8006afc:	0ad2      	lsrs	r2, r2, #11
 8006afe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006b02:	fb01 f202 	mul.w	r2, r1, r2
 8006b06:	1a9a      	subs	r2, r3, r2
 8006b08:	4b46      	ldr	r3, [pc, #280]	; (8006c24 <HAL_RTC_GetTime+0x1a4>)
 8006b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006b0e:	0959      	lsrs	r1, r3, #5
 8006b10:	460b      	mov	r3, r1
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	1a5b      	subs	r3, r3, r1
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	1ad1      	subs	r1, r2, r3
 8006b1a:	b2ca      	uxtb	r2, r1
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b17      	cmp	r3, #23
 8006b24:	d955      	bls.n	8006bd2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	4a3f      	ldr	r2, [pc, #252]	; (8006c28 <HAL_RTC_GetTime+0x1a8>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	091b      	lsrs	r3, r3, #4
 8006b30:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006b32:	6939      	ldr	r1, [r7, #16]
 8006b34:	4b3c      	ldr	r3, [pc, #240]	; (8006c28 <HAL_RTC_GetTime+0x1a8>)
 8006b36:	fba3 2301 	umull	r2, r3, r3, r1
 8006b3a:	091a      	lsrs	r2, r3, #4
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	005b      	lsls	r3, r3, #1
 8006b40:	4413      	add	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	1aca      	subs	r2, r1, r3
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 f9a9 	bl	8006ea4 <RTC_ReadAlarmCounter>
 8006b52:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b5a:	d008      	beq.n	8006b6e <HAL_RTC_GetTime+0xee>
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d904      	bls.n	8006b6e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	61fb      	str	r3, [r7, #28]
 8006b6c:	e002      	b.n	8006b74 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b72:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	4a2d      	ldr	r2, [pc, #180]	; (8006c2c <HAL_RTC_GetTime+0x1ac>)
 8006b78:	fb02 f303 	mul.w	r3, r2, r3
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006b82:	69b9      	ldr	r1, [r7, #24]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f966 	bl	8006e56 <RTC_WriteTimeCounter>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e041      	b.n	8006c18 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b9a:	d00c      	beq.n	8006bb6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006ba4:	69f9      	ldr	r1, [r7, #28]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f995 	bl	8006ed6 <RTC_WriteAlarmCounter>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e030      	b.n	8006c18 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006bb6:	69f9      	ldr	r1, [r7, #28]
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f98c 	bl	8006ed6 <RTC_WriteAlarmCounter>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e027      	b.n	8006c18 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006bc8:	6979      	ldr	r1, [r7, #20]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fa34 	bl	8007038 <RTC_DateUpdate>
 8006bd0:	e003      	b.n	8006bda <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01a      	beq.n	8006c16 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f000 f9ed 	bl	8006fc4 <RTC_ByteToBcd2>
 8006bea:	4603      	mov	r3, r0
 8006bec:	461a      	mov	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	785b      	ldrb	r3, [r3, #1]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 f9e4 	bl	8006fc4 <RTC_ByteToBcd2>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	789b      	ldrb	r3, [r3, #2]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 f9db 	bl	8006fc4 <RTC_ByteToBcd2>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	461a      	mov	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3720      	adds	r7, #32
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	91a2b3c5 	.word	0x91a2b3c5
 8006c24:	88888889 	.word	0x88888889
 8006c28:	aaaaaaab 	.word	0xaaaaaaab
 8006c2c:	00015180 	.word	0x00015180

08006c30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	2300      	movs	r3, #0
 8006c42:	61bb      	str	r3, [r7, #24]
 8006c44:	2300      	movs	r3, #0
 8006c46:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <HAL_RTC_SetDate+0x24>
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e097      	b.n	8006d88 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	7c1b      	ldrb	r3, [r3, #16]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_RTC_SetDate+0x34>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e091      	b.n	8006d88 <HAL_RTC_SetDate+0x158>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2201      	movs	r2, #1
 8006c68:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10c      	bne.n	8006c90 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	78da      	ldrb	r2, [r3, #3]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	785a      	ldrb	r2, [r3, #1]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	789a      	ldrb	r2, [r3, #2]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	739a      	strb	r2, [r3, #14]
 8006c8e:	e01a      	b.n	8006cc6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	78db      	ldrb	r3, [r3, #3]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f000 f9b2 	bl	8006ffe <RTC_Bcd2ToByte>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	785b      	ldrb	r3, [r3, #1]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f9a9 	bl	8006ffe <RTC_Bcd2ToByte>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	789b      	ldrb	r3, [r3, #2]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f9a0 	bl	8006ffe <RTC_Bcd2ToByte>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	7bdb      	ldrb	r3, [r3, #15]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	7b59      	ldrb	r1, [r3, #13]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	7b9b      	ldrb	r3, [r3, #14]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f000 fa8b 	bl	80071f0 <RTC_WeekDayNum>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	7b1a      	ldrb	r2, [r3, #12]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f883 	bl	8006df6 <RTC_ReadTimeCounter>
 8006cf0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <HAL_RTC_SetDate+0x160>)
 8006cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfa:	0adb      	lsrs	r3, r3, #11
 8006cfc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b18      	cmp	r3, #24
 8006d02:	d93a      	bls.n	8006d7a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	4a23      	ldr	r2, [pc, #140]	; (8006d94 <HAL_RTC_SetDate+0x164>)
 8006d08:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	4a22      	ldr	r2, [pc, #136]	; (8006d98 <HAL_RTC_SetDate+0x168>)
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	69fa      	ldr	r2, [r7, #28]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006d1a:	69f9      	ldr	r1, [r7, #28]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f89a 	bl	8006e56 <RTC_WriteTimeCounter>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e027      	b.n	8006d88 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f8b3 	bl	8006ea4 <RTC_ReadAlarmCounter>
 8006d3e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d46:	d018      	beq.n	8006d7a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d214      	bcs.n	8006d7a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006d56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006d5a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d5c:	69b9      	ldr	r1, [r7, #24]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 f8b9 	bl	8006ed6 <RTC_WriteAlarmCounter>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e006      	b.n	8006d88 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3720      	adds	r7, #32
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	91a2b3c5 	.word	0x91a2b3c5
 8006d94:	aaaaaaab 	.word	0xaaaaaaab
 8006d98:	00015180 	.word	0x00015180

08006d9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e01d      	b.n	8006dee <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0208 	bic.w	r2, r2, #8
 8006dc0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006dc2:	f7fc f81d 	bl	8002e00 <HAL_GetTick>
 8006dc6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006dc8:	e009      	b.n	8006dde <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006dca:	f7fc f819 	bl	8002e00 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dd8:	d901      	bls.n	8006dde <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e007      	b.n	8006dee <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	f003 0308 	and.w	r3, r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0ee      	beq.n	8006dca <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b087      	sub	sp, #28
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	827b      	strh	r3, [r7, #18]
 8006e02:	2300      	movs	r3, #0
 8006e04:	823b      	strh	r3, [r7, #16]
 8006e06:	2300      	movs	r3, #0
 8006e08:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006e26:	8a7a      	ldrh	r2, [r7, #18]
 8006e28:	8a3b      	ldrh	r3, [r7, #16]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d008      	beq.n	8006e40 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006e2e:	8a3b      	ldrh	r3, [r7, #16]
 8006e30:	041a      	lsls	r2, r3, #16
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	e004      	b.n	8006e4a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006e40:	8a7b      	ldrh	r3, [r7, #18]
 8006e42:	041a      	lsls	r2, r3, #16
 8006e44:	89fb      	ldrh	r3, [r7, #14]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006e4a:	697b      	ldr	r3, [r7, #20]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f85d 	bl	8006f24 <RTC_EnterInitMode>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e011      	b.n	8006e9a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	0c12      	lsrs	r2, r2, #16
 8006e7e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	b292      	uxth	r2, r2
 8006e88:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f872 	bl	8006f74 <RTC_ExitInitMode>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006eac:	2300      	movs	r3, #0
 8006eae:	81fb      	strh	r3, [r7, #14]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006ec4:	89fb      	ldrh	r3, [r7, #14]
 8006ec6:	041a      	lsls	r2, r3, #16
 8006ec8:	89bb      	ldrh	r3, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bc80      	pop	{r7}
 8006ed4:	4770      	bx	lr

08006ed6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f81d 	bl	8006f24 <RTC_EnterInitMode>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
 8006ef4:	e011      	b.n	8006f1a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	0c12      	lsrs	r2, r2, #16
 8006efe:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	b292      	uxth	r2, r2
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f832 	bl	8006f74 <RTC_ExitInitMode>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006f30:	f7fb ff66 	bl	8002e00 <HAL_GetTick>
 8006f34:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f36:	e009      	b.n	8006f4c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f38:	f7fb ff62 	bl	8002e00 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f46:	d901      	bls.n	8006f4c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e00f      	b.n	8006f6c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0ee      	beq.n	8006f38 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0210 	orr.w	r2, r2, #16
 8006f68:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f022 0210 	bic.w	r2, r2, #16
 8006f8e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006f90:	f7fb ff36 	bl	8002e00 <HAL_GetTick>
 8006f94:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f96:	e009      	b.n	8006fac <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f98:	f7fb ff32 	bl	8002e00 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fa6:	d901      	bls.n	8006fac <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e007      	b.n	8006fbc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f003 0320 	and.w	r3, r3, #32
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0ee      	beq.n	8006f98 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8006fd2:	e005      	b.n	8006fe0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	3b0a      	subs	r3, #10
 8006fde:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	2b09      	cmp	r3, #9
 8006fe4:	d8f6      	bhi.n	8006fd4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	b2db      	uxtb	r3, r3
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bc80      	pop	{r7}
 8006ffc:	4770      	bx	lr

08006ffe <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b085      	sub	sp, #20
 8007002:	af00      	add	r7, sp, #0
 8007004:	4603      	mov	r3, r0
 8007006:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	091b      	lsrs	r3, r3, #4
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	b2da      	uxtb	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	4413      	add	r3, r2
 800702c:	b2db      	uxtb	r3, r3
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr

08007038 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	2300      	movs	r3, #0
 800704c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	7bdb      	ldrb	r3, [r3, #15]
 8007056:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7b5b      	ldrb	r3, [r3, #13]
 800705c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7b9b      	ldrb	r3, [r3, #14]
 8007062:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007064:	2300      	movs	r3, #0
 8007066:	60bb      	str	r3, [r7, #8]
 8007068:	e06f      	b.n	800714a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d011      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b03      	cmp	r3, #3
 8007074:	d00e      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b05      	cmp	r3, #5
 800707a:	d00b      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	2b07      	cmp	r3, #7
 8007080:	d008      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d005      	beq.n	8007094 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b0a      	cmp	r3, #10
 800708c:	d002      	beq.n	8007094 <RTC_DateUpdate+0x5c>
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b0c      	cmp	r3, #12
 8007092:	d117      	bne.n	80070c4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b1e      	cmp	r3, #30
 8007098:	d803      	bhi.n	80070a2 <RTC_DateUpdate+0x6a>
      {
        day++;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80070a0:	e050      	b.n	8007144 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b0c      	cmp	r3, #12
 80070a6:	d005      	beq.n	80070b4 <RTC_DateUpdate+0x7c>
        {
          month++;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	3301      	adds	r3, #1
 80070ac:	613b      	str	r3, [r7, #16]
          day = 1U;
 80070ae:	2301      	movs	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80070b2:	e047      	b.n	8007144 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80070b4:	2301      	movs	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80070b8:	2301      	movs	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
          year++;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3301      	adds	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80070c2:	e03f      	b.n	8007144 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d008      	beq.n	80070dc <RTC_DateUpdate+0xa4>
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b06      	cmp	r3, #6
 80070ce:	d005      	beq.n	80070dc <RTC_DateUpdate+0xa4>
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	d002      	beq.n	80070dc <RTC_DateUpdate+0xa4>
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b0b      	cmp	r3, #11
 80070da:	d10c      	bne.n	80070f6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2b1d      	cmp	r3, #29
 80070e0:	d803      	bhi.n	80070ea <RTC_DateUpdate+0xb2>
      {
        day++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80070e8:	e02c      	b.n	8007144 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	3301      	adds	r3, #1
 80070ee:	613b      	str	r3, [r7, #16]
        day = 1U;
 80070f0:	2301      	movs	r3, #1
 80070f2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80070f4:	e026      	b.n	8007144 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d123      	bne.n	8007144 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b1b      	cmp	r3, #27
 8007100:	d803      	bhi.n	800710a <RTC_DateUpdate+0xd2>
      {
        day++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	e01c      	b.n	8007144 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b1c      	cmp	r3, #28
 800710e:	d111      	bne.n	8007134 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	b29b      	uxth	r3, r3
 8007114:	4618      	mov	r0, r3
 8007116:	f000 f839 	bl	800718c <RTC_IsLeapYear>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <RTC_DateUpdate+0xf0>
        {
          day++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e00d      	b.n	8007144 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	3301      	adds	r3, #1
 800712c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800712e:	2301      	movs	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]
 8007132:	e007      	b.n	8007144 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b1d      	cmp	r3, #29
 8007138:	d104      	bne.n	8007144 <RTC_DateUpdate+0x10c>
      {
        month++;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3301      	adds	r3, #1
 800713e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007140:	2301      	movs	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3301      	adds	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d38b      	bcc.n	800706a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	b2da      	uxtb	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	4619      	mov	r1, r3
 8007174:	6978      	ldr	r0, [r7, #20]
 8007176:	f000 f83b 	bl	80071f0 <RTC_WeekDayNum>
 800717a:	4603      	mov	r3, r0
 800717c:	461a      	mov	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	731a      	strb	r2, [r3, #12]
}
 8007182:	bf00      	nop
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	e01d      	b.n	80071e2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	4a10      	ldr	r2, [pc, #64]	; (80071ec <RTC_IsLeapYear+0x60>)
 80071aa:	fba2 1203 	umull	r1, r2, r2, r3
 80071ae:	0952      	lsrs	r2, r2, #5
 80071b0:	2164      	movs	r1, #100	; 0x64
 80071b2:	fb01 f202 	mul.w	r2, r1, r2
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80071be:	2301      	movs	r3, #1
 80071c0:	e00f      	b.n	80071e2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80071c2:	88fb      	ldrh	r3, [r7, #6]
 80071c4:	4a09      	ldr	r2, [pc, #36]	; (80071ec <RTC_IsLeapYear+0x60>)
 80071c6:	fba2 1203 	umull	r1, r2, r2, r3
 80071ca:	09d2      	lsrs	r2, r2, #7
 80071cc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80071d0:	fb01 f202 	mul.w	r2, r1, r2
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80071e0:	2300      	movs	r3, #0
  }
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr
 80071ec:	51eb851f 	.word	0x51eb851f

080071f0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
 80071fc:	4613      	mov	r3, r2
 80071fe:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60bb      	str	r3, [r7, #8]
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800720e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d82d      	bhi.n	8007272 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	4613      	mov	r3, r2
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	4413      	add	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	4a2c      	ldr	r2, [pc, #176]	; (80072d4 <RTC_WeekDayNum+0xe4>)
 8007224:	fba2 2303 	umull	r2, r3, r2, r3
 8007228:	085a      	lsrs	r2, r3, #1
 800722a:	78bb      	ldrb	r3, [r7, #2]
 800722c:	441a      	add	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	441a      	add	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	3b01      	subs	r3, #1
 8007236:	089b      	lsrs	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	3b01      	subs	r3, #1
 800723e:	4926      	ldr	r1, [pc, #152]	; (80072d8 <RTC_WeekDayNum+0xe8>)
 8007240:	fba1 1303 	umull	r1, r3, r1, r3
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	1ad2      	subs	r2, r2, r3
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	3b01      	subs	r3, #1
 800724c:	4922      	ldr	r1, [pc, #136]	; (80072d8 <RTC_WeekDayNum+0xe8>)
 800724e:	fba1 1303 	umull	r1, r3, r1, r3
 8007252:	09db      	lsrs	r3, r3, #7
 8007254:	4413      	add	r3, r2
 8007256:	1d1a      	adds	r2, r3, #4
 8007258:	4b20      	ldr	r3, [pc, #128]	; (80072dc <RTC_WeekDayNum+0xec>)
 800725a:	fba3 1302 	umull	r1, r3, r3, r2
 800725e:	1ad1      	subs	r1, r2, r3
 8007260:	0849      	lsrs	r1, r1, #1
 8007262:	440b      	add	r3, r1
 8007264:	0899      	lsrs	r1, r3, #2
 8007266:	460b      	mov	r3, r1
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	1a5b      	subs	r3, r3, r1
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	e029      	b.n	80072c6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007272:	78fa      	ldrb	r2, [r7, #3]
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	00db      	lsls	r3, r3, #3
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <RTC_WeekDayNum+0xe4>)
 8007280:	fba2 2303 	umull	r2, r3, r2, r3
 8007284:	085a      	lsrs	r2, r3, #1
 8007286:	78bb      	ldrb	r3, [r7, #2]
 8007288:	441a      	add	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	441a      	add	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	089b      	lsrs	r3, r3, #2
 8007292:	441a      	add	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4910      	ldr	r1, [pc, #64]	; (80072d8 <RTC_WeekDayNum+0xe8>)
 8007298:	fba1 1303 	umull	r1, r3, r1, r3
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	490d      	ldr	r1, [pc, #52]	; (80072d8 <RTC_WeekDayNum+0xe8>)
 80072a4:	fba1 1303 	umull	r1, r3, r1, r3
 80072a8:	09db      	lsrs	r3, r3, #7
 80072aa:	4413      	add	r3, r2
 80072ac:	1c9a      	adds	r2, r3, #2
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <RTC_WeekDayNum+0xec>)
 80072b0:	fba3 1302 	umull	r1, r3, r3, r2
 80072b4:	1ad1      	subs	r1, r2, r3
 80072b6:	0849      	lsrs	r1, r1, #1
 80072b8:	440b      	add	r3, r1
 80072ba:	0899      	lsrs	r1, r3, #2
 80072bc:	460b      	mov	r3, r1
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	1a5b      	subs	r3, r3, r1
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	b2db      	uxtb	r3, r3
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr
 80072d4:	38e38e39 	.word	0x38e38e39
 80072d8:	51eb851f 	.word	0x51eb851f
 80072dc:	24924925 	.word	0x24924925

080072e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e076      	b.n	80073e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d108      	bne.n	800730c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007302:	d009      	beq.n	8007318 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	61da      	str	r2, [r3, #28]
 800730a:	e005      	b.n	8007318 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7f9 fc5e 	bl	8000bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800734e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739c:	ea42 0103 	orr.w	r1, r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	0c1a      	lsrs	r2, r3, #16
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f002 0204 	and.w	r2, r2, #4
 80073be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_SPI_Transmit+0x22>
 8007406:	2302      	movs	r3, #2
 8007408:	e126      	b.n	8007658 <HAL_SPI_Transmit+0x270>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007412:	f7fb fcf5 	bl	8002e00 <HAL_GetTick>
 8007416:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007418:	88fb      	ldrh	r3, [r7, #6]
 800741a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b01      	cmp	r3, #1
 8007426:	d002      	beq.n	800742e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007428:	2302      	movs	r3, #2
 800742a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800742c:	e10b      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_SPI_Transmit+0x52>
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800743e:	e102      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2203      	movs	r2, #3
 8007444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	88fa      	ldrh	r2, [r7, #6]
 8007458:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	88fa      	ldrh	r2, [r7, #6]
 800745e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007486:	d10f      	bne.n	80074a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007496:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b2:	2b40      	cmp	r3, #64	; 0x40
 80074b4:	d007      	beq.n	80074c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ce:	d14b      	bne.n	8007568 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_SPI_Transmit+0xf6>
 80074d8:	8afb      	ldrh	r3, [r7, #22]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d13e      	bne.n	800755c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	881a      	ldrh	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007502:	e02b      	b.n	800755c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b02      	cmp	r3, #2
 8007510:	d112      	bne.n	8007538 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	881a      	ldrh	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	1c9a      	adds	r2, r3, #2
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29a      	uxth	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	86da      	strh	r2, [r3, #54]	; 0x36
 8007536:	e011      	b.n	800755c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007538:	f7fb fc62 	bl	8002e00 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d803      	bhi.n	8007550 <HAL_SPI_Transmit+0x168>
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800754e:	d102      	bne.n	8007556 <HAL_SPI_Transmit+0x16e>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d102      	bne.n	800755c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	77fb      	strb	r3, [r7, #31]
          goto error;
 800755a:	e074      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1ce      	bne.n	8007504 <HAL_SPI_Transmit+0x11c>
 8007566:	e04c      	b.n	8007602 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <HAL_SPI_Transmit+0x18e>
 8007570:	8afb      	ldrh	r3, [r7, #22]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d140      	bne.n	80075f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	330c      	adds	r3, #12
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800759c:	e02c      	b.n	80075f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d113      	bne.n	80075d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80075d2:	e011      	b.n	80075f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d4:	f7fb fc14 	bl	8002e00 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d803      	bhi.n	80075ec <HAL_SPI_Transmit+0x204>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ea:	d102      	bne.n	80075f2 <HAL_SPI_Transmit+0x20a>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d102      	bne.n	80075f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075f6:	e026      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1cd      	bne.n	800759e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f8b2 	bl	8007770 <SPI_EndRxTxTransaction>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2220      	movs	r2, #32
 8007616:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	77fb      	strb	r3, [r7, #31]
 8007642:	e000      	b.n	8007646 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007644:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007656:	7ffb      	ldrb	r3, [r7, #31]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	4613      	mov	r3, r2
 800766e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007670:	f7fb fbc6 	bl	8002e00 <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	4413      	add	r3, r2
 800767e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007680:	f7fb fbbe 	bl	8002e00 <HAL_GetTick>
 8007684:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007686:	4b39      	ldr	r3, [pc, #228]	; (800776c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	015b      	lsls	r3, r3, #5
 800768c:	0d1b      	lsrs	r3, r3, #20
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	fb02 f303 	mul.w	r3, r2, r3
 8007694:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007696:	e054      	b.n	8007742 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800769e:	d050      	beq.n	8007742 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076a0:	f7fb fbae 	bl	8002e00 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d902      	bls.n	80076b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d13d      	bne.n	8007732 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ce:	d111      	bne.n	80076f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d8:	d004      	beq.n	80076e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e2:	d107      	bne.n	80076f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076fc:	d10f      	bne.n	800771e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800771c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e017      	b.n	8007762 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	3b01      	subs	r3, #1
 8007740:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4013      	ands	r3, r2
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	429a      	cmp	r2, r3
 8007750:	bf0c      	ite	eq
 8007752:	2301      	moveq	r3, #1
 8007754:	2300      	movne	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	429a      	cmp	r2, r3
 800775e:	d19b      	bne.n	8007698 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000800 	.word	0x20000800

08007770 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af02      	add	r7, sp, #8
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2200      	movs	r2, #0
 8007784:	2180      	movs	r1, #128	; 0x80
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f7ff ff6a 	bl	8007660 <SPI_WaitFlagStateUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	f043 0220 	orr.w	r2, r3, #32
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e000      	b.n	80077a4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e041      	b.n	8007842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7f9 fa4e 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f000 f9de 	bl	8007bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e041      	b.n	80078e0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	d106      	bne.n	8007876 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f839 	bl	80078e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f000 f98f 	bl	8007bac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr

080078fa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007910:	2302      	movs	r3, #2
 8007912:	e082      	b.n	8007a1a <HAL_TIM_IC_ConfigChannel+0x120>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d11b      	bne.n	800795a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f000 f99d 	bl	8007c70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 020c 	bic.w	r2, r2, #12
 8007944:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6999      	ldr	r1, [r3, #24]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	619a      	str	r2, [r3, #24]
 8007958:	e05a      	b.n	8007a10 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b04      	cmp	r3, #4
 800795e:	d11c      	bne.n	800799a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6819      	ldr	r1, [r3, #0]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f000 fa06 	bl	8007d80 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007982:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6999      	ldr	r1, [r3, #24]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	619a      	str	r2, [r3, #24]
 8007998:	e03a      	b.n	8007a10 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b08      	cmp	r3, #8
 800799e:	d11b      	bne.n	80079d8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	6819      	ldr	r1, [r3, #0]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f000 fa51 	bl	8007e56 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	69da      	ldr	r2, [r3, #28]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 020c 	bic.w	r2, r2, #12
 80079c2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69d9      	ldr	r1, [r3, #28]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	61da      	str	r2, [r3, #28]
 80079d6:	e01b      	b.n	8007a10 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6819      	ldr	r1, [r3, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f000 fa70 	bl	8007ecc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69da      	ldr	r2, [r3, #28]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	69d9      	ldr	r1, [r3, #28]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	021a      	lsls	r2, r3, #8
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_TIM_ConfigClockSource+0x18>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e0b3      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x180>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a60:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a72:	d03e      	beq.n	8007af2 <HAL_TIM_ConfigClockSource+0xd0>
 8007a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a78:	f200 8087 	bhi.w	8007b8a <HAL_TIM_ConfigClockSource+0x168>
 8007a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a80:	f000 8085 	beq.w	8007b8e <HAL_TIM_ConfigClockSource+0x16c>
 8007a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a88:	d87f      	bhi.n	8007b8a <HAL_TIM_ConfigClockSource+0x168>
 8007a8a:	2b70      	cmp	r3, #112	; 0x70
 8007a8c:	d01a      	beq.n	8007ac4 <HAL_TIM_ConfigClockSource+0xa2>
 8007a8e:	2b70      	cmp	r3, #112	; 0x70
 8007a90:	d87b      	bhi.n	8007b8a <HAL_TIM_ConfigClockSource+0x168>
 8007a92:	2b60      	cmp	r3, #96	; 0x60
 8007a94:	d050      	beq.n	8007b38 <HAL_TIM_ConfigClockSource+0x116>
 8007a96:	2b60      	cmp	r3, #96	; 0x60
 8007a98:	d877      	bhi.n	8007b8a <HAL_TIM_ConfigClockSource+0x168>
 8007a9a:	2b50      	cmp	r3, #80	; 0x50
 8007a9c:	d03c      	beq.n	8007b18 <HAL_TIM_ConfigClockSource+0xf6>
 8007a9e:	2b50      	cmp	r3, #80	; 0x50
 8007aa0:	d873      	bhi.n	8007b8a <HAL_TIM_ConfigClockSource+0x168>
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d058      	beq.n	8007b58 <HAL_TIM_ConfigClockSource+0x136>
 8007aa6:	2b40      	cmp	r3, #64	; 0x40
 8007aa8:	d86f      	bhi.n	8007b8a <HAL_TIM_ConfigClockSource+0x168>
 8007aaa:	2b30      	cmp	r3, #48	; 0x30
 8007aac:	d064      	beq.n	8007b78 <HAL_TIM_ConfigClockSource+0x156>
 8007aae:	2b30      	cmp	r3, #48	; 0x30
 8007ab0:	d86b      	bhi.n	8007b8a <HAL_TIM_ConfigClockSource+0x168>
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d060      	beq.n	8007b78 <HAL_TIM_ConfigClockSource+0x156>
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d867      	bhi.n	8007b8a <HAL_TIM_ConfigClockSource+0x168>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d05c      	beq.n	8007b78 <HAL_TIM_ConfigClockSource+0x156>
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d05a      	beq.n	8007b78 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ac2:	e062      	b.n	8007b8a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6818      	ldr	r0, [r3, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6899      	ldr	r1, [r3, #8]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f000 fa50 	bl	8007f78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ae6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	609a      	str	r2, [r3, #8]
      break;
 8007af0:	e04e      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6818      	ldr	r0, [r3, #0]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	6899      	ldr	r1, [r3, #8]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f000 fa39 	bl	8007f78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b14:	609a      	str	r2, [r3, #8]
      break;
 8007b16:	e03b      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	6859      	ldr	r1, [r3, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	461a      	mov	r2, r3
 8007b26:	f000 f8fd 	bl	8007d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2150      	movs	r1, #80	; 0x50
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 fa07 	bl	8007f44 <TIM_ITRx_SetConfig>
      break;
 8007b36:	e02b      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	6859      	ldr	r1, [r3, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	461a      	mov	r2, r3
 8007b46:	f000 f957 	bl	8007df8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2160      	movs	r1, #96	; 0x60
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 f9f7 	bl	8007f44 <TIM_ITRx_SetConfig>
      break;
 8007b56:	e01b      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	6859      	ldr	r1, [r3, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	461a      	mov	r2, r3
 8007b66:	f000 f8dd 	bl	8007d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2140      	movs	r1, #64	; 0x40
 8007b70:	4618      	mov	r0, r3
 8007b72:	f000 f9e7 	bl	8007f44 <TIM_ITRx_SetConfig>
      break;
 8007b76:	e00b      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f000 f9de 	bl	8007f44 <TIM_ITRx_SetConfig>
        break;
 8007b88:	e002      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b8a:	bf00      	nop
 8007b8c:	e000      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a29      	ldr	r2, [pc, #164]	; (8007c64 <TIM_Base_SetConfig+0xb8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00b      	beq.n	8007bdc <TIM_Base_SetConfig+0x30>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bca:	d007      	beq.n	8007bdc <TIM_Base_SetConfig+0x30>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a26      	ldr	r2, [pc, #152]	; (8007c68 <TIM_Base_SetConfig+0xbc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <TIM_Base_SetConfig+0x30>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a25      	ldr	r2, [pc, #148]	; (8007c6c <TIM_Base_SetConfig+0xc0>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d108      	bne.n	8007bee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a1c      	ldr	r2, [pc, #112]	; (8007c64 <TIM_Base_SetConfig+0xb8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d00b      	beq.n	8007c0e <TIM_Base_SetConfig+0x62>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfc:	d007      	beq.n	8007c0e <TIM_Base_SetConfig+0x62>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a19      	ldr	r2, [pc, #100]	; (8007c68 <TIM_Base_SetConfig+0xbc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d003      	beq.n	8007c0e <TIM_Base_SetConfig+0x62>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <TIM_Base_SetConfig+0xc0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d108      	bne.n	8007c20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a07      	ldr	r2, [pc, #28]	; (8007c64 <TIM_Base_SetConfig+0xb8>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d103      	bne.n	8007c54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	615a      	str	r2, [r3, #20]
}
 8007c5a:	bf00      	nop
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr
 8007c64:	40012c00 	.word	0x40012c00
 8007c68:	40000400 	.word	0x40000400
 8007c6c:	40000800 	.word	0x40000800

08007c70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f023 0201 	bic.w	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4a1f      	ldr	r2, [pc, #124]	; (8007d18 <TIM_TI1_SetConfig+0xa8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00b      	beq.n	8007cb6 <TIM_TI1_SetConfig+0x46>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca4:	d007      	beq.n	8007cb6 <TIM_TI1_SetConfig+0x46>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	4a1c      	ldr	r2, [pc, #112]	; (8007d1c <TIM_TI1_SetConfig+0xac>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d003      	beq.n	8007cb6 <TIM_TI1_SetConfig+0x46>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <TIM_TI1_SetConfig+0xb0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d101      	bne.n	8007cba <TIM_TI1_SetConfig+0x4a>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <TIM_TI1_SetConfig+0x4c>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e003      	b.n	8007cda <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f043 0301 	orr.w	r3, r3, #1
 8007cd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	011b      	lsls	r3, r3, #4
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f023 030a 	bic.w	r3, r3, #10
 8007cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f003 030a 	and.w	r3, r3, #10
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	621a      	str	r2, [r3, #32]
}
 8007d0e:	bf00      	nop
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bc80      	pop	{r7}
 8007d16:	4770      	bx	lr
 8007d18:	40012c00 	.word	0x40012c00
 8007d1c:	40000400 	.word	0x40000400
 8007d20:	40000800 	.word	0x40000800

08007d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0201 	bic.w	r2, r3, #1
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f023 030a 	bic.w	r3, r3, #10
 8007d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr

08007d80 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	f023 0210 	bic.w	r2, r3, #16
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	031b      	lsls	r3, r3, #12
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	621a      	str	r2, [r3, #32]
}
 8007dee:	bf00      	nop
 8007df0:	371c      	adds	r7, #28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bc80      	pop	{r7}
 8007df6:	4770      	bx	lr

08007df8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	f023 0210 	bic.w	r2, r3, #16
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	031b      	lsls	r3, r3, #12
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	011b      	lsls	r3, r3, #4
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	621a      	str	r2, [r3, #32]
}
 8007e4c:	bf00      	nop
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr

08007e56 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b087      	sub	sp, #28
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	69db      	ldr	r3, [r3, #28]
 8007e74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr

08007ecc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ef8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	021b      	lsls	r3, r3, #8
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	031b      	lsls	r3, r3, #12
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	031b      	lsls	r3, r3, #12
 8007f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	621a      	str	r2, [r3, #32]
}
 8007f3a:	bf00      	nop
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	f043 0307 	orr.w	r3, r3, #7
 8007f66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	609a      	str	r2, [r3, #8]
}
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr

08007f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	021a      	lsls	r2, r3, #8
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	609a      	str	r2, [r3, #8]
}
 8007fac:	bf00      	nop
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
	...

08007fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d101      	bne.n	8007fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fcc:	2302      	movs	r3, #2
 8007fce:	e046      	b.n	800805e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a16      	ldr	r2, [pc, #88]	; (8008068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00e      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800801c:	d009      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a12      	ldr	r2, [pc, #72]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d004      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a10      	ldr	r2, [pc, #64]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d10c      	bne.n	800804c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4313      	orrs	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800

08008074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e03f      	b.n	8008106 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d106      	bne.n	80080a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7f8 fe28 	bl	8000cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2224      	movs	r2, #36	; 0x24
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f829 	bl	8008110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	691a      	ldr	r2, [r3, #16]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80080cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695a      	ldr	r2, [r3, #20]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80080dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689a      	ldr	r2, [r3, #8]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800814a:	f023 030c 	bic.w	r3, r3, #12
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6812      	ldr	r2, [r2, #0]
 8008152:	68b9      	ldr	r1, [r7, #8]
 8008154:	430b      	orrs	r3, r1
 8008156:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a2c      	ldr	r2, [pc, #176]	; (8008224 <UART_SetConfig+0x114>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d103      	bne.n	8008180 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008178:	f7fe f9ac 	bl	80064d4 <HAL_RCC_GetPCLK2Freq>
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	e002      	b.n	8008186 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008180:	f7fe f994 	bl	80064ac <HAL_RCC_GetPCLK1Freq>
 8008184:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009a      	lsls	r2, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	fbb2 f3f3 	udiv	r3, r2, r3
 800819c:	4a22      	ldr	r2, [pc, #136]	; (8008228 <UART_SetConfig+0x118>)
 800819e:	fba2 2303 	umull	r2, r3, r2, r3
 80081a2:	095b      	lsrs	r3, r3, #5
 80081a4:	0119      	lsls	r1, r3, #4
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009a      	lsls	r2, r3, #2
 80081b0:	441a      	add	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80081bc:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <UART_SetConfig+0x118>)
 80081be:	fba3 0302 	umull	r0, r3, r3, r2
 80081c2:	095b      	lsrs	r3, r3, #5
 80081c4:	2064      	movs	r0, #100	; 0x64
 80081c6:	fb00 f303 	mul.w	r3, r0, r3
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	3332      	adds	r3, #50	; 0x32
 80081d0:	4a15      	ldr	r2, [pc, #84]	; (8008228 <UART_SetConfig+0x118>)
 80081d2:	fba2 2303 	umull	r2, r3, r2, r3
 80081d6:	095b      	lsrs	r3, r3, #5
 80081d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081dc:	4419      	add	r1, r3
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009a      	lsls	r2, r3, #2
 80081e8:	441a      	add	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80081f4:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <UART_SetConfig+0x118>)
 80081f6:	fba3 0302 	umull	r0, r3, r3, r2
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	2064      	movs	r0, #100	; 0x64
 80081fe:	fb00 f303 	mul.w	r3, r0, r3
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	011b      	lsls	r3, r3, #4
 8008206:	3332      	adds	r3, #50	; 0x32
 8008208:	4a07      	ldr	r2, [pc, #28]	; (8008228 <UART_SetConfig+0x118>)
 800820a:	fba2 2303 	umull	r2, r3, r2, r3
 800820e:	095b      	lsrs	r3, r3, #5
 8008210:	f003 020f 	and.w	r2, r3, #15
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	440a      	add	r2, r1
 800821a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800821c:	bf00      	nop
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	40013800 	.word	0x40013800
 8008228:	51eb851f 	.word	0x51eb851f

0800822c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800822c:	b084      	sub	sp, #16
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	f107 0014 	add.w	r0, r7, #20
 800823a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	b004      	add	sp, #16
 800824a:	4770      	bx	lr

0800824c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800825c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008260:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3714      	adds	r7, #20
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr

08008278 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008280:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008284:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	b29b      	uxth	r3, r3
 8008292:	43db      	mvns	r3, r3
 8008294:	b29b      	uxth	r3, r3
 8008296:	4013      	ands	r3, r2
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr

080082c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80082c4:	b084      	sub	sp, #16
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	f107 0014 	add.w	r0, r7, #20
 80082d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	b004      	add	sp, #16
 8008302:	4770      	bx	lr

08008304 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008304:	b480      	push	{r7}
 8008306:	b09b      	sub	sp, #108	; 0x6c
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	b29b      	uxth	r3, r3
 8008322:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800832a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	78db      	ldrb	r3, [r3, #3]
 8008332:	2b03      	cmp	r3, #3
 8008334:	d81f      	bhi.n	8008376 <USB_ActivateEndpoint+0x72>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <USB_ActivateEndpoint+0x38>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	0800834d 	.word	0x0800834d
 8008340:	08008369 	.word	0x08008369
 8008344:	0800837f 	.word	0x0800837f
 8008348:	0800835b 	.word	0x0800835b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800834c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008354:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008358:	e012      	b.n	8008380 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800835a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800835e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008362:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008366:	e00b      	b.n	8008380 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008368:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800836c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008370:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008374:	e004      	b.n	8008380 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800837c:	e000      	b.n	8008380 <USB_ActivateEndpoint+0x7c>
      break;
 800837e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	441a      	add	r2, r3
 800838a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800838e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800839a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800839e:	b29b      	uxth	r3, r3
 80083a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	881b      	ldrh	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	441a      	add	r2, r3
 80083d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80083d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	7b1b      	ldrb	r3, [r3, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f040 8149 	bne.w	8008684 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8084 	beq.w	8008504 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008406:	b29b      	uxth	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	4413      	add	r3, r2
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	011a      	lsls	r2, r3, #4
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800841e:	613b      	str	r3, [r7, #16]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	88db      	ldrh	r3, [r3, #6]
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	b29b      	uxth	r3, r3
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	881b      	ldrh	r3, [r3, #0]
 800843c:	81fb      	strh	r3, [r7, #14]
 800843e:	89fb      	ldrh	r3, [r7, #14]
 8008440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01b      	beq.n	8008480 <USB_ActivateEndpoint+0x17c>
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	881b      	ldrh	r3, [r3, #0]
 8008454:	b29b      	uxth	r3, r3
 8008456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800845a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845e:	81bb      	strh	r3, [r7, #12]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	441a      	add	r2, r3
 800846a:	89bb      	ldrh	r3, [r7, #12]
 800846c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008478:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800847c:	b29b      	uxth	r3, r3
 800847e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	78db      	ldrb	r3, [r3, #3]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d020      	beq.n	80084ca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	881b      	ldrh	r3, [r3, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800849e:	813b      	strh	r3, [r7, #8]
 80084a0:	893b      	ldrh	r3, [r7, #8]
 80084a2:	f083 0320 	eor.w	r3, r3, #32
 80084a6:	813b      	strh	r3, [r7, #8]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	441a      	add	r2, r3
 80084b2:	893b      	ldrh	r3, [r7, #8]
 80084b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	8013      	strh	r3, [r2, #0]
 80084c8:	e27f      	b.n	80089ca <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	881b      	ldrh	r3, [r3, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084e0:	817b      	strh	r3, [r7, #10]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	441a      	add	r2, r3
 80084ec:	897b      	ldrh	r3, [r7, #10]
 80084ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fe:	b29b      	uxth	r3, r3
 8008500:	8013      	strh	r3, [r2, #0]
 8008502:	e262      	b.n	80089ca <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008514:	4413      	add	r3, r2
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	011a      	lsls	r2, r3, #4
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	4413      	add	r3, r2
 8008522:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008526:	62bb      	str	r3, [r7, #40]	; 0x28
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	88db      	ldrh	r3, [r3, #6]
 800852c:	085b      	lsrs	r3, r3, #1
 800852e:	b29b      	uxth	r3, r3
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	b29a      	uxth	r2, r3
 8008534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008536:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	627b      	str	r3, [r7, #36]	; 0x24
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008542:	b29b      	uxth	r3, r3
 8008544:	461a      	mov	r2, r3
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	4413      	add	r3, r2
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	011a      	lsls	r2, r3, #4
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	4413      	add	r3, r2
 8008556:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800855a:	623b      	str	r3, [r7, #32]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d112      	bne.n	800858a <USB_ActivateEndpoint+0x286>
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	b29b      	uxth	r3, r3
 800856a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800856e:	b29a      	uxth	r2, r3
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	801a      	strh	r2, [r3, #0]
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	881b      	ldrh	r3, [r3, #0]
 8008578:	b29b      	uxth	r3, r3
 800857a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800857e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008582:	b29a      	uxth	r2, r3
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	e02f      	b.n	80085ea <USB_ActivateEndpoint+0x2e6>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2b3e      	cmp	r3, #62	; 0x3e
 8008590:	d813      	bhi.n	80085ba <USB_ActivateEndpoint+0x2b6>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	085b      	lsrs	r3, r3, #1
 8008598:	663b      	str	r3, [r7, #96]	; 0x60
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <USB_ActivateEndpoint+0x2a8>
 80085a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a8:	3301      	adds	r3, #1
 80085aa:	663b      	str	r3, [r7, #96]	; 0x60
 80085ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	029b      	lsls	r3, r3, #10
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	e017      	b.n	80085ea <USB_ActivateEndpoint+0x2e6>
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	095b      	lsrs	r3, r3, #5
 80085c0:	663b      	str	r3, [r7, #96]	; 0x60
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 031f 	and.w	r3, r3, #31
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <USB_ActivateEndpoint+0x2d0>
 80085ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d0:	3b01      	subs	r3, #1
 80085d2:	663b      	str	r3, [r7, #96]	; 0x60
 80085d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	029b      	lsls	r3, r3, #10
 80085da:	b29b      	uxth	r3, r3
 80085dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	83fb      	strh	r3, [r7, #30]
 80085f8:	8bfb      	ldrh	r3, [r7, #30]
 80085fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d01b      	beq.n	800863a <USB_ActivateEndpoint+0x336>
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008618:	83bb      	strh	r3, [r7, #28]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	441a      	add	r2, r3
 8008624:	8bbb      	ldrh	r3, [r7, #28]
 8008626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800862a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800862e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008636:	b29b      	uxth	r3, r3
 8008638:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800864c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008650:	837b      	strh	r3, [r7, #26]
 8008652:	8b7b      	ldrh	r3, [r7, #26]
 8008654:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008658:	837b      	strh	r3, [r7, #26]
 800865a:	8b7b      	ldrh	r3, [r7, #26]
 800865c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008660:	837b      	strh	r3, [r7, #26]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	441a      	add	r2, r3
 800866c:	8b7b      	ldrh	r3, [r7, #26]
 800866e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800867a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867e:	b29b      	uxth	r3, r3
 8008680:	8013      	strh	r3, [r2, #0]
 8008682:	e1a2      	b.n	80089ca <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	441a      	add	r2, r3
 80086a8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80086ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80086b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086bc:	b29b      	uxth	r3, r3
 80086be:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086d0:	4413      	add	r3, r2
 80086d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	011a      	lsls	r2, r3, #4
 80086da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086dc:	4413      	add	r3, r2
 80086de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086e2:	657b      	str	r3, [r7, #84]	; 0x54
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	891b      	ldrh	r3, [r3, #8]
 80086e8:	085b      	lsrs	r3, r3, #1
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	653b      	str	r3, [r7, #80]	; 0x50
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086fe:	b29b      	uxth	r3, r3
 8008700:	461a      	mov	r2, r3
 8008702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008704:	4413      	add	r3, r2
 8008706:	653b      	str	r3, [r7, #80]	; 0x50
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	011a      	lsls	r2, r3, #4
 800870e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008710:	4413      	add	r3, r2
 8008712:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	895b      	ldrh	r3, [r3, #10]
 800871c:	085b      	lsrs	r3, r3, #1
 800871e:	b29b      	uxth	r3, r3
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	b29a      	uxth	r2, r3
 8008724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008726:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	785b      	ldrb	r3, [r3, #1]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 8091 	bne.w	8008854 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008740:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01b      	beq.n	8008782 <USB_ActivateEndpoint+0x47e>
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800875c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008760:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	441a      	add	r2, r3
 800876c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800876e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800877a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877e:	b29b      	uxth	r3, r3
 8008780:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008790:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01b      	beq.n	80087d2 <USB_ActivateEndpoint+0x4ce>
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	441a      	add	r2, r3
 80087bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	441a      	add	r2, r3
 8008804:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800880a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800880e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008816:	b29b      	uxth	r3, r3
 8008818:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	881b      	ldrh	r3, [r3, #0]
 8008826:	b29b      	uxth	r3, r3
 8008828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800882c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008830:	867b      	strh	r3, [r7, #50]	; 0x32
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	441a      	add	r2, r3
 800883c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800883e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800884a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884e:	b29b      	uxth	r3, r3
 8008850:	8013      	strh	r3, [r2, #0]
 8008852:	e0ba      	b.n	80089ca <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008864:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01d      	beq.n	80088ac <USB_ActivateEndpoint+0x5a8>
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	881b      	ldrh	r3, [r3, #0]
 800887c:	b29b      	uxth	r3, r3
 800887e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008886:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	441a      	add	r2, r3
 8008894:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800889c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80088bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80088c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01d      	beq.n	8008904 <USB_ActivateEndpoint+0x600>
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	441a      	add	r2, r3
 80088ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80088f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008900:	b29b      	uxth	r3, r3
 8008902:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	78db      	ldrb	r3, [r3, #3]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d024      	beq.n	8008956 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800891e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008926:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800892a:	f083 0320 	eor.w	r3, r3, #32
 800892e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	441a      	add	r2, r3
 800893c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800894c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008950:	b29b      	uxth	r3, r3
 8008952:	8013      	strh	r3, [r2, #0]
 8008954:	e01d      	b.n	8008992 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800896c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	441a      	add	r2, r3
 800897a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800897e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800898a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898e:	b29b      	uxth	r3, r3
 8008990:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	441a      	add	r2, r3
 80089b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80089b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80089ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	376c      	adds	r7, #108	; 0x6c
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr

080089d8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089d8:	b480      	push	{r7}
 80089da:	b08d      	sub	sp, #52	; 0x34
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	7b1b      	ldrb	r3, [r3, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 808e 	bne.w	8008b08 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d044      	beq.n	8008a7e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	81bb      	strh	r3, [r7, #12]
 8008a02:	89bb      	ldrh	r3, [r7, #12]
 8008a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01b      	beq.n	8008a44 <USB_DeactivateEndpoint+0x6c>
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a22:	817b      	strh	r3, [r7, #10]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	441a      	add	r2, r3
 8008a2e:	897b      	ldrh	r3, [r7, #10]
 8008a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a5a:	813b      	strh	r3, [r7, #8]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	441a      	add	r2, r3
 8008a66:	893b      	ldrh	r3, [r7, #8]
 8008a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	8013      	strh	r3, [r2, #0]
 8008a7c:	e192      	b.n	8008da4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	827b      	strh	r3, [r7, #18]
 8008a8c:	8a7b      	ldrh	r3, [r7, #18]
 8008a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01b      	beq.n	8008ace <USB_DeactivateEndpoint+0xf6>
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	881b      	ldrh	r3, [r3, #0]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aac:	823b      	strh	r3, [r7, #16]
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	441a      	add	r2, r3
 8008ab8:	8a3b      	ldrh	r3, [r7, #16]
 8008aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	881b      	ldrh	r3, [r3, #0]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae4:	81fb      	strh	r3, [r7, #14]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	441a      	add	r2, r3
 8008af0:	89fb      	ldrh	r3, [r7, #14]
 8008af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	8013      	strh	r3, [r2, #0]
 8008b06:	e14d      	b.n	8008da4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f040 80a5 	bne.w	8008c5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	843b      	strh	r3, [r7, #32]
 8008b20:	8c3b      	ldrh	r3, [r7, #32]
 8008b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d01b      	beq.n	8008b62 <USB_DeactivateEndpoint+0x18a>
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b40:	83fb      	strh	r3, [r7, #30]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	441a      	add	r2, r3
 8008b4c:	8bfb      	ldrh	r3, [r7, #30]
 8008b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	83bb      	strh	r3, [r7, #28]
 8008b70:	8bbb      	ldrh	r3, [r7, #28]
 8008b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d01b      	beq.n	8008bb2 <USB_DeactivateEndpoint+0x1da>
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b90:	837b      	strh	r3, [r7, #26]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	441a      	add	r2, r3
 8008b9c:	8b7b      	ldrh	r3, [r7, #26]
 8008b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008baa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc8:	833b      	strh	r3, [r7, #24]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	441a      	add	r2, r3
 8008bd4:	8b3b      	ldrh	r3, [r7, #24]
 8008bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	881b      	ldrh	r3, [r3, #0]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c00:	82fb      	strh	r3, [r7, #22]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	441a      	add	r2, r3
 8008c0c:	8afb      	ldrh	r3, [r7, #22]
 8008c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	881b      	ldrh	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c38:	82bb      	strh	r3, [r7, #20]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	441a      	add	r2, r3
 8008c44:	8abb      	ldrh	r3, [r7, #20]
 8008c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	8013      	strh	r3, [r2, #0]
 8008c5a:	e0a3      	b.n	8008da4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	4413      	add	r3, r2
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008c6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d01b      	beq.n	8008cac <USB_DeactivateEndpoint+0x2d4>
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4413      	add	r3, r2
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	441a      	add	r2, r3
 8008c96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008cba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d01b      	beq.n	8008cfc <USB_DeactivateEndpoint+0x324>
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4413      	add	r3, r2
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cda:	853b      	strh	r3, [r7, #40]	; 0x28
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	441a      	add	r2, r3
 8008ce6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d12:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	441a      	add	r2, r3
 8008d1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	441a      	add	r2, r3
 8008d56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4413      	add	r3, r2
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d82:	847b      	strh	r3, [r7, #34]	; 0x22
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	441a      	add	r2, r3
 8008d8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3734      	adds	r7, #52	; 0x34
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr

08008db0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b0cc      	sub	sp, #304	; 0x130
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dbe:	6018      	str	r0, [r3, #0]
 8008dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dc8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	f041 817d 	bne.w	800a0d6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699a      	ldr	r2, [r3, #24]
 8008de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d908      	bls.n	8008e0a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008e08:	e007      	b.n	8008e1a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	7b1b      	ldrb	r3, [r3, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d152      	bne.n	8008ed0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6959      	ldr	r1, [r3, #20]
 8008e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	88da      	ldrh	r2, [r3, #6]
 8008e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008e4c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008e50:	6800      	ldr	r0, [r0, #0]
 8008e52:	f001 ff23 	bl	800ac9c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e62:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008e66:	6812      	ldr	r2, [r2, #0]
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008e84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e88:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	440a      	add	r2, r1
 8008e90:	601a      	str	r2, [r3, #0]
 8008e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	011a      	lsls	r2, r3, #4
 8008ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8008eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ec4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	801a      	strh	r2, [r3, #0]
 8008ecc:	f001 b8b5 	b.w	800a03a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	78db      	ldrb	r3, [r3, #3]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	f040 84c6 	bne.w	800986e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6a1a      	ldr	r2, [r3, #32]
 8008eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	f240 8443 	bls.w	8009786 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f26:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	441a      	add	r2, r3
 8008f44:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f50:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6a1a      	ldr	r2, [r3, #32]
 8008f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f6c:	1ad2      	subs	r2, r2, r3
 8008f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 823e 	beq.w	800941e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008faa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	785b      	ldrb	r3, [r3, #1]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f040 809a 	bne.w	80090fc <USB_EPStartXfer+0x34c>
 8008fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fd0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fd4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008fd8:	6812      	ldr	r2, [r2, #0]
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fe0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	4619      	mov	r1, r3
 8008fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ffa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008ffe:	6812      	ldr	r2, [r2, #0]
 8009000:	440a      	add	r2, r1
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	011a      	lsls	r2, r3, #4
 8009012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4413      	add	r3, r2
 800901e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009026:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009030:	2b00      	cmp	r3, #0
 8009032:	d122      	bne.n	800907a <USB_EPStartXfer+0x2ca>
 8009034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009038:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009046:	b29a      	uxth	r2, r3
 8009048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800904c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009058:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	b29b      	uxth	r3, r3
 8009062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800906a:	b29a      	uxth	r2, r3
 800906c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009070:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	e079      	b.n	800916e <USB_EPStartXfer+0x3be>
 800907a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800907e:	2b3e      	cmp	r3, #62	; 0x3e
 8009080:	d81b      	bhi.n	80090ba <USB_EPStartXfer+0x30a>
 8009082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800908c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d004      	beq.n	80090a2 <USB_EPStartXfer+0x2f2>
 8009098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800909c:	3301      	adds	r3, #1
 800909e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80090a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	029b      	lsls	r3, r3, #10
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	801a      	strh	r2, [r3, #0]
 80090b8:	e059      	b.n	800916e <USB_EPStartXfer+0x3be>
 80090ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80090c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090c8:	f003 031f 	and.w	r3, r3, #31
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d104      	bne.n	80090da <USB_EPStartXfer+0x32a>
 80090d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090d4:	3b01      	subs	r3, #1
 80090d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80090da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090de:	b29b      	uxth	r3, r3
 80090e0:	029b      	lsls	r3, r3, #10
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	801a      	strh	r2, [r3, #0]
 80090fa:	e038      	b.n	800916e <USB_EPStartXfer+0x3be>
 80090fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	785b      	ldrb	r3, [r3, #1]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d130      	bne.n	800916e <USB_EPStartXfer+0x3be>
 800910c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009110:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800911a:	b29b      	uxth	r3, r3
 800911c:	4619      	mov	r1, r3
 800911e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009122:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009126:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800912a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800912e:	6812      	ldr	r2, [r2, #0]
 8009130:	440a      	add	r2, r1
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	011a      	lsls	r2, r3, #4
 8009142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009146:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4413      	add	r3, r2
 800914e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8009152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009160:	b29a      	uxth	r2, r3
 8009162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800916e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	895b      	ldrh	r3, [r3, #10]
 800917a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800917e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6959      	ldr	r1, [r3, #20]
 800918a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918e:	b29b      	uxth	r3, r3
 8009190:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009194:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009198:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800919c:	6800      	ldr	r0, [r0, #0]
 800919e:	f001 fd7d 	bl	800ac9c <USB_WritePMA>
            ep->xfer_buff += len;
 80091a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	695a      	ldr	r2, [r3, #20]
 80091ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091b2:	441a      	add	r2, r3
 80091b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80091c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6a1a      	ldr	r2, [r3, #32]
 80091cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d90f      	bls.n	80091fc <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80091dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6a1a      	ldr	r2, [r3, #32]
 80091e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ec:	1ad2      	subs	r2, r2, r3
 80091ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	621a      	str	r2, [r3, #32]
 80091fa:	e00e      	b.n	800921a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80091fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800920c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2200      	movs	r2, #0
 8009218:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800921a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	785b      	ldrb	r3, [r3, #1]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 809a 	bne.w	8009360 <USB_EPStartXfer+0x5b0>
 800922c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009230:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009234:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009238:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800923c:	6812      	ldr	r2, [r2, #0]
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800924e:	b29b      	uxth	r3, r3
 8009250:	4619      	mov	r1, r3
 8009252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009256:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800925a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800925e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8009262:	6812      	ldr	r2, [r2, #0]
 8009264:	440a      	add	r2, r1
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	011a      	lsls	r2, r3, #4
 8009276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800927a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4413      	add	r3, r2
 8009282:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d122      	bne.n	80092de <USB_EPStartXfer+0x52e>
 8009298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	801a      	strh	r2, [r3, #0]
 80092b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	801a      	strh	r2, [r3, #0]
 80092dc:	e083      	b.n	80093e6 <USB_EPStartXfer+0x636>
 80092de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e2:	2b3e      	cmp	r3, #62	; 0x3e
 80092e4:	d81b      	bhi.n	800931e <USB_EPStartXfer+0x56e>
 80092e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ea:	085b      	lsrs	r3, r3, #1
 80092ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80092f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <USB_EPStartXfer+0x556>
 80092fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009300:	3301      	adds	r3, #1
 8009302:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009306:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800930a:	b29b      	uxth	r3, r3
 800930c:	029b      	lsls	r3, r3, #10
 800930e:	b29a      	uxth	r2, r3
 8009310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009314:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	801a      	strh	r2, [r3, #0]
 800931c:	e063      	b.n	80093e6 <USB_EPStartXfer+0x636>
 800931e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009322:	095b      	lsrs	r3, r3, #5
 8009324:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8009328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800932c:	f003 031f 	and.w	r3, r3, #31
 8009330:	2b00      	cmp	r3, #0
 8009332:	d104      	bne.n	800933e <USB_EPStartXfer+0x58e>
 8009334:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009338:	3b01      	subs	r3, #1
 800933a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800933e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009342:	b29b      	uxth	r3, r3
 8009344:	029b      	lsls	r3, r3, #10
 8009346:	b29b      	uxth	r3, r3
 8009348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009350:	b29a      	uxth	r2, r3
 8009352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009356:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	801a      	strh	r2, [r3, #0]
 800935e:	e042      	b.n	80093e6 <USB_EPStartXfer+0x636>
 8009360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	785b      	ldrb	r3, [r3, #1]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d13a      	bne.n	80093e6 <USB_EPStartXfer+0x636>
 8009370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009374:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009378:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800937c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009380:	6812      	ldr	r2, [r2, #0]
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009392:	b29b      	uxth	r3, r3
 8009394:	4619      	mov	r1, r3
 8009396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800939e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093a2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80093a6:	6812      	ldr	r2, [r2, #0]
 80093a8:	440a      	add	r2, r1
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	011a      	lsls	r2, r3, #4
 80093ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4413      	add	r3, r2
 80093c6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80093ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093d8:	b29a      	uxth	r2, r3
 80093da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80093e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	891b      	ldrh	r3, [r3, #8]
 80093f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6959      	ldr	r1, [r3, #20]
 8009402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009406:	b29b      	uxth	r3, r3
 8009408:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800940c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009410:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009414:	6800      	ldr	r0, [r0, #0]
 8009416:	f001 fc41 	bl	800ac9c <USB_WritePMA>
 800941a:	f000 be0e 	b.w	800a03a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800941e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	785b      	ldrb	r3, [r3, #1]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d16d      	bne.n	800950a <USB_EPStartXfer+0x75a>
 800942e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009432:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	64bb      	str	r3, [r7, #72]	; 0x48
 800943a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800943e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009448:	b29b      	uxth	r3, r3
 800944a:	461a      	mov	r2, r3
 800944c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944e:	4413      	add	r3, r2
 8009450:	64bb      	str	r3, [r7, #72]	; 0x48
 8009452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	011a      	lsls	r2, r3, #4
 8009460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009462:	4413      	add	r3, r2
 8009464:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009468:	647b      	str	r3, [r7, #68]	; 0x44
 800946a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d112      	bne.n	8009498 <USB_EPStartXfer+0x6e8>
 8009472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b29b      	uxth	r3, r3
 8009478:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800947c:	b29a      	uxth	r2, r3
 800947e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009480:	801a      	strh	r2, [r3, #0]
 8009482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	b29b      	uxth	r3, r3
 8009488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800948c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009490:	b29a      	uxth	r2, r3
 8009492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	e063      	b.n	8009560 <USB_EPStartXfer+0x7b0>
 8009498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800949c:	2b3e      	cmp	r3, #62	; 0x3e
 800949e:	d817      	bhi.n	80094d0 <USB_EPStartXfer+0x720>
 80094a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a4:	085b      	lsrs	r3, r3, #1
 80094a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d004      	beq.n	80094c0 <USB_EPStartXfer+0x710>
 80094b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094ba:	3301      	adds	r3, #1
 80094bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	029b      	lsls	r3, r3, #10
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094cc:	801a      	strh	r2, [r3, #0]
 80094ce:	e047      	b.n	8009560 <USB_EPStartXfer+0x7b0>
 80094d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d4:	095b      	lsrs	r3, r3, #5
 80094d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094de:	f003 031f 	and.w	r3, r3, #31
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <USB_EPStartXfer+0x740>
 80094e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094ea:	3b01      	subs	r3, #1
 80094ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	029b      	lsls	r3, r3, #10
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009502:	b29a      	uxth	r2, r3
 8009504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009506:	801a      	strh	r2, [r3, #0]
 8009508:	e02a      	b.n	8009560 <USB_EPStartXfer+0x7b0>
 800950a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	785b      	ldrb	r3, [r3, #1]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d122      	bne.n	8009560 <USB_EPStartXfer+0x7b0>
 800951a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800951e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	653b      	str	r3, [r7, #80]	; 0x50
 8009526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009534:	b29b      	uxth	r3, r3
 8009536:	461a      	mov	r2, r3
 8009538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800953a:	4413      	add	r3, r2
 800953c:	653b      	str	r3, [r7, #80]	; 0x50
 800953e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	011a      	lsls	r2, r3, #4
 800954c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800954e:	4413      	add	r3, r2
 8009550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009554:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800955a:	b29a      	uxth	r2, r3
 800955c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800955e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	891b      	ldrh	r3, [r3, #8]
 800956c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6959      	ldr	r1, [r3, #20]
 800957c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009580:	b29b      	uxth	r3, r3
 8009582:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009586:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800958a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800958e:	6800      	ldr	r0, [r0, #0]
 8009590:	f001 fb84 	bl	800ac9c <USB_WritePMA>
            ep->xfer_buff += len;
 8009594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	695a      	ldr	r2, [r3, #20]
 80095a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a4:	441a      	add	r2, r3
 80095a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6a1a      	ldr	r2, [r3, #32]
 80095be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d90f      	bls.n	80095ee <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80095ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6a1a      	ldr	r2, [r3, #32]
 80095da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	621a      	str	r2, [r3, #32]
 80095ec:	e00e      	b.n	800960c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80095ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80095fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2200      	movs	r2, #0
 800960a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800960c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	643b      	str	r3, [r7, #64]	; 0x40
 8009618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	785b      	ldrb	r3, [r3, #1]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d16d      	bne.n	8009704 <USB_EPStartXfer+0x954>
 8009628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800962c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	63bb      	str	r3, [r7, #56]	; 0x38
 8009634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009638:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009642:	b29b      	uxth	r3, r3
 8009644:	461a      	mov	r2, r3
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	4413      	add	r3, r2
 800964a:	63bb      	str	r3, [r7, #56]	; 0x38
 800964c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	011a      	lsls	r2, r3, #4
 800965a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965c:	4413      	add	r3, r2
 800965e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
 8009664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d112      	bne.n	8009692 <USB_EPStartXfer+0x8e2>
 800966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966e:	881b      	ldrh	r3, [r3, #0]
 8009670:	b29b      	uxth	r3, r3
 8009672:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009676:	b29a      	uxth	r2, r3
 8009678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	b29b      	uxth	r3, r3
 8009682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800968a:	b29a      	uxth	r2, r3
 800968c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800968e:	801a      	strh	r2, [r3, #0]
 8009690:	e05d      	b.n	800974e <USB_EPStartXfer+0x99e>
 8009692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009696:	2b3e      	cmp	r3, #62	; 0x3e
 8009698:	d817      	bhi.n	80096ca <USB_EPStartXfer+0x91a>
 800969a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800969e:	085b      	lsrs	r3, r3, #1
 80096a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <USB_EPStartXfer+0x90a>
 80096b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096b4:	3301      	adds	r3, #1
 80096b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096be:	b29b      	uxth	r3, r3
 80096c0:	029b      	lsls	r3, r3, #10
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	e041      	b.n	800974e <USB_EPStartXfer+0x99e>
 80096ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ce:	095b      	lsrs	r3, r3, #5
 80096d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d104      	bne.n	80096ea <USB_EPStartXfer+0x93a>
 80096e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096e4:	3b01      	subs	r3, #1
 80096e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80096ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	029b      	lsls	r3, r3, #10
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009700:	801a      	strh	r2, [r3, #0]
 8009702:	e024      	b.n	800974e <USB_EPStartXfer+0x99e>
 8009704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d11c      	bne.n	800974e <USB_EPStartXfer+0x99e>
 8009714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009722:	b29b      	uxth	r3, r3
 8009724:	461a      	mov	r2, r3
 8009726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009728:	4413      	add	r3, r2
 800972a:	643b      	str	r3, [r7, #64]	; 0x40
 800972c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	011a      	lsls	r2, r3, #4
 800973a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800973c:	4413      	add	r3, r2
 800973e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009748:	b29a      	uxth	r2, r3
 800974a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800974e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	895b      	ldrh	r3, [r3, #10]
 800975a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800975e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6959      	ldr	r1, [r3, #20]
 800976a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800976e:	b29b      	uxth	r3, r3
 8009770:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009774:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009778:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800977c:	6800      	ldr	r0, [r0, #0]
 800977e:	f001 fa8d 	bl	800ac9c <USB_WritePMA>
 8009782:	f000 bc5a 	b.w	800a03a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800978a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80097b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097bc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80097c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	441a      	add	r2, r3
 80097da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80097de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80097f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980c:	b29b      	uxth	r3, r3
 800980e:	461a      	mov	r2, r3
 8009810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009812:	4413      	add	r3, r2
 8009814:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800981a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	011a      	lsls	r2, r3, #4
 8009824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009826:	4413      	add	r3, r2
 8009828:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800982c:	65bb      	str	r3, [r7, #88]	; 0x58
 800982e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009832:	b29a      	uxth	r2, r3
 8009834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009836:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	891b      	ldrh	r3, [r3, #8]
 8009844:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800984c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6959      	ldr	r1, [r3, #20]
 8009854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009858:	b29b      	uxth	r3, r3
 800985a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800985e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009862:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009866:	6800      	ldr	r0, [r0, #0]
 8009868:	f001 fa18 	bl	800ac9c <USB_WritePMA>
 800986c:	e3e5      	b.n	800a03a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800986e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800987c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009894:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8009898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	441a      	add	r2, r3
 80098b2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80098b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098be:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80098c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80098ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6a1a      	ldr	r2, [r3, #32]
 80098d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098da:	1ad2      	subs	r2, r2, r3
 80098dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80098e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	b29b      	uxth	r3, r3
 8009906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 81bc 	beq.w	8009c88 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800991e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	785b      	ldrb	r3, [r3, #1]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d16d      	bne.n	8009a0a <USB_EPStartXfer+0xc5a>
 800992e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	67bb      	str	r3, [r7, #120]	; 0x78
 800993a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800993e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009948:	b29b      	uxth	r3, r3
 800994a:	461a      	mov	r2, r3
 800994c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800994e:	4413      	add	r3, r2
 8009950:	67bb      	str	r3, [r7, #120]	; 0x78
 8009952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	011a      	lsls	r2, r3, #4
 8009960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009962:	4413      	add	r3, r2
 8009964:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009968:	677b      	str	r3, [r7, #116]	; 0x74
 800996a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800996e:	2b00      	cmp	r3, #0
 8009970:	d112      	bne.n	8009998 <USB_EPStartXfer+0xbe8>
 8009972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800997c:	b29a      	uxth	r2, r3
 800997e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009980:	801a      	strh	r2, [r3, #0]
 8009982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800998c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009990:	b29a      	uxth	r2, r3
 8009992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009994:	801a      	strh	r2, [r3, #0]
 8009996:	e060      	b.n	8009a5a <USB_EPStartXfer+0xcaa>
 8009998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800999c:	2b3e      	cmp	r3, #62	; 0x3e
 800999e:	d817      	bhi.n	80099d0 <USB_EPStartXfer+0xc20>
 80099a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099a4:	085b      	lsrs	r3, r3, #1
 80099a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <USB_EPStartXfer+0xc10>
 80099b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099ba:	3301      	adds	r3, #1
 80099bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	029b      	lsls	r3, r3, #10
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099cc:	801a      	strh	r2, [r3, #0]
 80099ce:	e044      	b.n	8009a5a <USB_EPStartXfer+0xcaa>
 80099d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099d4:	095b      	lsrs	r3, r3, #5
 80099d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d104      	bne.n	80099f0 <USB_EPStartXfer+0xc40>
 80099e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099ea:	3b01      	subs	r3, #1
 80099ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80099f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	029b      	lsls	r3, r3, #10
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a06:	801a      	strh	r2, [r3, #0]
 8009a08:	e027      	b.n	8009a5a <USB_EPStartXfer+0xcaa>
 8009a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	785b      	ldrb	r3, [r3, #1]
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d11f      	bne.n	8009a5a <USB_EPStartXfer+0xcaa>
 8009a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a30:	4413      	add	r3, r2
 8009a32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	011a      	lsls	r2, r3, #4
 8009a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a48:	4413      	add	r3, r2
 8009a4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	895b      	ldrh	r3, [r3, #10]
 8009a66:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6959      	ldr	r1, [r3, #20]
 8009a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009a80:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009a84:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009a88:	6800      	ldr	r0, [r0, #0]
 8009a8a:	f001 f907 	bl	800ac9c <USB_WritePMA>
          ep->xfer_buff += len;
 8009a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	695a      	ldr	r2, [r3, #20]
 8009a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a9e:	441a      	add	r2, r3
 8009aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009aac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ab0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6a1a      	ldr	r2, [r3, #32]
 8009ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d90f      	bls.n	8009ae8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8009ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6a1a      	ldr	r2, [r3, #32]
 8009ad4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad8:	1ad2      	subs	r2, r2, r3
 8009ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	621a      	str	r2, [r3, #32]
 8009ae6:	e00e      	b.n	8009b06 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8009ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2200      	movs	r2, #0
 8009b04:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8295 	beq.w	800a03a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d16d      	bne.n	8009bfc <USB_EPStartXfer+0xe4c>
 8009b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b40:	4413      	add	r3, r2
 8009b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	011a      	lsls	r2, r3, #4
 8009b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b54:	4413      	add	r3, r2
 8009b56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b5a:	667b      	str	r3, [r7, #100]	; 0x64
 8009b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d112      	bne.n	8009b8a <USB_EPStartXfer+0xdda>
 8009b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b72:	801a      	strh	r2, [r3, #0]
 8009b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b86:	801a      	strh	r2, [r3, #0]
 8009b88:	e063      	b.n	8009c52 <USB_EPStartXfer+0xea2>
 8009b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8009b90:	d817      	bhi.n	8009bc2 <USB_EPStartXfer+0xe12>
 8009b92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b96:	085b      	lsrs	r3, r3, #1
 8009b98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <USB_EPStartXfer+0xe02>
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bac:	3301      	adds	r3, #1
 8009bae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	029b      	lsls	r3, r3, #10
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e047      	b.n	8009c52 <USB_EPStartXfer+0xea2>
 8009bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bc6:	095b      	lsrs	r3, r3, #5
 8009bc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009bcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bd0:	f003 031f 	and.w	r3, r3, #31
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <USB_EPStartXfer+0xe32>
 8009bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8009be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	029b      	lsls	r3, r3, #10
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bf8:	801a      	strh	r2, [r3, #0]
 8009bfa:	e02a      	b.n	8009c52 <USB_EPStartXfer+0xea2>
 8009bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	785b      	ldrb	r3, [r3, #1]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d122      	bne.n	8009c52 <USB_EPStartXfer+0xea2>
 8009c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	673b      	str	r3, [r7, #112]	; 0x70
 8009c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	461a      	mov	r2, r3
 8009c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c2c:	4413      	add	r3, r2
 8009c2e:	673b      	str	r3, [r7, #112]	; 0x70
 8009c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	011a      	lsls	r2, r3, #4
 8009c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c40:	4413      	add	r3, r2
 8009c42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	891b      	ldrh	r3, [r3, #8]
 8009c5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	6959      	ldr	r1, [r3, #20]
 8009c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009c78:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009c7c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009c80:	6800      	ldr	r0, [r0, #0]
 8009c82:	f001 f80b 	bl	800ac9c <USB_WritePMA>
 8009c86:	e1d8      	b.n	800a03a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d178      	bne.n	8009d8a <USB_EPStartXfer+0xfda>
 8009c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	011a      	lsls	r2, r3, #4
 8009cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009cda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d116      	bne.n	8009d14 <USB_EPStartXfer+0xf64>
 8009ce6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cf8:	801a      	strh	r2, [r3, #0]
 8009cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cfe:	881b      	ldrh	r3, [r3, #0]
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d10:	801a      	strh	r2, [r3, #0]
 8009d12:	e06b      	b.n	8009dec <USB_EPStartXfer+0x103c>
 8009d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d18:	2b3e      	cmp	r3, #62	; 0x3e
 8009d1a:	d818      	bhi.n	8009d4e <USB_EPStartXfer+0xf9e>
 8009d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d004      	beq.n	8009d3c <USB_EPStartXfer+0xf8c>
 8009d32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d36:	3301      	adds	r3, #1
 8009d38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	029b      	lsls	r3, r3, #10
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d4a:	801a      	strh	r2, [r3, #0]
 8009d4c:	e04e      	b.n	8009dec <USB_EPStartXfer+0x103c>
 8009d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d5c:	f003 031f 	and.w	r3, r3, #31
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d104      	bne.n	8009d6e <USB_EPStartXfer+0xfbe>
 8009d64:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8009d6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	029b      	lsls	r3, r3, #10
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d86:	801a      	strh	r2, [r3, #0]
 8009d88:	e030      	b.n	8009dec <USB_EPStartXfer+0x103c>
 8009d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	785b      	ldrb	r3, [r3, #1]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d128      	bne.n	8009dec <USB_EPStartXfer+0x103c>
 8009d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	461a      	mov	r2, r3
 8009dba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	011a      	lsls	r2, r3, #4
 8009dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	891b      	ldrh	r3, [r3, #8]
 8009df8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	6959      	ldr	r1, [r3, #20]
 8009e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8009e12:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009e16:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009e1a:	6800      	ldr	r0, [r0, #0]
 8009e1c:	f000 ff3e 	bl	800ac9c <USB_WritePMA>
          ep->xfer_buff += len;
 8009e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	695a      	ldr	r2, [r3, #20]
 8009e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e30:	441a      	add	r2, r3
 8009e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8009e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6a1a      	ldr	r2, [r3, #32]
 8009e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d90f      	bls.n	8009e7a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8009e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6a1a      	ldr	r2, [r3, #32]
 8009e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e6a:	1ad2      	subs	r2, r2, r3
 8009e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	621a      	str	r2, [r3, #32]
 8009e78:	e00e      	b.n	8009e98 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8009e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8009e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2200      	movs	r2, #0
 8009e96:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8009e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f000 80cc 	beq.w	800a03a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	785b      	ldrb	r3, [r3, #1]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d178      	bne.n	8009fb2 <USB_EPStartXfer+0x1202>
 8009ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	011a      	lsls	r2, r3, #4
 8009ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009efc:	4413      	add	r3, r2
 8009efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d116      	bne.n	8009f3c <USB_EPStartXfer+0x118c>
 8009f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f38:	801a      	strh	r2, [r3, #0]
 8009f3a:	e064      	b.n	800a006 <USB_EPStartXfer+0x1256>
 8009f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f40:	2b3e      	cmp	r3, #62	; 0x3e
 8009f42:	d818      	bhi.n	8009f76 <USB_EPStartXfer+0x11c6>
 8009f44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f48:	085b      	lsrs	r3, r3, #1
 8009f4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d004      	beq.n	8009f64 <USB_EPStartXfer+0x11b4>
 8009f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f5e:	3301      	adds	r3, #1
 8009f60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	029b      	lsls	r3, r3, #10
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f72:	801a      	strh	r2, [r3, #0]
 8009f74:	e047      	b.n	800a006 <USB_EPStartXfer+0x1256>
 8009f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f7a:	095b      	lsrs	r3, r3, #5
 8009f7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f84:	f003 031f 	and.w	r3, r3, #31
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d104      	bne.n	8009f96 <USB_EPStartXfer+0x11e6>
 8009f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f90:	3b01      	subs	r3, #1
 8009f92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	029b      	lsls	r3, r3, #10
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fae:	801a      	strh	r2, [r3, #0]
 8009fb0:	e029      	b.n	800a006 <USB_EPStartXfer+0x1256>
 8009fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	785b      	ldrb	r3, [r3, #1]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d121      	bne.n	800a006 <USB_EPStartXfer+0x1256>
 8009fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fd8:	4413      	add	r3, r2
 8009fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	011a      	lsls	r2, r3, #4
 8009fec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ffa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a004:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a00a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	895b      	ldrh	r3, [r3, #10]
 800a012:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6959      	ldr	r1, [r3, #20]
 800a022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a026:	b29b      	uxth	r3, r3
 800a028:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a02c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a030:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a034:	6800      	ldr	r0, [r0, #0]
 800a036:	f000 fe31 	bl	800ac9c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a03a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a03e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a05c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a068:	8013      	strh	r3, [r2, #0]
 800a06a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a06e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a072:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a076:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a07a:	8812      	ldrh	r2, [r2, #0]
 800a07c:	f082 0210 	eor.w	r2, r2, #16
 800a080:	801a      	strh	r2, [r3, #0]
 800a082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a086:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a08a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a08e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800a092:	8812      	ldrh	r2, [r2, #0]
 800a094:	f082 0220 	eor.w	r2, r2, #32
 800a098:	801a      	strh	r2, [r3, #0]
 800a09a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a09e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	441a      	add	r2, r3
 800a0b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	8013      	strh	r3, [r2, #0]
 800a0d2:	f000 bc9f 	b.w	800aa14 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a0d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	7b1b      	ldrb	r3, [r3, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f040 80ae 	bne.w	800a244 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a0e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	699a      	ldr	r2, [r3, #24]
 800a0f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	429a      	cmp	r2, r3
 800a102:	d917      	bls.n	800a134 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800a104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800a114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a124:	1ad2      	subs	r2, r2, r3
 800a126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a12a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	619a      	str	r2, [r3, #24]
 800a132:	e00e      	b.n	800a152 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800a134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800a144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2200      	movs	r2, #0
 800a150:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a156:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a16e:	b29b      	uxth	r3, r3
 800a170:	461a      	mov	r2, r3
 800a172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a176:	4413      	add	r3, r2
 800a178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a17c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	011a      	lsls	r2, r3, #4
 800a18a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a18e:	4413      	add	r3, r2
 800a190:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d116      	bne.n	800a1ce <USB_EPStartXfer+0x141e>
 800a1a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1a4:	881b      	ldrh	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1b2:	801a      	strh	r2, [r3, #0]
 800a1b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1ca:	801a      	strh	r2, [r3, #0]
 800a1cc:	e3e8      	b.n	800a9a0 <USB_EPStartXfer+0x1bf0>
 800a1ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1d2:	2b3e      	cmp	r3, #62	; 0x3e
 800a1d4:	d818      	bhi.n	800a208 <USB_EPStartXfer+0x1458>
 800a1d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1da:	085b      	lsrs	r3, r3, #1
 800a1dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a1e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d004      	beq.n	800a1f6 <USB_EPStartXfer+0x1446>
 800a1ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a1f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	029b      	lsls	r3, r3, #10
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a204:	801a      	strh	r2, [r3, #0]
 800a206:	e3cb      	b.n	800a9a0 <USB_EPStartXfer+0x1bf0>
 800a208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a20c:	095b      	lsrs	r3, r3, #5
 800a20e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a216:	f003 031f 	and.w	r3, r3, #31
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d104      	bne.n	800a228 <USB_EPStartXfer+0x1478>
 800a21e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a222:	3b01      	subs	r3, #1
 800a224:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a228:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	029b      	lsls	r3, r3, #10
 800a230:	b29b      	uxth	r3, r3
 800a232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a240:	801a      	strh	r2, [r3, #0]
 800a242:	e3ad      	b.n	800a9a0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	78db      	ldrb	r3, [r3, #3]
 800a250:	2b02      	cmp	r3, #2
 800a252:	f040 8200 	bne.w	800a656 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a25a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	785b      	ldrb	r3, [r3, #1]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f040 8091 	bne.w	800a38a <USB_EPStartXfer+0x15da>
 800a268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a26c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a27a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a284:	b29b      	uxth	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a28c:	4413      	add	r3, r2
 800a28e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	011a      	lsls	r2, r3, #4
 800a2a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a2aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d116      	bne.n	800a2ec <USB_EPStartXfer+0x153c>
 800a2be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2c2:	881b      	ldrh	r3, [r3, #0]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2d0:	801a      	strh	r2, [r3, #0]
 800a2d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2e8:	801a      	strh	r2, [r3, #0]
 800a2ea:	e083      	b.n	800a3f4 <USB_EPStartXfer+0x1644>
 800a2ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	2b3e      	cmp	r3, #62	; 0x3e
 800a2fa:	d820      	bhi.n	800a33e <USB_EPStartXfer+0x158e>
 800a2fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	085b      	lsrs	r3, r3, #1
 800a30a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a30e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d004      	beq.n	800a32c <USB_EPStartXfer+0x157c>
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a326:	3301      	adds	r3, #1
 800a328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a330:	b29b      	uxth	r3, r3
 800a332:	029b      	lsls	r3, r3, #10
 800a334:	b29a      	uxth	r2, r3
 800a336:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a33a:	801a      	strh	r2, [r3, #0]
 800a33c:	e05a      	b.n	800a3f4 <USB_EPStartXfer+0x1644>
 800a33e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a342:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	095b      	lsrs	r3, r3, #5
 800a34c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a354:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	f003 031f 	and.w	r3, r3, #31
 800a360:	2b00      	cmp	r3, #0
 800a362:	d104      	bne.n	800a36e <USB_EPStartXfer+0x15be>
 800a364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a368:	3b01      	subs	r3, #1
 800a36a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a372:	b29b      	uxth	r3, r3
 800a374:	029b      	lsls	r3, r3, #10
 800a376:	b29b      	uxth	r3, r3
 800a378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a37c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a380:	b29a      	uxth	r2, r3
 800a382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a386:	801a      	strh	r2, [r3, #0]
 800a388:	e034      	b.n	800a3f4 <USB_EPStartXfer+0x1644>
 800a38a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a38e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d12c      	bne.n	800a3f4 <USB_EPStartXfer+0x1644>
 800a39a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a3a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3be:	4413      	add	r3, r2
 800a3c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a3c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	011a      	lsls	r2, r3, #4
 800a3d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a3f2:	801a      	strh	r2, [r3, #0]
 800a3f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f040 8091 	bne.w	800a536 <USB_EPStartXfer+0x1786>
 800a414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a418:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a430:	b29b      	uxth	r3, r3
 800a432:	461a      	mov	r2, r3
 800a434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a438:	4413      	add	r3, r2
 800a43a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a43e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	011a      	lsls	r2, r3, #4
 800a44c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a450:	4413      	add	r3, r2
 800a452:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a456:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a45a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a45e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d116      	bne.n	800a498 <USB_EPStartXfer+0x16e8>
 800a46a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	b29b      	uxth	r3, r3
 800a472:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a476:	b29a      	uxth	r2, r3
 800a478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a47c:	801a      	strh	r2, [r3, #0]
 800a47e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	b29b      	uxth	r3, r3
 800a486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a48a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a48e:	b29a      	uxth	r2, r3
 800a490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a494:	801a      	strh	r2, [r3, #0]
 800a496:	e07c      	b.n	800a592 <USB_EPStartXfer+0x17e2>
 800a498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a49c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	2b3e      	cmp	r3, #62	; 0x3e
 800a4a6:	d820      	bhi.n	800a4ea <USB_EPStartXfer+0x173a>
 800a4a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	085b      	lsrs	r3, r3, #1
 800a4b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d004      	beq.n	800a4d8 <USB_EPStartXfer+0x1728>
 800a4ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	029b      	lsls	r3, r3, #10
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4e6:	801a      	strh	r2, [r3, #0]
 800a4e8:	e053      	b.n	800a592 <USB_EPStartXfer+0x17e2>
 800a4ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	095b      	lsrs	r3, r3, #5
 800a4f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a4fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	f003 031f 	and.w	r3, r3, #31
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d104      	bne.n	800a51a <USB_EPStartXfer+0x176a>
 800a510:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a514:	3b01      	subs	r3, #1
 800a516:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a51a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a51e:	b29b      	uxth	r3, r3
 800a520:	029b      	lsls	r3, r3, #10
 800a522:	b29b      	uxth	r3, r3
 800a524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a532:	801a      	strh	r2, [r3, #0]
 800a534:	e02d      	b.n	800a592 <USB_EPStartXfer+0x17e2>
 800a536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	785b      	ldrb	r3, [r3, #1]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d125      	bne.n	800a592 <USB_EPStartXfer+0x17e2>
 800a546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a54a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a554:	b29b      	uxth	r3, r3
 800a556:	461a      	mov	r2, r3
 800a558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a55c:	4413      	add	r3, r2
 800a55e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	011a      	lsls	r2, r3, #4
 800a570:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a574:	4413      	add	r3, r2
 800a576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a57a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a57e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a590:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 81fe 	beq.w	800a9a0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a5a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	4413      	add	r3, r2
 800a5be:	881b      	ldrh	r3, [r3, #0]
 800a5c0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <USB_EPStartXfer+0x182c>
 800a5d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10d      	bne.n	800a5f8 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f040 81db 	bne.w	800a9a0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800a5ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f040 81d4 	bne.w	800a9a0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a5f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29b      	uxth	r3, r3
 800a616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a61a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a61e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800a622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	441a      	add	r2, r3
 800a63c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800a640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a64c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a650:	b29b      	uxth	r3, r3
 800a652:	8013      	strh	r3, [r2, #0]
 800a654:	e1a4      	b.n	800a9a0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a65a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	78db      	ldrb	r3, [r3, #3]
 800a662:	2b01      	cmp	r3, #1
 800a664:	f040 819a 	bne.w	800a99c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a66c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	699a      	ldr	r2, [r3, #24]
 800a674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	429a      	cmp	r2, r3
 800a682:	d917      	bls.n	800a6b4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800a684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	691b      	ldr	r3, [r3, #16]
 800a690:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800a694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	699a      	ldr	r2, [r3, #24]
 800a6a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6a4:	1ad2      	subs	r2, r2, r3
 800a6a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	619a      	str	r2, [r3, #24]
 800a6b2:	e00e      	b.n	800a6d2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800a6b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800a6c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a6d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	785b      	ldrb	r3, [r3, #1]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d178      	bne.n	800a7d4 <USB_EPStartXfer+0x1a24>
 800a6e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a706:	4413      	add	r3, r2
 800a708:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a70c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	011a      	lsls	r2, r3, #4
 800a71a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a71e:	4413      	add	r3, r2
 800a720:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a724:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d116      	bne.n	800a75e <USB_EPStartXfer+0x19ae>
 800a730:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a734:	881b      	ldrh	r3, [r3, #0]
 800a736:	b29b      	uxth	r3, r3
 800a738:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a742:	801a      	strh	r2, [r3, #0]
 800a744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a754:	b29a      	uxth	r2, r3
 800a756:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a75a:	801a      	strh	r2, [r3, #0]
 800a75c:	e06b      	b.n	800a836 <USB_EPStartXfer+0x1a86>
 800a75e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a762:	2b3e      	cmp	r3, #62	; 0x3e
 800a764:	d818      	bhi.n	800a798 <USB_EPStartXfer+0x19e8>
 800a766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a76a:	085b      	lsrs	r3, r3, #1
 800a76c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d004      	beq.n	800a786 <USB_EPStartXfer+0x19d6>
 800a77c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a780:	3301      	adds	r3, #1
 800a782:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	029b      	lsls	r3, r3, #10
 800a78e:	b29a      	uxth	r2, r3
 800a790:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a794:	801a      	strh	r2, [r3, #0]
 800a796:	e04e      	b.n	800a836 <USB_EPStartXfer+0x1a86>
 800a798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a79c:	095b      	lsrs	r3, r3, #5
 800a79e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a7a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7a6:	f003 031f 	and.w	r3, r3, #31
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d104      	bne.n	800a7b8 <USB_EPStartXfer+0x1a08>
 800a7ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a7b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	029b      	lsls	r3, r3, #10
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7d0:	801a      	strh	r2, [r3, #0]
 800a7d2:	e030      	b.n	800a836 <USB_EPStartXfer+0x1a86>
 800a7d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d128      	bne.n	800a836 <USB_EPStartXfer+0x1a86>
 800a7e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a7f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a800:	b29b      	uxth	r3, r3
 800a802:	461a      	mov	r2, r3
 800a804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a808:	4413      	add	r3, r2
 800a80a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a80e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	011a      	lsls	r2, r3, #4
 800a81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a820:	4413      	add	r3, r2
 800a822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a826:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a82a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a82e:	b29a      	uxth	r2, r3
 800a830:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a834:	801a      	strh	r2, [r3, #0]
 800a836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a83a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	785b      	ldrb	r3, [r3, #1]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d178      	bne.n	800a946 <USB_EPStartXfer+0x1b96>
 800a854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a858:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a870:	b29b      	uxth	r3, r3
 800a872:	461a      	mov	r2, r3
 800a874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a878:	4413      	add	r3, r2
 800a87a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a87e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	011a      	lsls	r2, r3, #4
 800a88c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a890:	4413      	add	r3, r2
 800a892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a89a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d116      	bne.n	800a8d0 <USB_EPStartXfer+0x1b20>
 800a8a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8b4:	801a      	strh	r2, [r3, #0]
 800a8b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8c6:	b29a      	uxth	r2, r3
 800a8c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8cc:	801a      	strh	r2, [r3, #0]
 800a8ce:	e067      	b.n	800a9a0 <USB_EPStartXfer+0x1bf0>
 800a8d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8d4:	2b3e      	cmp	r3, #62	; 0x3e
 800a8d6:	d818      	bhi.n	800a90a <USB_EPStartXfer+0x1b5a>
 800a8d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8dc:	085b      	lsrs	r3, r3, #1
 800a8de:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d004      	beq.n	800a8f8 <USB_EPStartXfer+0x1b48>
 800a8ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a8f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	029b      	lsls	r3, r3, #10
 800a900:	b29a      	uxth	r2, r3
 800a902:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a906:	801a      	strh	r2, [r3, #0]
 800a908:	e04a      	b.n	800a9a0 <USB_EPStartXfer+0x1bf0>
 800a90a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a90e:	095b      	lsrs	r3, r3, #5
 800a910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a918:	f003 031f 	and.w	r3, r3, #31
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d104      	bne.n	800a92a <USB_EPStartXfer+0x1b7a>
 800a920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a924:	3b01      	subs	r3, #1
 800a926:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a92a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a92e:	b29b      	uxth	r3, r3
 800a930:	029b      	lsls	r3, r3, #10
 800a932:	b29b      	uxth	r3, r3
 800a934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a942:	801a      	strh	r2, [r3, #0]
 800a944:	e02c      	b.n	800a9a0 <USB_EPStartXfer+0x1bf0>
 800a946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a94a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	785b      	ldrb	r3, [r3, #1]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d124      	bne.n	800a9a0 <USB_EPStartXfer+0x1bf0>
 800a956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a95a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a964:	b29b      	uxth	r3, r3
 800a966:	461a      	mov	r2, r3
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96c:	4413      	add	r3, r2
 800a96e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	011a      	lsls	r2, r3, #4
 800a980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a984:	4413      	add	r3, r2
 800a986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a98a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a98e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a992:	b29a      	uxth	r2, r3
 800a994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a998:	801a      	strh	r2, [r3, #0]
 800a99a:	e001      	b.n	800a9a0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e03a      	b.n	800aa16 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9c6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9ca:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9d6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800a9da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a9de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800a9e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	441a      	add	r2, r3
 800a9fc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800aa00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d020      	beq.n	800aa74 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa48:	81bb      	strh	r3, [r7, #12]
 800aa4a:	89bb      	ldrh	r3, [r7, #12]
 800aa4c:	f083 0310 	eor.w	r3, r3, #16
 800aa50:	81bb      	strh	r3, [r7, #12]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	441a      	add	r2, r3
 800aa5c:	89bb      	ldrh	r3, [r7, #12]
 800aa5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	8013      	strh	r3, [r2, #0]
 800aa72:	e01f      	b.n	800aab4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4413      	add	r3, r2
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8a:	81fb      	strh	r3, [r7, #14]
 800aa8c:	89fb      	ldrh	r3, [r7, #14]
 800aa8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa92:	81fb      	strh	r3, [r7, #14]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	781b      	ldrb	r3, [r3, #0]
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	441a      	add	r2, r3
 800aa9e:	89fb      	ldrh	r3, [r7, #14]
 800aaa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aaa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bc80      	pop	{r7}
 800aabe:	4770      	bx	lr

0800aac0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	7b1b      	ldrb	r3, [r3, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f040 809d 	bne.w	800ac0e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d04c      	beq.n	800ab76 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	881b      	ldrh	r3, [r3, #0]
 800aae8:	823b      	strh	r3, [r7, #16]
 800aaea:	8a3b      	ldrh	r3, [r7, #16]
 800aaec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d01b      	beq.n	800ab2c <USB_EPClearStall+0x6c>
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab0a:	81fb      	strh	r3, [r7, #14]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	441a      	add	r2, r3
 800ab16:	89fb      	ldrh	r3, [r7, #14]
 800ab18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	78db      	ldrb	r3, [r3, #3]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d06c      	beq.n	800ac0e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	881b      	ldrh	r3, [r3, #0]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab4a:	81bb      	strh	r3, [r7, #12]
 800ab4c:	89bb      	ldrh	r3, [r7, #12]
 800ab4e:	f083 0320 	eor.w	r3, r3, #32
 800ab52:	81bb      	strh	r3, [r7, #12]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	441a      	add	r2, r3
 800ab5e:	89bb      	ldrh	r3, [r7, #12]
 800ab60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	8013      	strh	r3, [r2, #0]
 800ab74:	e04b      	b.n	800ac0e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	82fb      	strh	r3, [r7, #22]
 800ab84:	8afb      	ldrh	r3, [r7, #22]
 800ab86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d01b      	beq.n	800abc6 <USB_EPClearStall+0x106>
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aba4:	82bb      	strh	r3, [r7, #20]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	441a      	add	r2, r3
 800abb0:	8abb      	ldrh	r3, [r7, #20]
 800abb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4413      	add	r3, r2
 800abd0:	881b      	ldrh	r3, [r3, #0]
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abdc:	827b      	strh	r3, [r7, #18]
 800abde:	8a7b      	ldrh	r3, [r7, #18]
 800abe0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abe4:	827b      	strh	r3, [r7, #18]
 800abe6:	8a7b      	ldrh	r3, [r7, #18]
 800abe8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800abec:	827b      	strh	r3, [r7, #18]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	441a      	add	r2, r3
 800abf8:	8a7b      	ldrh	r3, [r7, #18]
 800abfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bc80      	pop	{r7}
 800ac18:	4770      	bx	lr

0800ac1a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b083      	sub	sp, #12
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ac26:	78fb      	ldrb	r3, [r7, #3]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d103      	bne.n	800ac34 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2280      	movs	r2, #128	; 0x80
 800ac30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	370c      	adds	r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bc80      	pop	{r7}
 800ac3e:	4770      	bx	lr

0800ac40 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bc80      	pop	{r7}
 800ac52:	4770      	bx	lr

0800ac54 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc80      	pop	{r7}
 800ac66:	4770      	bx	lr

0800ac68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b085      	sub	sp, #20
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bc80      	pop	{r7}
 800ac84:	4770      	bx	lr

0800ac86 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b083      	sub	sp, #12
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bc80      	pop	{r7}
 800ac9a:	4770      	bx	lr

0800ac9c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b08d      	sub	sp, #52	; 0x34
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	4611      	mov	r1, r2
 800aca8:	461a      	mov	r2, r3
 800acaa:	460b      	mov	r3, r1
 800acac:	80fb      	strh	r3, [r7, #6]
 800acae:	4613      	mov	r3, r2
 800acb0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800acb2:	88bb      	ldrh	r3, [r7, #4]
 800acb4:	3301      	adds	r3, #1
 800acb6:	085b      	lsrs	r3, r3, #1
 800acb8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acc2:	88fb      	ldrh	r3, [r7, #6]
 800acc4:	005a      	lsls	r2, r3, #1
 800acc6:	69fb      	ldr	r3, [r7, #28]
 800acc8:	4413      	add	r3, r2
 800acca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acce:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acd4:	e01e      	b.n	800ad14 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800acd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	3301      	adds	r3, #1
 800ace0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	021b      	lsls	r3, r3, #8
 800acea:	b29b      	uxth	r3, r3
 800acec:	461a      	mov	r2, r3
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	3302      	adds	r3, #2
 800ad00:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	3302      	adds	r3, #2
 800ad06:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	3b01      	subs	r3, #1
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1dd      	bne.n	800acd6 <USB_WritePMA+0x3a>
  }
}
 800ad1a:	bf00      	nop
 800ad1c:	bf00      	nop
 800ad1e:	3734      	adds	r7, #52	; 0x34
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bc80      	pop	{r7}
 800ad24:	4770      	bx	lr

0800ad26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b08b      	sub	sp, #44	; 0x2c
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	60b9      	str	r1, [r7, #8]
 800ad30:	4611      	mov	r1, r2
 800ad32:	461a      	mov	r2, r3
 800ad34:	460b      	mov	r3, r1
 800ad36:	80fb      	strh	r3, [r7, #6]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ad3c:	88bb      	ldrh	r3, [r7, #4]
 800ad3e:	085b      	lsrs	r3, r3, #1
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad4c:	88fb      	ldrh	r3, [r7, #6]
 800ad4e:	005a      	lsls	r2, r3, #1
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad58:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad5e:	e01b      	b.n	800ad98 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ad60:	6a3b      	ldr	r3, [r7, #32]
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	3302      	adds	r3, #2
 800ad6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	b2da      	uxtb	r2, r3
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	0a1b      	lsrs	r3, r3, #8
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	69fb      	ldr	r3, [r7, #28]
 800ad84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	3302      	adds	r3, #2
 800ad90:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	3b01      	subs	r3, #1
 800ad96:	627b      	str	r3, [r7, #36]	; 0x24
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1e0      	bne.n	800ad60 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800ad9e:	88bb      	ldrh	r3, [r7, #4]
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d007      	beq.n	800adba <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	b29b      	uxth	r3, r3
 800adb0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	701a      	strb	r2, [r3, #0]
  }
}
 800adba:	bf00      	nop
 800adbc:	372c      	adds	r7, #44	; 0x2c
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bc80      	pop	{r7}
 800adc2:	4770      	bx	lr

0800adc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	460b      	mov	r3, r1
 800adce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	7c1b      	ldrb	r3, [r3, #16]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d115      	bne.n	800ae08 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800addc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ade0:	2202      	movs	r2, #2
 800ade2:	2181      	movs	r1, #129	; 0x81
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f001 fe30 	bl	800ca4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adf4:	2202      	movs	r2, #2
 800adf6:	2101      	movs	r1, #1
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fe26 	bl	800ca4a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ae06:	e012      	b.n	800ae2e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae08:	2340      	movs	r3, #64	; 0x40
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	2181      	movs	r1, #129	; 0x81
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f001 fe1b 	bl	800ca4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae1a:	2340      	movs	r3, #64	; 0x40
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	2101      	movs	r1, #1
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f001 fe12 	bl	800ca4a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae2e:	2308      	movs	r3, #8
 800ae30:	2203      	movs	r2, #3
 800ae32:	2182      	movs	r1, #130	; 0x82
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f001 fe08 	bl	800ca4a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae44:	f001 ff28 	bl	800cc98 <USBD_static_malloc>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d102      	bne.n	800ae60 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	73fb      	strb	r3, [r7, #15]
 800ae5e:	e026      	b.n	800aeae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae66:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	7c1b      	ldrb	r3, [r3, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d109      	bne.n	800ae9e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae94:	2101      	movs	r1, #1
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f001 fec8 	bl	800cc2c <USBD_LL_PrepareReceive>
 800ae9c:	e007      	b.n	800aeae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aea4:	2340      	movs	r3, #64	; 0x40
 800aea6:	2101      	movs	r1, #1
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f001 febf 	bl	800cc2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800aeae:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aec8:	2181      	movs	r1, #129	; 0x81
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f001 fde3 	bl	800ca96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aed6:	2101      	movs	r1, #1
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 fddc 	bl	800ca96 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aee6:	2182      	movs	r1, #130	; 0x82
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 fdd4 	bl	800ca96 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00e      	beq.n	800af1c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af0e:	4618      	mov	r0, r3
 800af10:	f001 fece 	bl	800ccb0 <USBD_static_free>
    pdev->pClassData = NULL;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b086      	sub	sp, #24
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
 800af2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800af38:	2300      	movs	r3, #0
 800af3a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d039      	beq.n	800afc4 <USBD_CDC_Setup+0x9e>
 800af50:	2b20      	cmp	r3, #32
 800af52:	d17f      	bne.n	800b054 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	88db      	ldrh	r3, [r3, #6]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d029      	beq.n	800afb0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	b25b      	sxtb	r3, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	da11      	bge.n	800af8a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800af72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af74:	683a      	ldr	r2, [r7, #0]
 800af76:	88d2      	ldrh	r2, [r2, #6]
 800af78:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800af7a:	6939      	ldr	r1, [r7, #16]
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	88db      	ldrh	r3, [r3, #6]
 800af80:	461a      	mov	r2, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f001 f9d9 	bl	800c33a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800af88:	e06b      	b.n	800b062 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	785a      	ldrb	r2, [r3, #1]
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	88db      	ldrh	r3, [r3, #6]
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800afa0:	6939      	ldr	r1, [r7, #16]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	88db      	ldrh	r3, [r3, #6]
 800afa6:	461a      	mov	r2, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f001 f9f4 	bl	800c396 <USBD_CtlPrepareRx>
      break;
 800afae:	e058      	b.n	800b062 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	7850      	ldrb	r0, [r2, #1]
 800afbc:	2200      	movs	r2, #0
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	4798      	blx	r3
      break;
 800afc2:	e04e      	b.n	800b062 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	785b      	ldrb	r3, [r3, #1]
 800afc8:	2b0b      	cmp	r3, #11
 800afca:	d02e      	beq.n	800b02a <USBD_CDC_Setup+0x104>
 800afcc:	2b0b      	cmp	r3, #11
 800afce:	dc38      	bgt.n	800b042 <USBD_CDC_Setup+0x11c>
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <USBD_CDC_Setup+0xb4>
 800afd4:	2b0a      	cmp	r3, #10
 800afd6:	d014      	beq.n	800b002 <USBD_CDC_Setup+0xdc>
 800afd8:	e033      	b.n	800b042 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d107      	bne.n	800aff4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800afe4:	f107 030c 	add.w	r3, r7, #12
 800afe8:	2202      	movs	r2, #2
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f001 f9a4 	bl	800c33a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aff2:	e02e      	b.n	800b052 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f001 f935 	bl	800c266 <USBD_CtlError>
            ret = USBD_FAIL;
 800affc:	2302      	movs	r3, #2
 800affe:	75fb      	strb	r3, [r7, #23]
          break;
 800b000:	e027      	b.n	800b052 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b008:	2b03      	cmp	r3, #3
 800b00a:	d107      	bne.n	800b01c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b00c:	f107 030f 	add.w	r3, r7, #15
 800b010:	2201      	movs	r2, #1
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f001 f990 	bl	800c33a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b01a:	e01a      	b.n	800b052 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f001 f921 	bl	800c266 <USBD_CtlError>
            ret = USBD_FAIL;
 800b024:	2302      	movs	r3, #2
 800b026:	75fb      	strb	r3, [r7, #23]
          break;
 800b028:	e013      	b.n	800b052 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b030:	2b03      	cmp	r3, #3
 800b032:	d00d      	beq.n	800b050 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 f915 	bl	800c266 <USBD_CtlError>
            ret = USBD_FAIL;
 800b03c:	2302      	movs	r3, #2
 800b03e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b040:	e006      	b.n	800b050 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 f90e 	bl	800c266 <USBD_CtlError>
          ret = USBD_FAIL;
 800b04a:	2302      	movs	r3, #2
 800b04c:	75fb      	strb	r3, [r7, #23]
          break;
 800b04e:	e000      	b.n	800b052 <USBD_CDC_Setup+0x12c>
          break;
 800b050:	bf00      	nop
      }
      break;
 800b052:	e006      	b.n	800b062 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 f905 	bl	800c266 <USBD_CtlError>
      ret = USBD_FAIL;
 800b05c:	2302      	movs	r3, #2
 800b05e:	75fb      	strb	r3, [r7, #23]
      break;
 800b060:	bf00      	nop
  }

  return ret;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	460b      	mov	r3, r1
 800b076:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b086:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d03a      	beq.n	800b108 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b092:	78fa      	ldrb	r2, [r7, #3]
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	331c      	adds	r3, #28
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d029      	beq.n	800b0fc <USBD_CDC_DataIn+0x90>
 800b0a8:	78fa      	ldrb	r2, [r7, #3]
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	440b      	add	r3, r1
 800b0b6:	331c      	adds	r3, #28
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	78f9      	ldrb	r1, [r7, #3]
 800b0bc:	68b8      	ldr	r0, [r7, #8]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	00db      	lsls	r3, r3, #3
 800b0c6:	4403      	add	r3, r0
 800b0c8:	3338      	adds	r3, #56	; 0x38
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0d0:	fb01 f303 	mul.w	r3, r1, r3
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d110      	bne.n	800b0fc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b0da:	78fa      	ldrb	r2, [r7, #3]
 800b0dc:	6879      	ldr	r1, [r7, #4]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	331c      	adds	r3, #28
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0ee:	78f9      	ldrb	r1, [r7, #3]
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f001 fd76 	bl	800cbe6 <USBD_LL_Transmit>
 800b0fa:	e003      	b.n	800b104 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b104:	2300      	movs	r3, #0
 800b106:	e000      	b.n	800b10a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b108:	2302      	movs	r3, #2
  }
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b124:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b126:	78fb      	ldrb	r3, [r7, #3]
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 fda1 	bl	800cc72 <USBD_LL_GetRxDataSize>
 800b130:	4602      	mov	r2, r0
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00d      	beq.n	800b15e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b148:	68db      	ldr	r3, [r3, #12]
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b156:	4611      	mov	r1, r2
 800b158:	4798      	blx	r3

    return USBD_OK;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e000      	b.n	800b160 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b15e:	2302      	movs	r3, #2
  }
}
 800b160:	4618      	mov	r0, r3
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b176:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d015      	beq.n	800b1ae <USBD_CDC_EP0_RxReady+0x46>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b188:	2bff      	cmp	r3, #255	; 0xff
 800b18a:	d010      	beq.n	800b1ae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b19a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1a2:	b292      	uxth	r2, r2
 800b1a4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	22ff      	movs	r2, #255	; 0xff
 800b1aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2243      	movs	r2, #67	; 0x43
 800b1c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b1c6:	4b03      	ldr	r3, [pc, #12]	; (800b1d4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bc80      	pop	{r7}
 800b1d0:	4770      	bx	lr
 800b1d2:	bf00      	nop
 800b1d4:	20000894 	.word	0x20000894

0800b1d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2243      	movs	r2, #67	; 0x43
 800b1e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b1e6:	4b03      	ldr	r3, [pc, #12]	; (800b1f4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bc80      	pop	{r7}
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	20000850 	.word	0x20000850

0800b1f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2243      	movs	r2, #67	; 0x43
 800b204:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b206:	4b03      	ldr	r3, [pc, #12]	; (800b214 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b208:	4618      	mov	r0, r3
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bc80      	pop	{r7}
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	200008d8 	.word	0x200008d8

0800b218 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	220a      	movs	r2, #10
 800b224:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b226:	4b03      	ldr	r3, [pc, #12]	; (800b234 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bc80      	pop	{r7}
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	2000080c 	.word	0x2000080c

0800b238 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b242:	2302      	movs	r3, #2
 800b244:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d005      	beq.n	800b258 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b254:	2300      	movs	r3, #0
 800b256:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b258:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	bc80      	pop	{r7}
 800b262:	4770      	bx	lr

0800b264 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b264:	b480      	push	{r7}
 800b266:	b087      	sub	sp, #28
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	4613      	mov	r3, r2
 800b270:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b278:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b282:	88fa      	ldrh	r2, [r7, #6]
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	371c      	adds	r7, #28
 800b290:	46bd      	mov	sp, r7
 800b292:	bc80      	pop	{r7}
 800b294:	4770      	bx	lr

0800b296 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b296:	b480      	push	{r7}
 800b298:	b085      	sub	sp, #20
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2a6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bc80      	pop	{r7}
 800b2ba:	4770      	bx	lr

0800b2bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2ca:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d017      	beq.n	800b306 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	7c1b      	ldrb	r3, [r3, #16]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d109      	bne.n	800b2f2 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2e8:	2101      	movs	r1, #1
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fc9e 	bl	800cc2c <USBD_LL_PrepareReceive>
 800b2f0:	e007      	b.n	800b302 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2f8:	2340      	movs	r3, #64	; 0x40
 800b2fa:	2101      	movs	r1, #1
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f001 fc95 	bl	800cc2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	e000      	b.n	800b308 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b306:	2302      	movs	r3, #2
  }
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	4613      	mov	r3, r2
 800b31c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b324:	2302      	movs	r3, #2
 800b326:	e01a      	b.n	800b35e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	79fa      	ldrb	r2, [r7, #7]
 800b354:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f001 fb02 	bl	800c960 <USBD_LL_Init>

  return USBD_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b366:	b480      	push	{r7}
 800b368:	b085      	sub	sp, #20
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
 800b36e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d006      	beq.n	800b388 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
 800b386:	e001      	b.n	800b38c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b388:	2302      	movs	r3, #2
 800b38a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	bc80      	pop	{r7}
 800b396:	4770      	bx	lr

0800b398 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 fb37 	bl	800ca14 <USBD_LL_Start>

  return USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bc80      	pop	{r7}
 800b3c2:	4770      	bx	lr

0800b3c4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00c      	beq.n	800b3f8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	78fa      	ldrb	r2, [r7, #3]
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	4798      	blx	r3
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d101      	bne.n	800b3f8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b082      	sub	sp, #8
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	460b      	mov	r3, r1
 800b40c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	78fa      	ldrb	r2, [r7, #3]
 800b418:	4611      	mov	r1, r2
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	4798      	blx	r3

  return USBD_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 fed7 	bl	800c1ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b44e:	461a      	mov	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b45c:	f003 031f 	and.w	r3, r3, #31
 800b460:	2b02      	cmp	r3, #2
 800b462:	d016      	beq.n	800b492 <USBD_LL_SetupStage+0x6a>
 800b464:	2b02      	cmp	r3, #2
 800b466:	d81c      	bhi.n	800b4a2 <USBD_LL_SetupStage+0x7a>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <USBD_LL_SetupStage+0x4a>
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d008      	beq.n	800b482 <USBD_LL_SetupStage+0x5a>
 800b470:	e017      	b.n	800b4a2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b478:	4619      	mov	r1, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f9ca 	bl	800b814 <USBD_StdDevReq>
      break;
 800b480:	e01a      	b.n	800b4b8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b488:	4619      	mov	r1, r3
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fa2c 	bl	800b8e8 <USBD_StdItfReq>
      break;
 800b490:	e012      	b.n	800b4b8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa6c 	bl	800b978 <USBD_StdEPReq>
      break;
 800b4a0:	e00a      	b.n	800b4b8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b4a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f001 fb0f 	bl	800cad4 <USBD_LL_StallEP>
      break;
 800b4b6:	bf00      	nop
  }

  return USBD_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b086      	sub	sp, #24
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b4d0:	7afb      	ldrb	r3, [r7, #11]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d14b      	bne.n	800b56e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b4dc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4e4:	2b03      	cmp	r3, #3
 800b4e6:	d134      	bne.n	800b552 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	68da      	ldr	r2, [r3, #12]
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d919      	bls.n	800b528 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	68da      	ldr	r2, [r3, #12]
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	1ad2      	subs	r2, r2, r3
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	68da      	ldr	r2, [r3, #12]
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d203      	bcs.n	800b516 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b512:	b29b      	uxth	r3, r3
 800b514:	e002      	b.n	800b51c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	461a      	mov	r2, r3
 800b51e:	6879      	ldr	r1, [r7, #4]
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f000 ff56 	bl	800c3d2 <USBD_CtlContinueRx>
 800b526:	e038      	b.n	800b59a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00a      	beq.n	800b54a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	d105      	bne.n	800b54a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b544:	691b      	ldr	r3, [r3, #16]
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f000 ff53 	bl	800c3f6 <USBD_CtlSendStatus>
 800b550:	e023      	b.n	800b59a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b558:	2b05      	cmp	r3, #5
 800b55a:	d11e      	bne.n	800b59a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b564:	2100      	movs	r1, #0
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f001 fab4 	bl	800cad4 <USBD_LL_StallEP>
 800b56c:	e015      	b.n	800b59a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00d      	beq.n	800b596 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b580:	2b03      	cmp	r3, #3
 800b582:	d108      	bne.n	800b596 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	7afa      	ldrb	r2, [r7, #11]
 800b58e:	4611      	mov	r1, r2
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	4798      	blx	r3
 800b594:	e001      	b.n	800b59a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b596:	2302      	movs	r3, #2
 800b598:	e000      	b.n	800b59c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b5b2:	7afb      	ldrb	r3, [r7, #11]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d17f      	bne.n	800b6b8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3314      	adds	r3, #20
 800b5bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d15c      	bne.n	800b682 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	68da      	ldr	r2, [r3, #12]
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d915      	bls.n	800b600 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	68da      	ldr	r2, [r3, #12]
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	1ad2      	subs	r2, r2, r3
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	6879      	ldr	r1, [r7, #4]
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f000 fec0 	bl	800c372 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f001 fb17 	bl	800cc2c <USBD_LL_PrepareReceive>
 800b5fe:	e04e      	b.n	800b69e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	6912      	ldr	r2, [r2, #16]
 800b608:	fbb3 f1f2 	udiv	r1, r3, r2
 800b60c:	fb01 f202 	mul.w	r2, r1, r2
 800b610:	1a9b      	subs	r3, r3, r2
 800b612:	2b00      	cmp	r3, #0
 800b614:	d11c      	bne.n	800b650 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	689a      	ldr	r2, [r3, #8]
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b61e:	429a      	cmp	r2, r3
 800b620:	d316      	bcc.n	800b650 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d20f      	bcs.n	800b650 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b630:	2200      	movs	r2, #0
 800b632:	2100      	movs	r1, #0
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f000 fe9c 	bl	800c372 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b642:	2300      	movs	r3, #0
 800b644:	2200      	movs	r2, #0
 800b646:	2100      	movs	r1, #0
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f001 faef 	bl	800cc2c <USBD_LL_PrepareReceive>
 800b64e:	e026      	b.n	800b69e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00a      	beq.n	800b672 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b662:	2b03      	cmp	r3, #3
 800b664:	d105      	bne.n	800b672 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b672:	2180      	movs	r1, #128	; 0x80
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f001 fa2d 	bl	800cad4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 fece 	bl	800c41c <USBD_CtlReceiveStatus>
 800b680:	e00d      	b.n	800b69e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b688:	2b04      	cmp	r3, #4
 800b68a:	d004      	beq.n	800b696 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b692:	2b00      	cmp	r3, #0
 800b694:	d103      	bne.n	800b69e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b696:	2180      	movs	r1, #128	; 0x80
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f001 fa1b 	bl	800cad4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d11d      	bne.n	800b6e4 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff fe81 	bl	800b3b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b6b6:	e015      	b.n	800b6e4 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00d      	beq.n	800b6e0 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b6ca:	2b03      	cmp	r3, #3
 800b6cc:	d108      	bne.n	800b6e0 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	7afa      	ldrb	r2, [r7, #11]
 800b6d8:	4611      	mov	r1, r2
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	4798      	blx	r3
 800b6de:	e001      	b.n	800b6e4 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	e000      	b.n	800b6e6 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6f6:	2340      	movs	r3, #64	; 0x40
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f001 f9a4 	bl	800ca4a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2240      	movs	r2, #64	; 0x40
 800b70e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b712:	2340      	movs	r3, #64	; 0x40
 800b714:	2200      	movs	r2, #0
 800b716:	2180      	movs	r1, #128	; 0x80
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f001 f996 	bl	800ca4a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2201      	movs	r2, #1
 800b722:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2240      	movs	r2, #64	; 0x40
 800b728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d009      	beq.n	800b766 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6852      	ldr	r2, [r2, #4]
 800b75e:	b2d2      	uxtb	r2, r2
 800b760:	4611      	mov	r1, r2
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	4798      	blx	r3
  }

  return USBD_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	460b      	mov	r3, r1
 800b77a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	78fa      	ldrb	r2, [r7, #3]
 800b780:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	bc80      	pop	{r7}
 800b78c:	4770      	bx	lr

0800b78e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b78e:	b480      	push	{r7}
 800b790:	b083      	sub	sp, #12
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2204      	movs	r2, #4
 800b7a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bc80      	pop	{r7}
 800b7b4:	4770      	bx	lr

0800b7b6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b083      	sub	sp, #12
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c4:	2b04      	cmp	r3, #4
 800b7c6:	d105      	bne.n	800b7d4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bc80      	pop	{r7}
 800b7de:	4770      	bx	lr

0800b7e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d10b      	bne.n	800b80a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d005      	beq.n	800b80a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b82a:	2b40      	cmp	r3, #64	; 0x40
 800b82c:	d005      	beq.n	800b83a <USBD_StdDevReq+0x26>
 800b82e:	2b40      	cmp	r3, #64	; 0x40
 800b830:	d84f      	bhi.n	800b8d2 <USBD_StdDevReq+0xbe>
 800b832:	2b00      	cmp	r3, #0
 800b834:	d009      	beq.n	800b84a <USBD_StdDevReq+0x36>
 800b836:	2b20      	cmp	r3, #32
 800b838:	d14b      	bne.n	800b8d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	4798      	blx	r3
      break;
 800b848:	e048      	b.n	800b8dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	785b      	ldrb	r3, [r3, #1]
 800b84e:	2b09      	cmp	r3, #9
 800b850:	d839      	bhi.n	800b8c6 <USBD_StdDevReq+0xb2>
 800b852:	a201      	add	r2, pc, #4	; (adr r2, 800b858 <USBD_StdDevReq+0x44>)
 800b854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b858:	0800b8a9 	.word	0x0800b8a9
 800b85c:	0800b8bd 	.word	0x0800b8bd
 800b860:	0800b8c7 	.word	0x0800b8c7
 800b864:	0800b8b3 	.word	0x0800b8b3
 800b868:	0800b8c7 	.word	0x0800b8c7
 800b86c:	0800b88b 	.word	0x0800b88b
 800b870:	0800b881 	.word	0x0800b881
 800b874:	0800b8c7 	.word	0x0800b8c7
 800b878:	0800b89f 	.word	0x0800b89f
 800b87c:	0800b895 	.word	0x0800b895
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f9dc 	bl	800bc40 <USBD_GetDescriptor>
          break;
 800b888:	e022      	b.n	800b8d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f000 fb3f 	bl	800bf10 <USBD_SetAddress>
          break;
 800b892:	e01d      	b.n	800b8d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fb7e 	bl	800bf98 <USBD_SetConfig>
          break;
 800b89c:	e018      	b.n	800b8d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b89e:	6839      	ldr	r1, [r7, #0]
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fc07 	bl	800c0b4 <USBD_GetConfig>
          break;
 800b8a6:	e013      	b.n	800b8d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fc37 	bl	800c11e <USBD_GetStatus>
          break;
 800b8b0:	e00e      	b.n	800b8d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8b2:	6839      	ldr	r1, [r7, #0]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fc65 	bl	800c184 <USBD_SetFeature>
          break;
 800b8ba:	e009      	b.n	800b8d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8bc:	6839      	ldr	r1, [r7, #0]
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fc74 	bl	800c1ac <USBD_ClrFeature>
          break;
 800b8c4:	e004      	b.n	800b8d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 fccc 	bl	800c266 <USBD_CtlError>
          break;
 800b8ce:	bf00      	nop
      }
      break;
 800b8d0:	e004      	b.n	800b8dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fcc6 	bl	800c266 <USBD_CtlError>
      break;
 800b8da:	bf00      	nop
  }

  return ret;
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3710      	adds	r7, #16
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop

0800b8e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8fe:	2b40      	cmp	r3, #64	; 0x40
 800b900:	d005      	beq.n	800b90e <USBD_StdItfReq+0x26>
 800b902:	2b40      	cmp	r3, #64	; 0x40
 800b904:	d82e      	bhi.n	800b964 <USBD_StdItfReq+0x7c>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <USBD_StdItfReq+0x26>
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	d12a      	bne.n	800b964 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b914:	3b01      	subs	r3, #1
 800b916:	2b02      	cmp	r3, #2
 800b918:	d81d      	bhi.n	800b956 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	889b      	ldrh	r3, [r3, #4]
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b01      	cmp	r3, #1
 800b922:	d813      	bhi.n	800b94c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	4798      	blx	r3
 800b932:	4603      	mov	r3, r0
 800b934:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	88db      	ldrh	r3, [r3, #6]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d110      	bne.n	800b960 <USBD_StdItfReq+0x78>
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d10d      	bne.n	800b960 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fd56 	bl	800c3f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b94a:	e009      	b.n	800b960 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fc89 	bl	800c266 <USBD_CtlError>
          break;
 800b954:	e004      	b.n	800b960 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800b956:	6839      	ldr	r1, [r7, #0]
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fc84 	bl	800c266 <USBD_CtlError>
          break;
 800b95e:	e000      	b.n	800b962 <USBD_StdItfReq+0x7a>
          break;
 800b960:	bf00      	nop
      }
      break;
 800b962:	e004      	b.n	800b96e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fc7d 	bl	800c266 <USBD_CtlError>
      break;
 800b96c:	bf00      	nop
  }

  return USBD_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	889b      	ldrh	r3, [r3, #4]
 800b98a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b994:	2b40      	cmp	r3, #64	; 0x40
 800b996:	d007      	beq.n	800b9a8 <USBD_StdEPReq+0x30>
 800b998:	2b40      	cmp	r3, #64	; 0x40
 800b99a:	f200 8146 	bhi.w	800bc2a <USBD_StdEPReq+0x2b2>
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00a      	beq.n	800b9b8 <USBD_StdEPReq+0x40>
 800b9a2:	2b20      	cmp	r3, #32
 800b9a4:	f040 8141 	bne.w	800bc2a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	4798      	blx	r3
      break;
 800b9b6:	e13d      	b.n	800bc34 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	d10a      	bne.n	800b9da <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	4798      	blx	r3
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	e12d      	b.n	800bc36 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	785b      	ldrb	r3, [r3, #1]
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d007      	beq.n	800b9f2 <USBD_StdEPReq+0x7a>
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	f300 811b 	bgt.w	800bc1e <USBD_StdEPReq+0x2a6>
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d072      	beq.n	800bad2 <USBD_StdEPReq+0x15a>
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d03a      	beq.n	800ba66 <USBD_StdEPReq+0xee>
 800b9f0:	e115      	b.n	800bc1e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d002      	beq.n	800ba02 <USBD_StdEPReq+0x8a>
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	d015      	beq.n	800ba2c <USBD_StdEPReq+0xb4>
 800ba00:	e02b      	b.n	800ba5a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba02:	7bbb      	ldrb	r3, [r7, #14]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d00c      	beq.n	800ba22 <USBD_StdEPReq+0xaa>
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
 800ba0a:	2b80      	cmp	r3, #128	; 0x80
 800ba0c:	d009      	beq.n	800ba22 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ba0e:	7bbb      	ldrb	r3, [r7, #14]
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f001 f85e 	bl	800cad4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ba18:	2180      	movs	r1, #128	; 0x80
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f001 f85a 	bl	800cad4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba20:	e020      	b.n	800ba64 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 fc1e 	bl	800c266 <USBD_CtlError>
              break;
 800ba2a:	e01b      	b.n	800ba64 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	885b      	ldrh	r3, [r3, #2]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10e      	bne.n	800ba52 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d00b      	beq.n	800ba52 <USBD_StdEPReq+0xda>
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
 800ba3c:	2b80      	cmp	r3, #128	; 0x80
 800ba3e:	d008      	beq.n	800ba52 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	88db      	ldrh	r3, [r3, #6]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d104      	bne.n	800ba52 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ba48:	7bbb      	ldrb	r3, [r7, #14]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 f841 	bl	800cad4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fccf 	bl	800c3f6 <USBD_CtlSendStatus>

              break;
 800ba58:	e004      	b.n	800ba64 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fc02 	bl	800c266 <USBD_CtlError>
              break;
 800ba62:	bf00      	nop
          }
          break;
 800ba64:	e0e0      	b.n	800bc28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d002      	beq.n	800ba76 <USBD_StdEPReq+0xfe>
 800ba70:	2b03      	cmp	r3, #3
 800ba72:	d015      	beq.n	800baa0 <USBD_StdEPReq+0x128>
 800ba74:	e026      	b.n	800bac4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00c      	beq.n	800ba96 <USBD_StdEPReq+0x11e>
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	2b80      	cmp	r3, #128	; 0x80
 800ba80:	d009      	beq.n	800ba96 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ba82:	7bbb      	ldrb	r3, [r7, #14]
 800ba84:	4619      	mov	r1, r3
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f001 f824 	bl	800cad4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ba8c:	2180      	movs	r1, #128	; 0x80
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f001 f820 	bl	800cad4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba94:	e01c      	b.n	800bad0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fbe4 	bl	800c266 <USBD_CtlError>
              break;
 800ba9e:	e017      	b.n	800bad0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	885b      	ldrh	r3, [r3, #2]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d112      	bne.n	800bace <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
 800baaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d004      	beq.n	800babc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bab2:	7bbb      	ldrb	r3, [r7, #14]
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 f82b 	bl	800cb12 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fc9a 	bl	800c3f6 <USBD_CtlSendStatus>
              }
              break;
 800bac2:	e004      	b.n	800bace <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bac4:	6839      	ldr	r1, [r7, #0]
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 fbcd 	bl	800c266 <USBD_CtlError>
              break;
 800bacc:	e000      	b.n	800bad0 <USBD_StdEPReq+0x158>
              break;
 800bace:	bf00      	nop
          }
          break;
 800bad0:	e0aa      	b.n	800bc28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d002      	beq.n	800bae2 <USBD_StdEPReq+0x16a>
 800badc:	2b03      	cmp	r3, #3
 800bade:	d032      	beq.n	800bb46 <USBD_StdEPReq+0x1ce>
 800bae0:	e097      	b.n	800bc12 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bae2:	7bbb      	ldrb	r3, [r7, #14]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <USBD_StdEPReq+0x180>
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
 800baea:	2b80      	cmp	r3, #128	; 0x80
 800baec:	d004      	beq.n	800baf8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800baee:	6839      	ldr	r1, [r7, #0]
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fbb8 	bl	800c266 <USBD_CtlError>
                break;
 800baf6:	e091      	b.n	800bc1c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	da0b      	bge.n	800bb18 <USBD_StdEPReq+0x1a0>
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	3310      	adds	r3, #16
 800bb10:	687a      	ldr	r2, [r7, #4]
 800bb12:	4413      	add	r3, r2
 800bb14:	3304      	adds	r3, #4
 800bb16:	e00b      	b.n	800bb30 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	3304      	adds	r3, #4
 800bb30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fbfb 	bl	800c33a <USBD_CtlSendData>
              break;
 800bb44:	e06a      	b.n	800bc1c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	da11      	bge.n	800bb72 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb4e:	7bbb      	ldrb	r3, [r7, #14]
 800bb50:	f003 020f 	and.w	r2, r3, #15
 800bb54:	6879      	ldr	r1, [r7, #4]
 800bb56:	4613      	mov	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	4413      	add	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	440b      	add	r3, r1
 800bb60:	3318      	adds	r3, #24
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d117      	bne.n	800bb98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fb7b 	bl	800c266 <USBD_CtlError>
                  break;
 800bb70:	e054      	b.n	800bc1c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	f003 020f 	and.w	r2, r3, #15
 800bb78:	6879      	ldr	r1, [r7, #4]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	440b      	add	r3, r1
 800bb84:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d104      	bne.n	800bb98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fb68 	bl	800c266 <USBD_CtlError>
                  break;
 800bb96:	e041      	b.n	800bc1c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	da0b      	bge.n	800bbb8 <USBD_StdEPReq+0x240>
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bba6:	4613      	mov	r3, r2
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	4413      	add	r3, r2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	3310      	adds	r3, #16
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	e00b      	b.n	800bbd0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	4413      	add	r3, r2
 800bbce:	3304      	adds	r3, #4
 800bbd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <USBD_StdEPReq+0x266>
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
 800bbda:	2b80      	cmp	r3, #128	; 0x80
 800bbdc:	d103      	bne.n	800bbe6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	e00e      	b.n	800bc04 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 ffb0 	bl	800cb50 <USBD_LL_IsStallEP>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d003      	beq.n	800bbfe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	601a      	str	r2, [r3, #0]
 800bbfc:	e002      	b.n	800bc04 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2200      	movs	r2, #0
 800bc02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	2202      	movs	r2, #2
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 fb95 	bl	800c33a <USBD_CtlSendData>
              break;
 800bc10:	e004      	b.n	800bc1c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fb26 	bl	800c266 <USBD_CtlError>
              break;
 800bc1a:	bf00      	nop
          }
          break;
 800bc1c:	e004      	b.n	800bc28 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fb20 	bl	800c266 <USBD_CtlError>
          break;
 800bc26:	bf00      	nop
      }
      break;
 800bc28:	e004      	b.n	800bc34 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fb1a 	bl	800c266 <USBD_CtlError>
      break;
 800bc32:	bf00      	nop
  }

  return ret;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	885b      	ldrh	r3, [r3, #2]
 800bc5a:	0a1b      	lsrs	r3, r3, #8
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	2b06      	cmp	r3, #6
 800bc62:	f200 8128 	bhi.w	800beb6 <USBD_GetDescriptor+0x276>
 800bc66:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <USBD_GetDescriptor+0x2c>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bc89 	.word	0x0800bc89
 800bc70:	0800bca1 	.word	0x0800bca1
 800bc74:	0800bce1 	.word	0x0800bce1
 800bc78:	0800beb7 	.word	0x0800beb7
 800bc7c:	0800beb7 	.word	0x0800beb7
 800bc80:	0800be57 	.word	0x0800be57
 800bc84:	0800be83 	.word	0x0800be83
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	7c12      	ldrb	r2, [r2, #16]
 800bc94:	f107 0108 	add.w	r1, r7, #8
 800bc98:	4610      	mov	r0, r2
 800bc9a:	4798      	blx	r3
 800bc9c:	60f8      	str	r0, [r7, #12]
      break;
 800bc9e:	e112      	b.n	800bec6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7c1b      	ldrb	r3, [r3, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10d      	bne.n	800bcc4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb0:	f107 0208 	add.w	r2, r7, #8
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	4798      	blx	r3
 800bcb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcc2:	e100      	b.n	800bec6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bccc:	f107 0208 	add.w	r2, r7, #8
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4798      	blx	r3
 800bcd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	2202      	movs	r2, #2
 800bcdc:	701a      	strb	r2, [r3, #0]
      break;
 800bcde:	e0f2      	b.n	800bec6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	885b      	ldrh	r3, [r3, #2]
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b05      	cmp	r3, #5
 800bce8:	f200 80ac 	bhi.w	800be44 <USBD_GetDescriptor+0x204>
 800bcec:	a201      	add	r2, pc, #4	; (adr r2, 800bcf4 <USBD_GetDescriptor+0xb4>)
 800bcee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf2:	bf00      	nop
 800bcf4:	0800bd0d 	.word	0x0800bd0d
 800bcf8:	0800bd41 	.word	0x0800bd41
 800bcfc:	0800bd75 	.word	0x0800bd75
 800bd00:	0800bda9 	.word	0x0800bda9
 800bd04:	0800bddd 	.word	0x0800bddd
 800bd08:	0800be11 	.word	0x0800be11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d00b      	beq.n	800bd30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	7c12      	ldrb	r2, [r2, #16]
 800bd24:	f107 0108 	add.w	r1, r7, #8
 800bd28:	4610      	mov	r0, r2
 800bd2a:	4798      	blx	r3
 800bd2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd2e:	e091      	b.n	800be54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd30:	6839      	ldr	r1, [r7, #0]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fa97 	bl	800c266 <USBD_CtlError>
            err++;
 800bd38:	7afb      	ldrb	r3, [r7, #11]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd3e:	e089      	b.n	800be54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00b      	beq.n	800bd64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	7c12      	ldrb	r2, [r2, #16]
 800bd58:	f107 0108 	add.w	r1, r7, #8
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4798      	blx	r3
 800bd60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd62:	e077      	b.n	800be54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 fa7d 	bl	800c266 <USBD_CtlError>
            err++;
 800bd6c:	7afb      	ldrb	r3, [r7, #11]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	72fb      	strb	r3, [r7, #11]
          break;
 800bd72:	e06f      	b.n	800be54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00b      	beq.n	800bd98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	7c12      	ldrb	r2, [r2, #16]
 800bd8c:	f107 0108 	add.w	r1, r7, #8
 800bd90:	4610      	mov	r0, r2
 800bd92:	4798      	blx	r3
 800bd94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd96:	e05d      	b.n	800be54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fa63 	bl	800c266 <USBD_CtlError>
            err++;
 800bda0:	7afb      	ldrb	r3, [r7, #11]
 800bda2:	3301      	adds	r3, #1
 800bda4:	72fb      	strb	r3, [r7, #11]
          break;
 800bda6:	e055      	b.n	800be54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00b      	beq.n	800bdcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	7c12      	ldrb	r2, [r2, #16]
 800bdc0:	f107 0108 	add.w	r1, r7, #8
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4798      	blx	r3
 800bdc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdca:	e043      	b.n	800be54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fa49 	bl	800c266 <USBD_CtlError>
            err++;
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdda:	e03b      	b.n	800be54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00b      	beq.n	800be00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	7c12      	ldrb	r2, [r2, #16]
 800bdf4:	f107 0108 	add.w	r1, r7, #8
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
 800bdfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdfe:	e029      	b.n	800be54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fa2f 	bl	800c266 <USBD_CtlError>
            err++;
 800be08:	7afb      	ldrb	r3, [r7, #11]
 800be0a:	3301      	adds	r3, #1
 800be0c:	72fb      	strb	r3, [r7, #11]
          break;
 800be0e:	e021      	b.n	800be54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	7c12      	ldrb	r2, [r2, #16]
 800be28:	f107 0108 	add.w	r1, r7, #8
 800be2c:	4610      	mov	r0, r2
 800be2e:	4798      	blx	r3
 800be30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be32:	e00f      	b.n	800be54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa15 	bl	800c266 <USBD_CtlError>
            err++;
 800be3c:	7afb      	ldrb	r3, [r7, #11]
 800be3e:	3301      	adds	r3, #1
 800be40:	72fb      	strb	r3, [r7, #11]
          break;
 800be42:	e007      	b.n	800be54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fa0d 	bl	800c266 <USBD_CtlError>
          err++;
 800be4c:	7afb      	ldrb	r3, [r7, #11]
 800be4e:	3301      	adds	r3, #1
 800be50:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800be52:	e038      	b.n	800bec6 <USBD_GetDescriptor+0x286>
 800be54:	e037      	b.n	800bec6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	7c1b      	ldrb	r3, [r3, #16]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d109      	bne.n	800be72 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be66:	f107 0208 	add.w	r2, r7, #8
 800be6a:	4610      	mov	r0, r2
 800be6c:	4798      	blx	r3
 800be6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be70:	e029      	b.n	800bec6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 f9f6 	bl	800c266 <USBD_CtlError>
        err++;
 800be7a:	7afb      	ldrb	r3, [r7, #11]
 800be7c:	3301      	adds	r3, #1
 800be7e:	72fb      	strb	r3, [r7, #11]
      break;
 800be80:	e021      	b.n	800bec6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	7c1b      	ldrb	r3, [r3, #16]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10d      	bne.n	800bea6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be92:	f107 0208 	add.w	r2, r7, #8
 800be96:	4610      	mov	r0, r2
 800be98:	4798      	blx	r3
 800be9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	3301      	adds	r3, #1
 800bea0:	2207      	movs	r2, #7
 800bea2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bea4:	e00f      	b.n	800bec6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f9dc 	bl	800c266 <USBD_CtlError>
        err++;
 800beae:	7afb      	ldrb	r3, [r7, #11]
 800beb0:	3301      	adds	r3, #1
 800beb2:	72fb      	strb	r3, [r7, #11]
      break;
 800beb4:	e007      	b.n	800bec6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f9d4 	bl	800c266 <USBD_CtlError>
      err++;
 800bebe:	7afb      	ldrb	r3, [r7, #11]
 800bec0:	3301      	adds	r3, #1
 800bec2:	72fb      	strb	r3, [r7, #11]
      break;
 800bec4:	bf00      	nop
  }

  if (err != 0U)
 800bec6:	7afb      	ldrb	r3, [r7, #11]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d11c      	bne.n	800bf06 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800becc:	893b      	ldrh	r3, [r7, #8]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d011      	beq.n	800bef6 <USBD_GetDescriptor+0x2b6>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	88db      	ldrh	r3, [r3, #6]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00d      	beq.n	800bef6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	88da      	ldrh	r2, [r3, #6]
 800bede:	893b      	ldrh	r3, [r7, #8]
 800bee0:	4293      	cmp	r3, r2
 800bee2:	bf28      	it	cs
 800bee4:	4613      	movcs	r3, r2
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800beea:	893b      	ldrh	r3, [r7, #8]
 800beec:	461a      	mov	r2, r3
 800beee:	68f9      	ldr	r1, [r7, #12]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fa22 	bl	800c33a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	88db      	ldrh	r3, [r3, #6]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d104      	bne.n	800bf08 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa79 	bl	800c3f6 <USBD_CtlSendStatus>
 800bf04:	e000      	b.n	800bf08 <USBD_GetDescriptor+0x2c8>
    return;
 800bf06:	bf00      	nop
    }
  }
}
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop

0800bf10 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	889b      	ldrh	r3, [r3, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d130      	bne.n	800bf84 <USBD_SetAddress+0x74>
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	88db      	ldrh	r3, [r3, #6]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d12c      	bne.n	800bf84 <USBD_SetAddress+0x74>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	2b7f      	cmp	r3, #127	; 0x7f
 800bf30:	d828      	bhi.n	800bf84 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	885b      	ldrh	r3, [r3, #2]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf44:	2b03      	cmp	r3, #3
 800bf46:	d104      	bne.n	800bf52 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f98b 	bl	800c266 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf50:	e01d      	b.n	800bf8e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	7bfa      	ldrb	r2, [r7, #15]
 800bf56:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fe22 	bl	800cba8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fa46 	bl	800c3f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d004      	beq.n	800bf7a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2202      	movs	r2, #2
 800bf74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf78:	e009      	b.n	800bf8e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf82:	e004      	b.n	800bf8e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f000 f96d 	bl	800c266 <USBD_CtlError>
  }
}
 800bf8c:	bf00      	nop
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	885b      	ldrh	r3, [r3, #2]
 800bfa6:	b2da      	uxtb	r2, r3
 800bfa8:	4b41      	ldr	r3, [pc, #260]	; (800c0b0 <USBD_SetConfig+0x118>)
 800bfaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfac:	4b40      	ldr	r3, [pc, #256]	; (800c0b0 <USBD_SetConfig+0x118>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d904      	bls.n	800bfbe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 f955 	bl	800c266 <USBD_CtlError>
 800bfbc:	e075      	b.n	800c0aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d002      	beq.n	800bfce <USBD_SetConfig+0x36>
 800bfc8:	2b03      	cmp	r3, #3
 800bfca:	d023      	beq.n	800c014 <USBD_SetConfig+0x7c>
 800bfcc:	e062      	b.n	800c094 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bfce:	4b38      	ldr	r3, [pc, #224]	; (800c0b0 <USBD_SetConfig+0x118>)
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d01a      	beq.n	800c00c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800bfd6:	4b36      	ldr	r3, [pc, #216]	; (800c0b0 <USBD_SetConfig+0x118>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bfe8:	4b31      	ldr	r3, [pc, #196]	; (800c0b0 <USBD_SetConfig+0x118>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	4619      	mov	r1, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff f9e8 	bl	800b3c4 <USBD_SetClassConfig>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	d104      	bne.n	800c004 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f932 	bl	800c266 <USBD_CtlError>
            return;
 800c002:	e052      	b.n	800c0aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f9f6 	bl	800c3f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c00a:	e04e      	b.n	800c0aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f9f2 	bl	800c3f6 <USBD_CtlSendStatus>
        break;
 800c012:	e04a      	b.n	800c0aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c014:	4b26      	ldr	r3, [pc, #152]	; (800c0b0 <USBD_SetConfig+0x118>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d112      	bne.n	800c042 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c024:	4b22      	ldr	r3, [pc, #136]	; (800c0b0 <USBD_SetConfig+0x118>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	461a      	mov	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c02e:	4b20      	ldr	r3, [pc, #128]	; (800c0b0 <USBD_SetConfig+0x118>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff f9e4 	bl	800b402 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f9db 	bl	800c3f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c040:	e033      	b.n	800c0aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c042:	4b1b      	ldr	r3, [pc, #108]	; (800c0b0 <USBD_SetConfig+0x118>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d01d      	beq.n	800c08c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	b2db      	uxtb	r3, r3
 800c056:	4619      	mov	r1, r3
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff f9d2 	bl	800b402 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c05e:	4b14      	ldr	r3, [pc, #80]	; (800c0b0 <USBD_SetConfig+0x118>)
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c068:	4b11      	ldr	r3, [pc, #68]	; (800c0b0 <USBD_SetConfig+0x118>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff f9a8 	bl	800b3c4 <USBD_SetClassConfig>
 800c074:	4603      	mov	r3, r0
 800c076:	2b02      	cmp	r3, #2
 800c078:	d104      	bne.n	800c084 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f8f2 	bl	800c266 <USBD_CtlError>
            return;
 800c082:	e012      	b.n	800c0aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f9b6 	bl	800c3f6 <USBD_CtlSendStatus>
        break;
 800c08a:	e00e      	b.n	800c0aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f9b2 	bl	800c3f6 <USBD_CtlSendStatus>
        break;
 800c092:	e00a      	b.n	800c0aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f8e5 	bl	800c266 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c09c:	4b04      	ldr	r3, [pc, #16]	; (800c0b0 <USBD_SetConfig+0x118>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff f9ad 	bl	800b402 <USBD_ClrClassConfig>
        break;
 800c0a8:	bf00      	nop
    }
  }
}
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	200013f0 	.word	0x200013f0

0800c0b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	88db      	ldrh	r3, [r3, #6]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d004      	beq.n	800c0d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f8cc 	bl	800c266 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0ce:	e022      	b.n	800c116 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d6:	2b02      	cmp	r3, #2
 800c0d8:	dc02      	bgt.n	800c0e0 <USBD_GetConfig+0x2c>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dc03      	bgt.n	800c0e6 <USBD_GetConfig+0x32>
 800c0de:	e015      	b.n	800c10c <USBD_GetConfig+0x58>
 800c0e0:	2b03      	cmp	r3, #3
 800c0e2:	d00b      	beq.n	800c0fc <USBD_GetConfig+0x48>
 800c0e4:	e012      	b.n	800c10c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	3308      	adds	r3, #8
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f920 	bl	800c33a <USBD_CtlSendData>
        break;
 800c0fa:	e00c      	b.n	800c116 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	3304      	adds	r3, #4
 800c100:	2201      	movs	r2, #1
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 f918 	bl	800c33a <USBD_CtlSendData>
        break;
 800c10a:	e004      	b.n	800c116 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f8a9 	bl	800c266 <USBD_CtlError>
        break;
 800c114:	bf00      	nop
}
 800c116:	bf00      	nop
 800c118:	3708      	adds	r7, #8
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c12e:	3b01      	subs	r3, #1
 800c130:	2b02      	cmp	r3, #2
 800c132:	d81e      	bhi.n	800c172 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	88db      	ldrh	r3, [r3, #6]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d004      	beq.n	800c146 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f891 	bl	800c266 <USBD_CtlError>
        break;
 800c144:	e01a      	b.n	800c17c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c152:	2b00      	cmp	r3, #0
 800c154:	d005      	beq.n	800c162 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	f043 0202 	orr.w	r2, r3, #2
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	330c      	adds	r3, #12
 800c166:	2202      	movs	r2, #2
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f8e5 	bl	800c33a <USBD_CtlSendData>
      break;
 800c170:	e004      	b.n	800c17c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f876 	bl	800c266 <USBD_CtlError>
      break;
 800c17a:	bf00      	nop
  }
}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	885b      	ldrh	r3, [r3, #2]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d106      	bne.n	800c1a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2201      	movs	r2, #1
 800c19a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f929 	bl	800c3f6 <USBD_CtlSendStatus>
  }
}
 800c1a4:	bf00      	nop
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d80b      	bhi.n	800c1da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	885b      	ldrh	r3, [r3, #2]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d10c      	bne.n	800c1e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f90f 	bl	800c3f6 <USBD_CtlSendStatus>
      }
      break;
 800c1d8:	e004      	b.n	800c1e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f842 	bl	800c266 <USBD_CtlError>
      break;
 800c1e2:	e000      	b.n	800c1e6 <USBD_ClrFeature+0x3a>
      break;
 800c1e4:	bf00      	nop
  }
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	b083      	sub	sp, #12
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	781a      	ldrb	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	785a      	ldrb	r2, [r3, #1]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	3302      	adds	r3, #2
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	b29a      	uxth	r2, r3
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	3303      	adds	r3, #3
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	b29b      	uxth	r3, r3
 800c218:	021b      	lsls	r3, r3, #8
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	4413      	add	r3, r2
 800c21e:	b29a      	uxth	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	3304      	adds	r3, #4
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	3305      	adds	r3, #5
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	b29b      	uxth	r3, r3
 800c234:	021b      	lsls	r3, r3, #8
 800c236:	b29b      	uxth	r3, r3
 800c238:	4413      	add	r3, r2
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	3306      	adds	r3, #6
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	b29a      	uxth	r2, r3
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	3307      	adds	r3, #7
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	b29b      	uxth	r3, r3
 800c250:	021b      	lsls	r3, r3, #8
 800c252:	b29b      	uxth	r3, r3
 800c254:	4413      	add	r3, r2
 800c256:	b29a      	uxth	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	80da      	strh	r2, [r3, #6]

}
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	bc80      	pop	{r7}
 800c264:	4770      	bx	lr

0800c266 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b082      	sub	sp, #8
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c270:	2180      	movs	r1, #128	; 0x80
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fc2e 	bl	800cad4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c278:	2100      	movs	r1, #0
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 fc2a 	bl	800cad4 <USBD_LL_StallEP>
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b086      	sub	sp, #24
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c294:	2300      	movs	r3, #0
 800c296:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d032      	beq.n	800c304 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 f834 	bl	800c30c <USBD_GetLen>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
 800c2b4:	1c5a      	adds	r2, r3, #1
 800c2b6:	75fa      	strb	r2, [r7, #23]
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	4413      	add	r3, r2
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	7812      	ldrb	r2, [r2, #0]
 800c2c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	1c5a      	adds	r2, r3, #1
 800c2c8:	75fa      	strb	r2, [r7, #23]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	2203      	movs	r2, #3
 800c2d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c2d4:	e012      	b.n	800c2fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	1c5a      	adds	r2, r3, #1
 800c2da:	60fa      	str	r2, [r7, #12]
 800c2dc:	7dfa      	ldrb	r2, [r7, #23]
 800c2de:	1c51      	adds	r1, r2, #1
 800c2e0:	75f9      	strb	r1, [r7, #23]
 800c2e2:	4611      	mov	r1, r2
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	440a      	add	r2, r1
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	1c5a      	adds	r2, r3, #1
 800c2f0:	75fa      	strb	r2, [r7, #23]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	4413      	add	r3, r2
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e8      	bne.n	800c2d6 <USBD_GetString+0x4e>
    }
  }
}
 800c304:	bf00      	nop
 800c306:	3718      	adds	r7, #24
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c314:	2300      	movs	r3, #0
 800c316:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c318:	e005      	b.n	800c326 <USBD_GetLen+0x1a>
  {
    len++;
 800c31a:	7bfb      	ldrb	r3, [r7, #15]
 800c31c:	3301      	adds	r3, #1
 800c31e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3301      	adds	r3, #1
 800c324:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1f5      	bne.n	800c31a <USBD_GetLen+0xe>
  }

  return len;
 800c32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c330:	4618      	mov	r0, r3
 800c332:	3714      	adds	r7, #20
 800c334:	46bd      	mov	sp, r7
 800c336:	bc80      	pop	{r7}
 800c338:	4770      	bx	lr

0800c33a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	60f8      	str	r0, [r7, #12]
 800c342:	60b9      	str	r1, [r7, #8]
 800c344:	4613      	mov	r3, r2
 800c346:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2202      	movs	r2, #2
 800c34c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c350:	88fa      	ldrh	r2, [r7, #6]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c356:	88fa      	ldrh	r2, [r7, #6]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c35c:	88fb      	ldrh	r3, [r7, #6]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	2100      	movs	r1, #0
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f000 fc3f 	bl	800cbe6 <USBD_LL_Transmit>

  return USBD_OK;
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}

0800c372 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c372:	b580      	push	{r7, lr}
 800c374:	b084      	sub	sp, #16
 800c376:	af00      	add	r7, sp, #0
 800c378:	60f8      	str	r0, [r7, #12]
 800c37a:	60b9      	str	r1, [r7, #8]
 800c37c:	4613      	mov	r3, r2
 800c37e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	2100      	movs	r1, #0
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f000 fc2d 	bl	800cbe6 <USBD_LL_Transmit>

  return USBD_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3710      	adds	r7, #16
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c396:	b580      	push	{r7, lr}
 800c398:	b084      	sub	sp, #16
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	60f8      	str	r0, [r7, #12]
 800c39e:	60b9      	str	r1, [r7, #8]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c3ac:	88fa      	ldrh	r2, [r7, #6]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c3b4:	88fa      	ldrh	r2, [r7, #6]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3bc:	88fb      	ldrh	r3, [r7, #6]
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f000 fc32 	bl	800cc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	60f8      	str	r0, [r7, #12]
 800c3da:	60b9      	str	r1, [r7, #8]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3e0:	88fb      	ldrh	r3, [r7, #6]
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f000 fc20 	bl	800cc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b082      	sub	sp, #8
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2204      	movs	r2, #4
 800c402:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c406:	2300      	movs	r3, #0
 800c408:	2200      	movs	r2, #0
 800c40a:	2100      	movs	r1, #0
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 fbea 	bl	800cbe6 <USBD_LL_Transmit>

  return USBD_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b082      	sub	sp, #8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2205      	movs	r2, #5
 800c428:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c42c:	2300      	movs	r3, #0
 800c42e:	2200      	movs	r2, #0
 800c430:	2100      	movs	r1, #0
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fbfa 	bl	800cc2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
	...

0800c444 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c448:	2200      	movs	r2, #0
 800c44a:	4912      	ldr	r1, [pc, #72]	; (800c494 <MX_USB_DEVICE_Init+0x50>)
 800c44c:	4812      	ldr	r0, [pc, #72]	; (800c498 <MX_USB_DEVICE_Init+0x54>)
 800c44e:	f7fe ff5f 	bl	800b310 <USBD_Init>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c458:	f7f4 fac0 	bl	80009dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c45c:	490f      	ldr	r1, [pc, #60]	; (800c49c <MX_USB_DEVICE_Init+0x58>)
 800c45e:	480e      	ldr	r0, [pc, #56]	; (800c498 <MX_USB_DEVICE_Init+0x54>)
 800c460:	f7fe ff81 	bl	800b366 <USBD_RegisterClass>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d001      	beq.n	800c46e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c46a:	f7f4 fab7 	bl	80009dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c46e:	490c      	ldr	r1, [pc, #48]	; (800c4a0 <MX_USB_DEVICE_Init+0x5c>)
 800c470:	4809      	ldr	r0, [pc, #36]	; (800c498 <MX_USB_DEVICE_Init+0x54>)
 800c472:	f7fe fee1 	bl	800b238 <USBD_CDC_RegisterInterface>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c47c:	f7f4 faae 	bl	80009dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c480:	4805      	ldr	r0, [pc, #20]	; (800c498 <MX_USB_DEVICE_Init+0x54>)
 800c482:	f7fe ff89 	bl	800b398 <USBD_Start>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d001      	beq.n	800c490 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c48c:	f7f4 faa6 	bl	80009dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c490:	bf00      	nop
 800c492:	bd80      	pop	{r7, pc}
 800c494:	2000092c 	.word	0x2000092c
 800c498:	200013f4 	.word	0x200013f4
 800c49c:	20000818 	.word	0x20000818
 800c4a0:	2000091c 	.word	0x2000091c

0800c4a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	4905      	ldr	r1, [pc, #20]	; (800c4c0 <CDC_Init_FS+0x1c>)
 800c4ac:	4805      	ldr	r0, [pc, #20]	; (800c4c4 <CDC_Init_FS+0x20>)
 800c4ae:	f7fe fed9 	bl	800b264 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c4b2:	4905      	ldr	r1, [pc, #20]	; (800c4c8 <CDC_Init_FS+0x24>)
 800c4b4:	4803      	ldr	r0, [pc, #12]	; (800c4c4 <CDC_Init_FS+0x20>)
 800c4b6:	f7fe feee 	bl	800b296 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c4ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20001ab8 	.word	0x20001ab8
 800c4c4:	200013f4 	.word	0x200013f4
 800c4c8:	200016b8 	.word	0x200016b8

0800c4cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c4d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bc80      	pop	{r7}
 800c4d8:	4770      	bx	lr
	...

0800c4dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	6039      	str	r1, [r7, #0]
 800c4e6:	71fb      	strb	r3, [r7, #7]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c4ec:	79fb      	ldrb	r3, [r7, #7]
 800c4ee:	2b23      	cmp	r3, #35	; 0x23
 800c4f0:	d84a      	bhi.n	800c588 <CDC_Control_FS+0xac>
 800c4f2:	a201      	add	r2, pc, #4	; (adr r2, 800c4f8 <CDC_Control_FS+0x1c>)
 800c4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f8:	0800c589 	.word	0x0800c589
 800c4fc:	0800c589 	.word	0x0800c589
 800c500:	0800c589 	.word	0x0800c589
 800c504:	0800c589 	.word	0x0800c589
 800c508:	0800c589 	.word	0x0800c589
 800c50c:	0800c589 	.word	0x0800c589
 800c510:	0800c589 	.word	0x0800c589
 800c514:	0800c589 	.word	0x0800c589
 800c518:	0800c589 	.word	0x0800c589
 800c51c:	0800c589 	.word	0x0800c589
 800c520:	0800c589 	.word	0x0800c589
 800c524:	0800c589 	.word	0x0800c589
 800c528:	0800c589 	.word	0x0800c589
 800c52c:	0800c589 	.word	0x0800c589
 800c530:	0800c589 	.word	0x0800c589
 800c534:	0800c589 	.word	0x0800c589
 800c538:	0800c589 	.word	0x0800c589
 800c53c:	0800c589 	.word	0x0800c589
 800c540:	0800c589 	.word	0x0800c589
 800c544:	0800c589 	.word	0x0800c589
 800c548:	0800c589 	.word	0x0800c589
 800c54c:	0800c589 	.word	0x0800c589
 800c550:	0800c589 	.word	0x0800c589
 800c554:	0800c589 	.word	0x0800c589
 800c558:	0800c589 	.word	0x0800c589
 800c55c:	0800c589 	.word	0x0800c589
 800c560:	0800c589 	.word	0x0800c589
 800c564:	0800c589 	.word	0x0800c589
 800c568:	0800c589 	.word	0x0800c589
 800c56c:	0800c589 	.word	0x0800c589
 800c570:	0800c589 	.word	0x0800c589
 800c574:	0800c589 	.word	0x0800c589
 800c578:	0800c589 	.word	0x0800c589
 800c57c:	0800c589 	.word	0x0800c589
 800c580:	0800c589 	.word	0x0800c589
 800c584:	0800c589 	.word	0x0800c589
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c588:	bf00      	nop
  }

  return (USBD_OK);
 800c58a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	370c      	adds	r7, #12
 800c590:	46bd      	mov	sp, r7
 800c592:	bc80      	pop	{r7}
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop

0800c598 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	4805      	ldr	r0, [pc, #20]	; (800c5bc <CDC_Receive_FS+0x24>)
 800c5a6:	f7fe fe76 	bl	800b296 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c5aa:	4804      	ldr	r0, [pc, #16]	; (800c5bc <CDC_Receive_FS+0x24>)
 800c5ac:	f7fe fe86 	bl	800b2bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c5b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3708      	adds	r7, #8
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	200013f4 	.word	0x200013f4

0800c5c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	6039      	str	r1, [r7, #0]
 800c5ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2212      	movs	r2, #18
 800c5d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c5d2:	4b03      	ldr	r3, [pc, #12]	; (800c5e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bc80      	pop	{r7}
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	20000948 	.word	0x20000948

0800c5e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	6039      	str	r1, [r7, #0]
 800c5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2204      	movs	r2, #4
 800c5f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c5f6:	4b03      	ldr	r3, [pc, #12]	; (800c604 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bc80      	pop	{r7}
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	2000095c 	.word	0x2000095c

0800c608 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	6039      	str	r1, [r7, #0]
 800c612:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c614:	79fb      	ldrb	r3, [r7, #7]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d105      	bne.n	800c626 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	4907      	ldr	r1, [pc, #28]	; (800c63c <USBD_FS_ProductStrDescriptor+0x34>)
 800c61e:	4808      	ldr	r0, [pc, #32]	; (800c640 <USBD_FS_ProductStrDescriptor+0x38>)
 800c620:	f7ff fe32 	bl	800c288 <USBD_GetString>
 800c624:	e004      	b.n	800c630 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	4904      	ldr	r1, [pc, #16]	; (800c63c <USBD_FS_ProductStrDescriptor+0x34>)
 800c62a:	4805      	ldr	r0, [pc, #20]	; (800c640 <USBD_FS_ProductStrDescriptor+0x38>)
 800c62c:	f7ff fe2c 	bl	800c288 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c630:	4b02      	ldr	r3, [pc, #8]	; (800c63c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c632:	4618      	mov	r0, r3
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	20001eb8 	.word	0x20001eb8
 800c640:	0800d6f0 	.word	0x0800d6f0

0800c644 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	6039      	str	r1, [r7, #0]
 800c64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	4904      	ldr	r1, [pc, #16]	; (800c664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c654:	4804      	ldr	r0, [pc, #16]	; (800c668 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c656:	f7ff fe17 	bl	800c288 <USBD_GetString>
  return USBD_StrDesc;
 800c65a:	4b02      	ldr	r3, [pc, #8]	; (800c664 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	20001eb8 	.word	0x20001eb8
 800c668:	0800d708 	.word	0x0800d708

0800c66c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	6039      	str	r1, [r7, #0]
 800c676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	221a      	movs	r2, #26
 800c67c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c67e:	f000 f843 	bl	800c708 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c682:	4b02      	ldr	r3, [pc, #8]	; (800c68c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c684:	4618      	mov	r0, r3
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	20000960 	.word	0x20000960

0800c690 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	6039      	str	r1, [r7, #0]
 800c69a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c69c:	79fb      	ldrb	r3, [r7, #7]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d105      	bne.n	800c6ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	4907      	ldr	r1, [pc, #28]	; (800c6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6a6:	4808      	ldr	r0, [pc, #32]	; (800c6c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6a8:	f7ff fdee 	bl	800c288 <USBD_GetString>
 800c6ac:	e004      	b.n	800c6b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	4904      	ldr	r1, [pc, #16]	; (800c6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6b2:	4805      	ldr	r0, [pc, #20]	; (800c6c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6b4:	f7ff fde8 	bl	800c288 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6b8:	4b02      	ldr	r3, [pc, #8]	; (800c6c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20001eb8 	.word	0x20001eb8
 800c6c8:	0800d71c 	.word	0x0800d71c

0800c6cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	6039      	str	r1, [r7, #0]
 800c6d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d105      	bne.n	800c6ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	4907      	ldr	r1, [pc, #28]	; (800c700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6e2:	4808      	ldr	r0, [pc, #32]	; (800c704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6e4:	f7ff fdd0 	bl	800c288 <USBD_GetString>
 800c6e8:	e004      	b.n	800c6f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4904      	ldr	r1, [pc, #16]	; (800c700 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c6ee:	4805      	ldr	r0, [pc, #20]	; (800c704 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c6f0:	f7ff fdca 	bl	800c288 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6f4:	4b02      	ldr	r3, [pc, #8]	; (800c700 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20001eb8 	.word	0x20001eb8
 800c704:	0800d728 	.word	0x0800d728

0800c708 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c70e:	4b0f      	ldr	r3, [pc, #60]	; (800c74c <Get_SerialNum+0x44>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c714:	4b0e      	ldr	r3, [pc, #56]	; (800c750 <Get_SerialNum+0x48>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c71a:	4b0e      	ldr	r3, [pc, #56]	; (800c754 <Get_SerialNum+0x4c>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c720:	68fa      	ldr	r2, [r7, #12]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	4413      	add	r3, r2
 800c726:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d009      	beq.n	800c742 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c72e:	2208      	movs	r2, #8
 800c730:	4909      	ldr	r1, [pc, #36]	; (800c758 <Get_SerialNum+0x50>)
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 f814 	bl	800c760 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c738:	2204      	movs	r2, #4
 800c73a:	4908      	ldr	r1, [pc, #32]	; (800c75c <Get_SerialNum+0x54>)
 800c73c:	68b8      	ldr	r0, [r7, #8]
 800c73e:	f000 f80f 	bl	800c760 <IntToUnicode>
  }
}
 800c742:	bf00      	nop
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	1ffff7e8 	.word	0x1ffff7e8
 800c750:	1ffff7ec 	.word	0x1ffff7ec
 800c754:	1ffff7f0 	.word	0x1ffff7f0
 800c758:	20000962 	.word	0x20000962
 800c75c:	20000972 	.word	0x20000972

0800c760 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c760:	b480      	push	{r7}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	4613      	mov	r3, r2
 800c76c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c772:	2300      	movs	r3, #0
 800c774:	75fb      	strb	r3, [r7, #23]
 800c776:	e027      	b.n	800c7c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	0f1b      	lsrs	r3, r3, #28
 800c77c:	2b09      	cmp	r3, #9
 800c77e:	d80b      	bhi.n	800c798 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	0f1b      	lsrs	r3, r3, #28
 800c784:	b2da      	uxtb	r2, r3
 800c786:	7dfb      	ldrb	r3, [r7, #23]
 800c788:	005b      	lsls	r3, r3, #1
 800c78a:	4619      	mov	r1, r3
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	440b      	add	r3, r1
 800c790:	3230      	adds	r2, #48	; 0x30
 800c792:	b2d2      	uxtb	r2, r2
 800c794:	701a      	strb	r2, [r3, #0]
 800c796:	e00a      	b.n	800c7ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	0f1b      	lsrs	r3, r3, #28
 800c79c:	b2da      	uxtb	r2, r3
 800c79e:	7dfb      	ldrb	r3, [r7, #23]
 800c7a0:	005b      	lsls	r3, r3, #1
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	440b      	add	r3, r1
 800c7a8:	3237      	adds	r2, #55	; 0x37
 800c7aa:	b2d2      	uxtb	r2, r2
 800c7ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	011b      	lsls	r3, r3, #4
 800c7b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	005b      	lsls	r3, r3, #1
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	4413      	add	r3, r2
 800c7be:	2200      	movs	r2, #0
 800c7c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	75fb      	strb	r3, [r7, #23]
 800c7c8:	7dfa      	ldrb	r2, [r7, #23]
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d3d3      	bcc.n	800c778 <IntToUnicode+0x18>
  }
}
 800c7d0:	bf00      	nop
 800c7d2:	bf00      	nop
 800c7d4:	371c      	adds	r7, #28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bc80      	pop	{r7}
 800c7da:	4770      	bx	lr

0800c7dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	4a0d      	ldr	r2, [pc, #52]	; (800c820 <HAL_PCD_MspInit+0x44>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d113      	bne.n	800c816 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c7ee:	4b0d      	ldr	r3, [pc, #52]	; (800c824 <HAL_PCD_MspInit+0x48>)
 800c7f0:	69db      	ldr	r3, [r3, #28]
 800c7f2:	4a0c      	ldr	r2, [pc, #48]	; (800c824 <HAL_PCD_MspInit+0x48>)
 800c7f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7f8:	61d3      	str	r3, [r2, #28]
 800c7fa:	4b0a      	ldr	r3, [pc, #40]	; (800c824 <HAL_PCD_MspInit+0x48>)
 800c7fc:	69db      	ldr	r3, [r3, #28]
 800c7fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c806:	2200      	movs	r2, #0
 800c808:	2100      	movs	r1, #0
 800c80a:	2014      	movs	r0, #20
 800c80c:	f7f7 f875 	bl	80038fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c810:	2014      	movs	r0, #20
 800c812:	f7f7 f88e 	bl	8003932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c816:	bf00      	nop
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	40005c00 	.word	0x40005c00
 800c824:	40021000 	.word	0x40021000

0800c828 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7fe fdf2 	bl	800b428 <USBD_LL_SetupStage>
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c85e:	78fa      	ldrb	r2, [r7, #3]
 800c860:	6879      	ldr	r1, [r7, #4]
 800c862:	4613      	mov	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	00db      	lsls	r3, r3, #3
 800c86a:	440b      	add	r3, r1
 800c86c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	78fb      	ldrb	r3, [r7, #3]
 800c874:	4619      	mov	r1, r3
 800c876:	f7fe fe24 	bl	800b4c2 <USBD_LL_DataOutStage>
}
 800c87a:	bf00      	nop
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}

0800c882 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c882:	b580      	push	{r7, lr}
 800c884:	b082      	sub	sp, #8
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	460b      	mov	r3, r1
 800c88c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c894:	78fa      	ldrb	r2, [r7, #3]
 800c896:	6879      	ldr	r1, [r7, #4]
 800c898:	4613      	mov	r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4413      	add	r3, r2
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	440b      	add	r3, r1
 800c8a2:	333c      	adds	r3, #60	; 0x3c
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	78fb      	ldrb	r3, [r7, #3]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	f7fe fe7b 	bl	800b5a4 <USBD_LL_DataInStage>
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fe ff8b 	bl	800b7e0 <USBD_LL_SOF>
}
 800c8ca:	bf00      	nop
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c8da:	2301      	movs	r3, #1
 800c8dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d001      	beq.n	800c8ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c8e6:	f7f4 f879 	bl	80009dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c8f0:	7bfa      	ldrb	r2, [r7, #15]
 800c8f2:	4611      	mov	r1, r2
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fe ff3b 	bl	800b770 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c900:	4618      	mov	r0, r3
 800c902:	f7fe fef4 	bl	800b6ee <USBD_LL_Reset>
}
 800c906:	bf00      	nop
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
	...

0800c910 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fe ff35 	bl	800b78e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d005      	beq.n	800c938 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c92c:	4b04      	ldr	r3, [pc, #16]	; (800c940 <HAL_PCD_SuspendCallback+0x30>)
 800c92e:	691b      	ldr	r3, [r3, #16]
 800c930:	4a03      	ldr	r2, [pc, #12]	; (800c940 <HAL_PCD_SuspendCallback+0x30>)
 800c932:	f043 0306 	orr.w	r3, r3, #6
 800c936:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c938:	bf00      	nop
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	e000ed00 	.word	0xe000ed00

0800c944 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe ff2f 	bl	800b7b6 <USBD_LL_Resume>
}
 800c958:	bf00      	nop
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c968:	4a28      	ldr	r2, [pc, #160]	; (800ca0c <USBD_LL_Init+0xac>)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4a26      	ldr	r2, [pc, #152]	; (800ca0c <USBD_LL_Init+0xac>)
 800c974:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c978:	4b24      	ldr	r3, [pc, #144]	; (800ca0c <USBD_LL_Init+0xac>)
 800c97a:	4a25      	ldr	r2, [pc, #148]	; (800ca10 <USBD_LL_Init+0xb0>)
 800c97c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c97e:	4b23      	ldr	r3, [pc, #140]	; (800ca0c <USBD_LL_Init+0xac>)
 800c980:	2208      	movs	r2, #8
 800c982:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c984:	4b21      	ldr	r3, [pc, #132]	; (800ca0c <USBD_LL_Init+0xac>)
 800c986:	2202      	movs	r2, #2
 800c988:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c98a:	4b20      	ldr	r3, [pc, #128]	; (800ca0c <USBD_LL_Init+0xac>)
 800c98c:	2200      	movs	r2, #0
 800c98e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c990:	4b1e      	ldr	r3, [pc, #120]	; (800ca0c <USBD_LL_Init+0xac>)
 800c992:	2200      	movs	r2, #0
 800c994:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c996:	4b1d      	ldr	r3, [pc, #116]	; (800ca0c <USBD_LL_Init+0xac>)
 800c998:	2200      	movs	r2, #0
 800c99a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c99c:	481b      	ldr	r0, [pc, #108]	; (800ca0c <USBD_LL_Init+0xac>)
 800c99e:	f7f7 fce1 	bl	8004364 <HAL_PCD_Init>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d001      	beq.n	800c9ac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c9a8:	f7f4 f818 	bl	80009dc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9b2:	2318      	movs	r3, #24
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	f7f9 f955 	bl	8005c66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9c2:	2358      	movs	r3, #88	; 0x58
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	2180      	movs	r1, #128	; 0x80
 800c9c8:	f7f9 f94d 	bl	8005c66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9d2:	23c0      	movs	r3, #192	; 0xc0
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	2181      	movs	r1, #129	; 0x81
 800c9d8:	f7f9 f945 	bl	8005c66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	2101      	movs	r1, #1
 800c9ea:	f7f9 f93c 	bl	8005c66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c9f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	2182      	movs	r1, #130	; 0x82
 800c9fc:	f7f9 f933 	bl	8005c66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ca00:	2300      	movs	r3, #0
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	200020b8 	.word	0x200020b8
 800ca10:	40005c00 	.word	0x40005c00

0800ca14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca20:	2300      	movs	r3, #0
 800ca22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7f7 fda5 	bl	800457a <HAL_PCD_Start>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 f94e 	bl	800ccd8 <USBD_Get_USB_Status>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	4608      	mov	r0, r1
 800ca54:	4611      	mov	r1, r2
 800ca56:	461a      	mov	r2, r3
 800ca58:	4603      	mov	r3, r0
 800ca5a:	70fb      	strb	r3, [r7, #3]
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	70bb      	strb	r3, [r7, #2]
 800ca60:	4613      	mov	r3, r2
 800ca62:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca72:	78bb      	ldrb	r3, [r7, #2]
 800ca74:	883a      	ldrh	r2, [r7, #0]
 800ca76:	78f9      	ldrb	r1, [r7, #3]
 800ca78:	f7f7 ff1d 	bl	80048b6 <HAL_PCD_EP_Open>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	4618      	mov	r0, r3
 800ca84:	f000 f928 	bl	800ccd8 <USBD_Get_USB_Status>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
 800ca9e:	460b      	mov	r3, r1
 800caa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cab0:	78fa      	ldrb	r2, [r7, #3]
 800cab2:	4611      	mov	r1, r2
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7f7 ff64 	bl	8004982 <HAL_PCD_EP_Close>
 800caba:	4603      	mov	r3, r0
 800cabc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f000 f909 	bl	800ccd8 <USBD_Get_USB_Status>
 800cac6:	4603      	mov	r3, r0
 800cac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cae0:	2300      	movs	r3, #0
 800cae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cae4:	2300      	movs	r3, #0
 800cae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caee:	78fa      	ldrb	r2, [r7, #3]
 800caf0:	4611      	mov	r1, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7f8 f824 	bl	8004b40 <HAL_PCD_EP_SetStall>
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 f8ea 	bl	800ccd8 <USBD_Get_USB_Status>
 800cb04:	4603      	mov	r3, r0
 800cb06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b084      	sub	sp, #16
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	6078      	str	r0, [r7, #4]
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb2c:	78fa      	ldrb	r2, [r7, #3]
 800cb2e:	4611      	mov	r1, r2
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f8 f865 	bl	8004c00 <HAL_PCD_EP_ClrStall>
 800cb36:	4603      	mov	r3, r0
 800cb38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 f8cb 	bl	800ccd8 <USBD_Get_USB_Status>
 800cb42:	4603      	mov	r3, r0
 800cb44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb46:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	da0c      	bge.n	800cb86 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb6c:	78fb      	ldrb	r3, [r7, #3]
 800cb6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb72:	68f9      	ldr	r1, [r7, #12]
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	4613      	mov	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	440b      	add	r3, r1
 800cb80:	3302      	adds	r3, #2
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	e00b      	b.n	800cb9e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb86:	78fb      	ldrb	r3, [r7, #3]
 800cb88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb8c:	68f9      	ldr	r1, [r7, #12]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4413      	add	r3, r2
 800cb94:	00db      	lsls	r3, r3, #3
 800cb96:	440b      	add	r3, r1
 800cb98:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cb9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bc80      	pop	{r7}
 800cba6:	4770      	bx	lr

0800cba8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbc2:	78fa      	ldrb	r2, [r7, #3]
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7f7 fe50 	bl	800486c <HAL_PCD_SetAddress>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 f880 	bl	800ccd8 <USBD_Get_USB_Status>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3710      	adds	r7, #16
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b086      	sub	sp, #24
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	60f8      	str	r0, [r7, #12]
 800cbee:	607a      	str	r2, [r7, #4]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	72fb      	strb	r3, [r7, #11]
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc08:	893b      	ldrh	r3, [r7, #8]
 800cc0a:	7af9      	ldrb	r1, [r7, #11]
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	f7f7 ff54 	bl	8004aba <HAL_PCD_EP_Transmit>
 800cc12:	4603      	mov	r3, r0
 800cc14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc16:	7dfb      	ldrb	r3, [r7, #23]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 f85d 	bl	800ccd8 <USBD_Get_USB_Status>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc22:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3718      	adds	r7, #24
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	607a      	str	r2, [r7, #4]
 800cc36:	461a      	mov	r2, r3
 800cc38:	460b      	mov	r3, r1
 800cc3a:	72fb      	strb	r3, [r7, #11]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc40:	2300      	movs	r3, #0
 800cc42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc44:	2300      	movs	r3, #0
 800cc46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc4e:	893b      	ldrh	r3, [r7, #8]
 800cc50:	7af9      	ldrb	r1, [r7, #11]
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	f7f7 fedd 	bl	8004a12 <HAL_PCD_EP_Receive>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 f83a 	bl	800ccd8 <USBD_Get_USB_Status>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc68:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3718      	adds	r7, #24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b082      	sub	sp, #8
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc84:	78fa      	ldrb	r2, [r7, #3]
 800cc86:	4611      	mov	r1, r2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7f7 feff 	bl	8004a8c <HAL_PCD_EP_GetRxCount>
 800cc8e:	4603      	mov	r3, r0
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b083      	sub	sp, #12
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cca0:	4b02      	ldr	r3, [pc, #8]	; (800ccac <USBD_static_malloc+0x14>)
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bc80      	pop	{r7}
 800ccaa:	4770      	bx	lr
 800ccac:	200023a4 	.word	0x200023a4

0800ccb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]

}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bc80      	pop	{r7}
 800ccc0:	4770      	bx	lr

0800ccc2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b083      	sub	sp, #12
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
 800ccca:	460b      	mov	r3, r1
 800cccc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bc80      	pop	{r7}
 800ccd6:	4770      	bx	lr

0800ccd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	4603      	mov	r3, r0
 800cce0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cce6:	79fb      	ldrb	r3, [r7, #7]
 800cce8:	2b03      	cmp	r3, #3
 800ccea:	d817      	bhi.n	800cd1c <USBD_Get_USB_Status+0x44>
 800ccec:	a201      	add	r2, pc, #4	; (adr r2, 800ccf4 <USBD_Get_USB_Status+0x1c>)
 800ccee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf2:	bf00      	nop
 800ccf4:	0800cd05 	.word	0x0800cd05
 800ccf8:	0800cd0b 	.word	0x0800cd0b
 800ccfc:	0800cd11 	.word	0x0800cd11
 800cd00:	0800cd17 	.word	0x0800cd17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd04:	2300      	movs	r3, #0
 800cd06:	73fb      	strb	r3, [r7, #15]
    break;
 800cd08:	e00b      	b.n	800cd22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd0a:	2302      	movs	r3, #2
 800cd0c:	73fb      	strb	r3, [r7, #15]
    break;
 800cd0e:	e008      	b.n	800cd22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd10:	2301      	movs	r3, #1
 800cd12:	73fb      	strb	r3, [r7, #15]
    break;
 800cd14:	e005      	b.n	800cd22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd16:	2302      	movs	r3, #2
 800cd18:	73fb      	strb	r3, [r7, #15]
    break;
 800cd1a:	e002      	b.n	800cd22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd20:	bf00      	nop
  }
  return usb_status;
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bc80      	pop	{r7}
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop

0800cd30 <__errno>:
 800cd30:	4b01      	ldr	r3, [pc, #4]	; (800cd38 <__errno+0x8>)
 800cd32:	6818      	ldr	r0, [r3, #0]
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	2000097c 	.word	0x2000097c

0800cd3c <__libc_init_array>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	2600      	movs	r6, #0
 800cd40:	4d0c      	ldr	r5, [pc, #48]	; (800cd74 <__libc_init_array+0x38>)
 800cd42:	4c0d      	ldr	r4, [pc, #52]	; (800cd78 <__libc_init_array+0x3c>)
 800cd44:	1b64      	subs	r4, r4, r5
 800cd46:	10a4      	asrs	r4, r4, #2
 800cd48:	42a6      	cmp	r6, r4
 800cd4a:	d109      	bne.n	800cd60 <__libc_init_array+0x24>
 800cd4c:	f000 fc9c 	bl	800d688 <_init>
 800cd50:	2600      	movs	r6, #0
 800cd52:	4d0a      	ldr	r5, [pc, #40]	; (800cd7c <__libc_init_array+0x40>)
 800cd54:	4c0a      	ldr	r4, [pc, #40]	; (800cd80 <__libc_init_array+0x44>)
 800cd56:	1b64      	subs	r4, r4, r5
 800cd58:	10a4      	asrs	r4, r4, #2
 800cd5a:	42a6      	cmp	r6, r4
 800cd5c:	d105      	bne.n	800cd6a <__libc_init_array+0x2e>
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
 800cd60:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd64:	4798      	blx	r3
 800cd66:	3601      	adds	r6, #1
 800cd68:	e7ee      	b.n	800cd48 <__libc_init_array+0xc>
 800cd6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd6e:	4798      	blx	r3
 800cd70:	3601      	adds	r6, #1
 800cd72:	e7f2      	b.n	800cd5a <__libc_init_array+0x1e>
 800cd74:	0800e594 	.word	0x0800e594
 800cd78:	0800e594 	.word	0x0800e594
 800cd7c:	0800e594 	.word	0x0800e594
 800cd80:	0800e598 	.word	0x0800e598

0800cd84 <memset>:
 800cd84:	4603      	mov	r3, r0
 800cd86:	4402      	add	r2, r0
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d100      	bne.n	800cd8e <memset+0xa>
 800cd8c:	4770      	bx	lr
 800cd8e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd92:	e7f9      	b.n	800cd88 <memset+0x4>

0800cd94 <siprintf>:
 800cd94:	b40e      	push	{r1, r2, r3}
 800cd96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd9a:	b500      	push	{lr}
 800cd9c:	b09c      	sub	sp, #112	; 0x70
 800cd9e:	ab1d      	add	r3, sp, #116	; 0x74
 800cda0:	9002      	str	r0, [sp, #8]
 800cda2:	9006      	str	r0, [sp, #24]
 800cda4:	9107      	str	r1, [sp, #28]
 800cda6:	9104      	str	r1, [sp, #16]
 800cda8:	4808      	ldr	r0, [pc, #32]	; (800cdcc <siprintf+0x38>)
 800cdaa:	4909      	ldr	r1, [pc, #36]	; (800cdd0 <siprintf+0x3c>)
 800cdac:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdb0:	9105      	str	r1, [sp, #20]
 800cdb2:	6800      	ldr	r0, [r0, #0]
 800cdb4:	a902      	add	r1, sp, #8
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	f000 f868 	bl	800ce8c <_svfiprintf_r>
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	9b02      	ldr	r3, [sp, #8]
 800cdc0:	701a      	strb	r2, [r3, #0]
 800cdc2:	b01c      	add	sp, #112	; 0x70
 800cdc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdc8:	b003      	add	sp, #12
 800cdca:	4770      	bx	lr
 800cdcc:	2000097c 	.word	0x2000097c
 800cdd0:	ffff0208 	.word	0xffff0208

0800cdd4 <__ssputs_r>:
 800cdd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdd8:	688e      	ldr	r6, [r1, #8]
 800cdda:	4682      	mov	sl, r0
 800cddc:	429e      	cmp	r6, r3
 800cdde:	460c      	mov	r4, r1
 800cde0:	4690      	mov	r8, r2
 800cde2:	461f      	mov	r7, r3
 800cde4:	d838      	bhi.n	800ce58 <__ssputs_r+0x84>
 800cde6:	898a      	ldrh	r2, [r1, #12]
 800cde8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdec:	d032      	beq.n	800ce54 <__ssputs_r+0x80>
 800cdee:	6825      	ldr	r5, [r4, #0]
 800cdf0:	6909      	ldr	r1, [r1, #16]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	eba5 0901 	sub.w	r9, r5, r1
 800cdf8:	6965      	ldr	r5, [r4, #20]
 800cdfa:	444b      	add	r3, r9
 800cdfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce04:	106d      	asrs	r5, r5, #1
 800ce06:	429d      	cmp	r5, r3
 800ce08:	bf38      	it	cc
 800ce0a:	461d      	movcc	r5, r3
 800ce0c:	0553      	lsls	r3, r2, #21
 800ce0e:	d531      	bpl.n	800ce74 <__ssputs_r+0xa0>
 800ce10:	4629      	mov	r1, r5
 800ce12:	f000 fb6f 	bl	800d4f4 <_malloc_r>
 800ce16:	4606      	mov	r6, r0
 800ce18:	b950      	cbnz	r0, 800ce30 <__ssputs_r+0x5c>
 800ce1a:	230c      	movs	r3, #12
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce20:	f8ca 3000 	str.w	r3, [sl]
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce2a:	81a3      	strh	r3, [r4, #12]
 800ce2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce30:	464a      	mov	r2, r9
 800ce32:	6921      	ldr	r1, [r4, #16]
 800ce34:	f000 face 	bl	800d3d4 <memcpy>
 800ce38:	89a3      	ldrh	r3, [r4, #12]
 800ce3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce42:	81a3      	strh	r3, [r4, #12]
 800ce44:	6126      	str	r6, [r4, #16]
 800ce46:	444e      	add	r6, r9
 800ce48:	6026      	str	r6, [r4, #0]
 800ce4a:	463e      	mov	r6, r7
 800ce4c:	6165      	str	r5, [r4, #20]
 800ce4e:	eba5 0509 	sub.w	r5, r5, r9
 800ce52:	60a5      	str	r5, [r4, #8]
 800ce54:	42be      	cmp	r6, r7
 800ce56:	d900      	bls.n	800ce5a <__ssputs_r+0x86>
 800ce58:	463e      	mov	r6, r7
 800ce5a:	4632      	mov	r2, r6
 800ce5c:	4641      	mov	r1, r8
 800ce5e:	6820      	ldr	r0, [r4, #0]
 800ce60:	f000 fac6 	bl	800d3f0 <memmove>
 800ce64:	68a3      	ldr	r3, [r4, #8]
 800ce66:	2000      	movs	r0, #0
 800ce68:	1b9b      	subs	r3, r3, r6
 800ce6a:	60a3      	str	r3, [r4, #8]
 800ce6c:	6823      	ldr	r3, [r4, #0]
 800ce6e:	4433      	add	r3, r6
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	e7db      	b.n	800ce2c <__ssputs_r+0x58>
 800ce74:	462a      	mov	r2, r5
 800ce76:	f000 fbb1 	bl	800d5dc <_realloc_r>
 800ce7a:	4606      	mov	r6, r0
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d1e1      	bne.n	800ce44 <__ssputs_r+0x70>
 800ce80:	4650      	mov	r0, sl
 800ce82:	6921      	ldr	r1, [r4, #16]
 800ce84:	f000 face 	bl	800d424 <_free_r>
 800ce88:	e7c7      	b.n	800ce1a <__ssputs_r+0x46>
	...

0800ce8c <_svfiprintf_r>:
 800ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce90:	4698      	mov	r8, r3
 800ce92:	898b      	ldrh	r3, [r1, #12]
 800ce94:	4607      	mov	r7, r0
 800ce96:	061b      	lsls	r3, r3, #24
 800ce98:	460d      	mov	r5, r1
 800ce9a:	4614      	mov	r4, r2
 800ce9c:	b09d      	sub	sp, #116	; 0x74
 800ce9e:	d50e      	bpl.n	800cebe <_svfiprintf_r+0x32>
 800cea0:	690b      	ldr	r3, [r1, #16]
 800cea2:	b963      	cbnz	r3, 800cebe <_svfiprintf_r+0x32>
 800cea4:	2140      	movs	r1, #64	; 0x40
 800cea6:	f000 fb25 	bl	800d4f4 <_malloc_r>
 800ceaa:	6028      	str	r0, [r5, #0]
 800ceac:	6128      	str	r0, [r5, #16]
 800ceae:	b920      	cbnz	r0, 800ceba <_svfiprintf_r+0x2e>
 800ceb0:	230c      	movs	r3, #12
 800ceb2:	603b      	str	r3, [r7, #0]
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceb8:	e0d1      	b.n	800d05e <_svfiprintf_r+0x1d2>
 800ceba:	2340      	movs	r3, #64	; 0x40
 800cebc:	616b      	str	r3, [r5, #20]
 800cebe:	2300      	movs	r3, #0
 800cec0:	9309      	str	r3, [sp, #36]	; 0x24
 800cec2:	2320      	movs	r3, #32
 800cec4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cec8:	2330      	movs	r3, #48	; 0x30
 800ceca:	f04f 0901 	mov.w	r9, #1
 800cece:	f8cd 800c 	str.w	r8, [sp, #12]
 800ced2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d078 <_svfiprintf_r+0x1ec>
 800ced6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceda:	4623      	mov	r3, r4
 800cedc:	469a      	mov	sl, r3
 800cede:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cee2:	b10a      	cbz	r2, 800cee8 <_svfiprintf_r+0x5c>
 800cee4:	2a25      	cmp	r2, #37	; 0x25
 800cee6:	d1f9      	bne.n	800cedc <_svfiprintf_r+0x50>
 800cee8:	ebba 0b04 	subs.w	fp, sl, r4
 800ceec:	d00b      	beq.n	800cf06 <_svfiprintf_r+0x7a>
 800ceee:	465b      	mov	r3, fp
 800cef0:	4622      	mov	r2, r4
 800cef2:	4629      	mov	r1, r5
 800cef4:	4638      	mov	r0, r7
 800cef6:	f7ff ff6d 	bl	800cdd4 <__ssputs_r>
 800cefa:	3001      	adds	r0, #1
 800cefc:	f000 80aa 	beq.w	800d054 <_svfiprintf_r+0x1c8>
 800cf00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf02:	445a      	add	r2, fp
 800cf04:	9209      	str	r2, [sp, #36]	; 0x24
 800cf06:	f89a 3000 	ldrb.w	r3, [sl]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f000 80a2 	beq.w	800d054 <_svfiprintf_r+0x1c8>
 800cf10:	2300      	movs	r3, #0
 800cf12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf1a:	f10a 0a01 	add.w	sl, sl, #1
 800cf1e:	9304      	str	r3, [sp, #16]
 800cf20:	9307      	str	r3, [sp, #28]
 800cf22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf26:	931a      	str	r3, [sp, #104]	; 0x68
 800cf28:	4654      	mov	r4, sl
 800cf2a:	2205      	movs	r2, #5
 800cf2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf30:	4851      	ldr	r0, [pc, #324]	; (800d078 <_svfiprintf_r+0x1ec>)
 800cf32:	f000 fa41 	bl	800d3b8 <memchr>
 800cf36:	9a04      	ldr	r2, [sp, #16]
 800cf38:	b9d8      	cbnz	r0, 800cf72 <_svfiprintf_r+0xe6>
 800cf3a:	06d0      	lsls	r0, r2, #27
 800cf3c:	bf44      	itt	mi
 800cf3e:	2320      	movmi	r3, #32
 800cf40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf44:	0711      	lsls	r1, r2, #28
 800cf46:	bf44      	itt	mi
 800cf48:	232b      	movmi	r3, #43	; 0x2b
 800cf4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf4e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf52:	2b2a      	cmp	r3, #42	; 0x2a
 800cf54:	d015      	beq.n	800cf82 <_svfiprintf_r+0xf6>
 800cf56:	4654      	mov	r4, sl
 800cf58:	2000      	movs	r0, #0
 800cf5a:	f04f 0c0a 	mov.w	ip, #10
 800cf5e:	9a07      	ldr	r2, [sp, #28]
 800cf60:	4621      	mov	r1, r4
 800cf62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf66:	3b30      	subs	r3, #48	; 0x30
 800cf68:	2b09      	cmp	r3, #9
 800cf6a:	d94e      	bls.n	800d00a <_svfiprintf_r+0x17e>
 800cf6c:	b1b0      	cbz	r0, 800cf9c <_svfiprintf_r+0x110>
 800cf6e:	9207      	str	r2, [sp, #28]
 800cf70:	e014      	b.n	800cf9c <_svfiprintf_r+0x110>
 800cf72:	eba0 0308 	sub.w	r3, r0, r8
 800cf76:	fa09 f303 	lsl.w	r3, r9, r3
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	46a2      	mov	sl, r4
 800cf7e:	9304      	str	r3, [sp, #16]
 800cf80:	e7d2      	b.n	800cf28 <_svfiprintf_r+0x9c>
 800cf82:	9b03      	ldr	r3, [sp, #12]
 800cf84:	1d19      	adds	r1, r3, #4
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	9103      	str	r1, [sp, #12]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bfbb      	ittet	lt
 800cf8e:	425b      	neglt	r3, r3
 800cf90:	f042 0202 	orrlt.w	r2, r2, #2
 800cf94:	9307      	strge	r3, [sp, #28]
 800cf96:	9307      	strlt	r3, [sp, #28]
 800cf98:	bfb8      	it	lt
 800cf9a:	9204      	strlt	r2, [sp, #16]
 800cf9c:	7823      	ldrb	r3, [r4, #0]
 800cf9e:	2b2e      	cmp	r3, #46	; 0x2e
 800cfa0:	d10c      	bne.n	800cfbc <_svfiprintf_r+0x130>
 800cfa2:	7863      	ldrb	r3, [r4, #1]
 800cfa4:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa6:	d135      	bne.n	800d014 <_svfiprintf_r+0x188>
 800cfa8:	9b03      	ldr	r3, [sp, #12]
 800cfaa:	3402      	adds	r4, #2
 800cfac:	1d1a      	adds	r2, r3, #4
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	9203      	str	r2, [sp, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	bfb8      	it	lt
 800cfb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cfba:	9305      	str	r3, [sp, #20]
 800cfbc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d07c <_svfiprintf_r+0x1f0>
 800cfc0:	2203      	movs	r2, #3
 800cfc2:	4650      	mov	r0, sl
 800cfc4:	7821      	ldrb	r1, [r4, #0]
 800cfc6:	f000 f9f7 	bl	800d3b8 <memchr>
 800cfca:	b140      	cbz	r0, 800cfde <_svfiprintf_r+0x152>
 800cfcc:	2340      	movs	r3, #64	; 0x40
 800cfce:	eba0 000a 	sub.w	r0, r0, sl
 800cfd2:	fa03 f000 	lsl.w	r0, r3, r0
 800cfd6:	9b04      	ldr	r3, [sp, #16]
 800cfd8:	3401      	adds	r4, #1
 800cfda:	4303      	orrs	r3, r0
 800cfdc:	9304      	str	r3, [sp, #16]
 800cfde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe2:	2206      	movs	r2, #6
 800cfe4:	4826      	ldr	r0, [pc, #152]	; (800d080 <_svfiprintf_r+0x1f4>)
 800cfe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfea:	f000 f9e5 	bl	800d3b8 <memchr>
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d038      	beq.n	800d064 <_svfiprintf_r+0x1d8>
 800cff2:	4b24      	ldr	r3, [pc, #144]	; (800d084 <_svfiprintf_r+0x1f8>)
 800cff4:	bb1b      	cbnz	r3, 800d03e <_svfiprintf_r+0x1b2>
 800cff6:	9b03      	ldr	r3, [sp, #12]
 800cff8:	3307      	adds	r3, #7
 800cffa:	f023 0307 	bic.w	r3, r3, #7
 800cffe:	3308      	adds	r3, #8
 800d000:	9303      	str	r3, [sp, #12]
 800d002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d004:	4433      	add	r3, r6
 800d006:	9309      	str	r3, [sp, #36]	; 0x24
 800d008:	e767      	b.n	800ceda <_svfiprintf_r+0x4e>
 800d00a:	460c      	mov	r4, r1
 800d00c:	2001      	movs	r0, #1
 800d00e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d012:	e7a5      	b.n	800cf60 <_svfiprintf_r+0xd4>
 800d014:	2300      	movs	r3, #0
 800d016:	f04f 0c0a 	mov.w	ip, #10
 800d01a:	4619      	mov	r1, r3
 800d01c:	3401      	adds	r4, #1
 800d01e:	9305      	str	r3, [sp, #20]
 800d020:	4620      	mov	r0, r4
 800d022:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d026:	3a30      	subs	r2, #48	; 0x30
 800d028:	2a09      	cmp	r2, #9
 800d02a:	d903      	bls.n	800d034 <_svfiprintf_r+0x1a8>
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d0c5      	beq.n	800cfbc <_svfiprintf_r+0x130>
 800d030:	9105      	str	r1, [sp, #20]
 800d032:	e7c3      	b.n	800cfbc <_svfiprintf_r+0x130>
 800d034:	4604      	mov	r4, r0
 800d036:	2301      	movs	r3, #1
 800d038:	fb0c 2101 	mla	r1, ip, r1, r2
 800d03c:	e7f0      	b.n	800d020 <_svfiprintf_r+0x194>
 800d03e:	ab03      	add	r3, sp, #12
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	462a      	mov	r2, r5
 800d044:	4638      	mov	r0, r7
 800d046:	4b10      	ldr	r3, [pc, #64]	; (800d088 <_svfiprintf_r+0x1fc>)
 800d048:	a904      	add	r1, sp, #16
 800d04a:	f3af 8000 	nop.w
 800d04e:	1c42      	adds	r2, r0, #1
 800d050:	4606      	mov	r6, r0
 800d052:	d1d6      	bne.n	800d002 <_svfiprintf_r+0x176>
 800d054:	89ab      	ldrh	r3, [r5, #12]
 800d056:	065b      	lsls	r3, r3, #25
 800d058:	f53f af2c 	bmi.w	800ceb4 <_svfiprintf_r+0x28>
 800d05c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d05e:	b01d      	add	sp, #116	; 0x74
 800d060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d064:	ab03      	add	r3, sp, #12
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	462a      	mov	r2, r5
 800d06a:	4638      	mov	r0, r7
 800d06c:	4b06      	ldr	r3, [pc, #24]	; (800d088 <_svfiprintf_r+0x1fc>)
 800d06e:	a904      	add	r1, sp, #16
 800d070:	f000 f87c 	bl	800d16c <_printf_i>
 800d074:	e7eb      	b.n	800d04e <_svfiprintf_r+0x1c2>
 800d076:	bf00      	nop
 800d078:	0800e55f 	.word	0x0800e55f
 800d07c:	0800e565 	.word	0x0800e565
 800d080:	0800e569 	.word	0x0800e569
 800d084:	00000000 	.word	0x00000000
 800d088:	0800cdd5 	.word	0x0800cdd5

0800d08c <_printf_common>:
 800d08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d090:	4616      	mov	r6, r2
 800d092:	4699      	mov	r9, r3
 800d094:	688a      	ldr	r2, [r1, #8]
 800d096:	690b      	ldr	r3, [r1, #16]
 800d098:	4607      	mov	r7, r0
 800d09a:	4293      	cmp	r3, r2
 800d09c:	bfb8      	it	lt
 800d09e:	4613      	movlt	r3, r2
 800d0a0:	6033      	str	r3, [r6, #0]
 800d0a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0ac:	b10a      	cbz	r2, 800d0b2 <_printf_common+0x26>
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	6033      	str	r3, [r6, #0]
 800d0b2:	6823      	ldr	r3, [r4, #0]
 800d0b4:	0699      	lsls	r1, r3, #26
 800d0b6:	bf42      	ittt	mi
 800d0b8:	6833      	ldrmi	r3, [r6, #0]
 800d0ba:	3302      	addmi	r3, #2
 800d0bc:	6033      	strmi	r3, [r6, #0]
 800d0be:	6825      	ldr	r5, [r4, #0]
 800d0c0:	f015 0506 	ands.w	r5, r5, #6
 800d0c4:	d106      	bne.n	800d0d4 <_printf_common+0x48>
 800d0c6:	f104 0a19 	add.w	sl, r4, #25
 800d0ca:	68e3      	ldr	r3, [r4, #12]
 800d0cc:	6832      	ldr	r2, [r6, #0]
 800d0ce:	1a9b      	subs	r3, r3, r2
 800d0d0:	42ab      	cmp	r3, r5
 800d0d2:	dc28      	bgt.n	800d126 <_printf_common+0x9a>
 800d0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0d8:	1e13      	subs	r3, r2, #0
 800d0da:	6822      	ldr	r2, [r4, #0]
 800d0dc:	bf18      	it	ne
 800d0de:	2301      	movne	r3, #1
 800d0e0:	0692      	lsls	r2, r2, #26
 800d0e2:	d42d      	bmi.n	800d140 <_printf_common+0xb4>
 800d0e4:	4649      	mov	r1, r9
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0ec:	47c0      	blx	r8
 800d0ee:	3001      	adds	r0, #1
 800d0f0:	d020      	beq.n	800d134 <_printf_common+0xa8>
 800d0f2:	6823      	ldr	r3, [r4, #0]
 800d0f4:	68e5      	ldr	r5, [r4, #12]
 800d0f6:	f003 0306 	and.w	r3, r3, #6
 800d0fa:	2b04      	cmp	r3, #4
 800d0fc:	bf18      	it	ne
 800d0fe:	2500      	movne	r5, #0
 800d100:	6832      	ldr	r2, [r6, #0]
 800d102:	f04f 0600 	mov.w	r6, #0
 800d106:	68a3      	ldr	r3, [r4, #8]
 800d108:	bf08      	it	eq
 800d10a:	1aad      	subeq	r5, r5, r2
 800d10c:	6922      	ldr	r2, [r4, #16]
 800d10e:	bf08      	it	eq
 800d110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d114:	4293      	cmp	r3, r2
 800d116:	bfc4      	itt	gt
 800d118:	1a9b      	subgt	r3, r3, r2
 800d11a:	18ed      	addgt	r5, r5, r3
 800d11c:	341a      	adds	r4, #26
 800d11e:	42b5      	cmp	r5, r6
 800d120:	d11a      	bne.n	800d158 <_printf_common+0xcc>
 800d122:	2000      	movs	r0, #0
 800d124:	e008      	b.n	800d138 <_printf_common+0xac>
 800d126:	2301      	movs	r3, #1
 800d128:	4652      	mov	r2, sl
 800d12a:	4649      	mov	r1, r9
 800d12c:	4638      	mov	r0, r7
 800d12e:	47c0      	blx	r8
 800d130:	3001      	adds	r0, #1
 800d132:	d103      	bne.n	800d13c <_printf_common+0xb0>
 800d134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13c:	3501      	adds	r5, #1
 800d13e:	e7c4      	b.n	800d0ca <_printf_common+0x3e>
 800d140:	2030      	movs	r0, #48	; 0x30
 800d142:	18e1      	adds	r1, r4, r3
 800d144:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d148:	1c5a      	adds	r2, r3, #1
 800d14a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d14e:	4422      	add	r2, r4
 800d150:	3302      	adds	r3, #2
 800d152:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d156:	e7c5      	b.n	800d0e4 <_printf_common+0x58>
 800d158:	2301      	movs	r3, #1
 800d15a:	4622      	mov	r2, r4
 800d15c:	4649      	mov	r1, r9
 800d15e:	4638      	mov	r0, r7
 800d160:	47c0      	blx	r8
 800d162:	3001      	adds	r0, #1
 800d164:	d0e6      	beq.n	800d134 <_printf_common+0xa8>
 800d166:	3601      	adds	r6, #1
 800d168:	e7d9      	b.n	800d11e <_printf_common+0x92>
	...

0800d16c <_printf_i>:
 800d16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d170:	7e0f      	ldrb	r7, [r1, #24]
 800d172:	4691      	mov	r9, r2
 800d174:	2f78      	cmp	r7, #120	; 0x78
 800d176:	4680      	mov	r8, r0
 800d178:	460c      	mov	r4, r1
 800d17a:	469a      	mov	sl, r3
 800d17c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d17e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d182:	d807      	bhi.n	800d194 <_printf_i+0x28>
 800d184:	2f62      	cmp	r7, #98	; 0x62
 800d186:	d80a      	bhi.n	800d19e <_printf_i+0x32>
 800d188:	2f00      	cmp	r7, #0
 800d18a:	f000 80d9 	beq.w	800d340 <_printf_i+0x1d4>
 800d18e:	2f58      	cmp	r7, #88	; 0x58
 800d190:	f000 80a4 	beq.w	800d2dc <_printf_i+0x170>
 800d194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d19c:	e03a      	b.n	800d214 <_printf_i+0xa8>
 800d19e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1a2:	2b15      	cmp	r3, #21
 800d1a4:	d8f6      	bhi.n	800d194 <_printf_i+0x28>
 800d1a6:	a101      	add	r1, pc, #4	; (adr r1, 800d1ac <_printf_i+0x40>)
 800d1a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1ac:	0800d205 	.word	0x0800d205
 800d1b0:	0800d219 	.word	0x0800d219
 800d1b4:	0800d195 	.word	0x0800d195
 800d1b8:	0800d195 	.word	0x0800d195
 800d1bc:	0800d195 	.word	0x0800d195
 800d1c0:	0800d195 	.word	0x0800d195
 800d1c4:	0800d219 	.word	0x0800d219
 800d1c8:	0800d195 	.word	0x0800d195
 800d1cc:	0800d195 	.word	0x0800d195
 800d1d0:	0800d195 	.word	0x0800d195
 800d1d4:	0800d195 	.word	0x0800d195
 800d1d8:	0800d327 	.word	0x0800d327
 800d1dc:	0800d249 	.word	0x0800d249
 800d1e0:	0800d309 	.word	0x0800d309
 800d1e4:	0800d195 	.word	0x0800d195
 800d1e8:	0800d195 	.word	0x0800d195
 800d1ec:	0800d349 	.word	0x0800d349
 800d1f0:	0800d195 	.word	0x0800d195
 800d1f4:	0800d249 	.word	0x0800d249
 800d1f8:	0800d195 	.word	0x0800d195
 800d1fc:	0800d195 	.word	0x0800d195
 800d200:	0800d311 	.word	0x0800d311
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	1d1a      	adds	r2, r3, #4
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	602a      	str	r2, [r5, #0]
 800d20c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d214:	2301      	movs	r3, #1
 800d216:	e0a4      	b.n	800d362 <_printf_i+0x1f6>
 800d218:	6820      	ldr	r0, [r4, #0]
 800d21a:	6829      	ldr	r1, [r5, #0]
 800d21c:	0606      	lsls	r6, r0, #24
 800d21e:	f101 0304 	add.w	r3, r1, #4
 800d222:	d50a      	bpl.n	800d23a <_printf_i+0xce>
 800d224:	680e      	ldr	r6, [r1, #0]
 800d226:	602b      	str	r3, [r5, #0]
 800d228:	2e00      	cmp	r6, #0
 800d22a:	da03      	bge.n	800d234 <_printf_i+0xc8>
 800d22c:	232d      	movs	r3, #45	; 0x2d
 800d22e:	4276      	negs	r6, r6
 800d230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d234:	230a      	movs	r3, #10
 800d236:	485e      	ldr	r0, [pc, #376]	; (800d3b0 <_printf_i+0x244>)
 800d238:	e019      	b.n	800d26e <_printf_i+0x102>
 800d23a:	680e      	ldr	r6, [r1, #0]
 800d23c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d240:	602b      	str	r3, [r5, #0]
 800d242:	bf18      	it	ne
 800d244:	b236      	sxthne	r6, r6
 800d246:	e7ef      	b.n	800d228 <_printf_i+0xbc>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	6820      	ldr	r0, [r4, #0]
 800d24c:	1d19      	adds	r1, r3, #4
 800d24e:	6029      	str	r1, [r5, #0]
 800d250:	0601      	lsls	r1, r0, #24
 800d252:	d501      	bpl.n	800d258 <_printf_i+0xec>
 800d254:	681e      	ldr	r6, [r3, #0]
 800d256:	e002      	b.n	800d25e <_printf_i+0xf2>
 800d258:	0646      	lsls	r6, r0, #25
 800d25a:	d5fb      	bpl.n	800d254 <_printf_i+0xe8>
 800d25c:	881e      	ldrh	r6, [r3, #0]
 800d25e:	2f6f      	cmp	r7, #111	; 0x6f
 800d260:	bf0c      	ite	eq
 800d262:	2308      	moveq	r3, #8
 800d264:	230a      	movne	r3, #10
 800d266:	4852      	ldr	r0, [pc, #328]	; (800d3b0 <_printf_i+0x244>)
 800d268:	2100      	movs	r1, #0
 800d26a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d26e:	6865      	ldr	r5, [r4, #4]
 800d270:	2d00      	cmp	r5, #0
 800d272:	bfa8      	it	ge
 800d274:	6821      	ldrge	r1, [r4, #0]
 800d276:	60a5      	str	r5, [r4, #8]
 800d278:	bfa4      	itt	ge
 800d27a:	f021 0104 	bicge.w	r1, r1, #4
 800d27e:	6021      	strge	r1, [r4, #0]
 800d280:	b90e      	cbnz	r6, 800d286 <_printf_i+0x11a>
 800d282:	2d00      	cmp	r5, #0
 800d284:	d04d      	beq.n	800d322 <_printf_i+0x1b6>
 800d286:	4615      	mov	r5, r2
 800d288:	fbb6 f1f3 	udiv	r1, r6, r3
 800d28c:	fb03 6711 	mls	r7, r3, r1, r6
 800d290:	5dc7      	ldrb	r7, [r0, r7]
 800d292:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d296:	4637      	mov	r7, r6
 800d298:	42bb      	cmp	r3, r7
 800d29a:	460e      	mov	r6, r1
 800d29c:	d9f4      	bls.n	800d288 <_printf_i+0x11c>
 800d29e:	2b08      	cmp	r3, #8
 800d2a0:	d10b      	bne.n	800d2ba <_printf_i+0x14e>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	07de      	lsls	r6, r3, #31
 800d2a6:	d508      	bpl.n	800d2ba <_printf_i+0x14e>
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	6861      	ldr	r1, [r4, #4]
 800d2ac:	4299      	cmp	r1, r3
 800d2ae:	bfde      	ittt	le
 800d2b0:	2330      	movle	r3, #48	; 0x30
 800d2b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2b6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d2ba:	1b52      	subs	r2, r2, r5
 800d2bc:	6122      	str	r2, [r4, #16]
 800d2be:	464b      	mov	r3, r9
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	f8cd a000 	str.w	sl, [sp]
 800d2c8:	aa03      	add	r2, sp, #12
 800d2ca:	f7ff fedf 	bl	800d08c <_printf_common>
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	d14c      	bne.n	800d36c <_printf_i+0x200>
 800d2d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2d6:	b004      	add	sp, #16
 800d2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2dc:	4834      	ldr	r0, [pc, #208]	; (800d3b0 <_printf_i+0x244>)
 800d2de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d2e2:	6829      	ldr	r1, [r5, #0]
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	f851 6b04 	ldr.w	r6, [r1], #4
 800d2ea:	6029      	str	r1, [r5, #0]
 800d2ec:	061d      	lsls	r5, r3, #24
 800d2ee:	d514      	bpl.n	800d31a <_printf_i+0x1ae>
 800d2f0:	07df      	lsls	r7, r3, #31
 800d2f2:	bf44      	itt	mi
 800d2f4:	f043 0320 	orrmi.w	r3, r3, #32
 800d2f8:	6023      	strmi	r3, [r4, #0]
 800d2fa:	b91e      	cbnz	r6, 800d304 <_printf_i+0x198>
 800d2fc:	6823      	ldr	r3, [r4, #0]
 800d2fe:	f023 0320 	bic.w	r3, r3, #32
 800d302:	6023      	str	r3, [r4, #0]
 800d304:	2310      	movs	r3, #16
 800d306:	e7af      	b.n	800d268 <_printf_i+0xfc>
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	f043 0320 	orr.w	r3, r3, #32
 800d30e:	6023      	str	r3, [r4, #0]
 800d310:	2378      	movs	r3, #120	; 0x78
 800d312:	4828      	ldr	r0, [pc, #160]	; (800d3b4 <_printf_i+0x248>)
 800d314:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d318:	e7e3      	b.n	800d2e2 <_printf_i+0x176>
 800d31a:	0659      	lsls	r1, r3, #25
 800d31c:	bf48      	it	mi
 800d31e:	b2b6      	uxthmi	r6, r6
 800d320:	e7e6      	b.n	800d2f0 <_printf_i+0x184>
 800d322:	4615      	mov	r5, r2
 800d324:	e7bb      	b.n	800d29e <_printf_i+0x132>
 800d326:	682b      	ldr	r3, [r5, #0]
 800d328:	6826      	ldr	r6, [r4, #0]
 800d32a:	1d18      	adds	r0, r3, #4
 800d32c:	6961      	ldr	r1, [r4, #20]
 800d32e:	6028      	str	r0, [r5, #0]
 800d330:	0635      	lsls	r5, r6, #24
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	d501      	bpl.n	800d33a <_printf_i+0x1ce>
 800d336:	6019      	str	r1, [r3, #0]
 800d338:	e002      	b.n	800d340 <_printf_i+0x1d4>
 800d33a:	0670      	lsls	r0, r6, #25
 800d33c:	d5fb      	bpl.n	800d336 <_printf_i+0x1ca>
 800d33e:	8019      	strh	r1, [r3, #0]
 800d340:	2300      	movs	r3, #0
 800d342:	4615      	mov	r5, r2
 800d344:	6123      	str	r3, [r4, #16]
 800d346:	e7ba      	b.n	800d2be <_printf_i+0x152>
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	2100      	movs	r1, #0
 800d34c:	1d1a      	adds	r2, r3, #4
 800d34e:	602a      	str	r2, [r5, #0]
 800d350:	681d      	ldr	r5, [r3, #0]
 800d352:	6862      	ldr	r2, [r4, #4]
 800d354:	4628      	mov	r0, r5
 800d356:	f000 f82f 	bl	800d3b8 <memchr>
 800d35a:	b108      	cbz	r0, 800d360 <_printf_i+0x1f4>
 800d35c:	1b40      	subs	r0, r0, r5
 800d35e:	6060      	str	r0, [r4, #4]
 800d360:	6863      	ldr	r3, [r4, #4]
 800d362:	6123      	str	r3, [r4, #16]
 800d364:	2300      	movs	r3, #0
 800d366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d36a:	e7a8      	b.n	800d2be <_printf_i+0x152>
 800d36c:	462a      	mov	r2, r5
 800d36e:	4649      	mov	r1, r9
 800d370:	4640      	mov	r0, r8
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	47d0      	blx	sl
 800d376:	3001      	adds	r0, #1
 800d378:	d0ab      	beq.n	800d2d2 <_printf_i+0x166>
 800d37a:	6823      	ldr	r3, [r4, #0]
 800d37c:	079b      	lsls	r3, r3, #30
 800d37e:	d413      	bmi.n	800d3a8 <_printf_i+0x23c>
 800d380:	68e0      	ldr	r0, [r4, #12]
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	4298      	cmp	r0, r3
 800d386:	bfb8      	it	lt
 800d388:	4618      	movlt	r0, r3
 800d38a:	e7a4      	b.n	800d2d6 <_printf_i+0x16a>
 800d38c:	2301      	movs	r3, #1
 800d38e:	4632      	mov	r2, r6
 800d390:	4649      	mov	r1, r9
 800d392:	4640      	mov	r0, r8
 800d394:	47d0      	blx	sl
 800d396:	3001      	adds	r0, #1
 800d398:	d09b      	beq.n	800d2d2 <_printf_i+0x166>
 800d39a:	3501      	adds	r5, #1
 800d39c:	68e3      	ldr	r3, [r4, #12]
 800d39e:	9903      	ldr	r1, [sp, #12]
 800d3a0:	1a5b      	subs	r3, r3, r1
 800d3a2:	42ab      	cmp	r3, r5
 800d3a4:	dcf2      	bgt.n	800d38c <_printf_i+0x220>
 800d3a6:	e7eb      	b.n	800d380 <_printf_i+0x214>
 800d3a8:	2500      	movs	r5, #0
 800d3aa:	f104 0619 	add.w	r6, r4, #25
 800d3ae:	e7f5      	b.n	800d39c <_printf_i+0x230>
 800d3b0:	0800e570 	.word	0x0800e570
 800d3b4:	0800e581 	.word	0x0800e581

0800d3b8 <memchr>:
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	b510      	push	{r4, lr}
 800d3bc:	b2c9      	uxtb	r1, r1
 800d3be:	4402      	add	r2, r0
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	d101      	bne.n	800d3ca <memchr+0x12>
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	e003      	b.n	800d3d2 <memchr+0x1a>
 800d3ca:	7804      	ldrb	r4, [r0, #0]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	428c      	cmp	r4, r1
 800d3d0:	d1f6      	bne.n	800d3c0 <memchr+0x8>
 800d3d2:	bd10      	pop	{r4, pc}

0800d3d4 <memcpy>:
 800d3d4:	440a      	add	r2, r1
 800d3d6:	4291      	cmp	r1, r2
 800d3d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d3dc:	d100      	bne.n	800d3e0 <memcpy+0xc>
 800d3de:	4770      	bx	lr
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3e6:	4291      	cmp	r1, r2
 800d3e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3ec:	d1f9      	bne.n	800d3e2 <memcpy+0xe>
 800d3ee:	bd10      	pop	{r4, pc}

0800d3f0 <memmove>:
 800d3f0:	4288      	cmp	r0, r1
 800d3f2:	b510      	push	{r4, lr}
 800d3f4:	eb01 0402 	add.w	r4, r1, r2
 800d3f8:	d902      	bls.n	800d400 <memmove+0x10>
 800d3fa:	4284      	cmp	r4, r0
 800d3fc:	4623      	mov	r3, r4
 800d3fe:	d807      	bhi.n	800d410 <memmove+0x20>
 800d400:	1e43      	subs	r3, r0, #1
 800d402:	42a1      	cmp	r1, r4
 800d404:	d008      	beq.n	800d418 <memmove+0x28>
 800d406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d40a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d40e:	e7f8      	b.n	800d402 <memmove+0x12>
 800d410:	4601      	mov	r1, r0
 800d412:	4402      	add	r2, r0
 800d414:	428a      	cmp	r2, r1
 800d416:	d100      	bne.n	800d41a <memmove+0x2a>
 800d418:	bd10      	pop	{r4, pc}
 800d41a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d41e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d422:	e7f7      	b.n	800d414 <memmove+0x24>

0800d424 <_free_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	4605      	mov	r5, r0
 800d428:	2900      	cmp	r1, #0
 800d42a:	d040      	beq.n	800d4ae <_free_r+0x8a>
 800d42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d430:	1f0c      	subs	r4, r1, #4
 800d432:	2b00      	cmp	r3, #0
 800d434:	bfb8      	it	lt
 800d436:	18e4      	addlt	r4, r4, r3
 800d438:	f000 f910 	bl	800d65c <__malloc_lock>
 800d43c:	4a1c      	ldr	r2, [pc, #112]	; (800d4b0 <_free_r+0x8c>)
 800d43e:	6813      	ldr	r3, [r2, #0]
 800d440:	b933      	cbnz	r3, 800d450 <_free_r+0x2c>
 800d442:	6063      	str	r3, [r4, #4]
 800d444:	6014      	str	r4, [r2, #0]
 800d446:	4628      	mov	r0, r5
 800d448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d44c:	f000 b90c 	b.w	800d668 <__malloc_unlock>
 800d450:	42a3      	cmp	r3, r4
 800d452:	d908      	bls.n	800d466 <_free_r+0x42>
 800d454:	6820      	ldr	r0, [r4, #0]
 800d456:	1821      	adds	r1, r4, r0
 800d458:	428b      	cmp	r3, r1
 800d45a:	bf01      	itttt	eq
 800d45c:	6819      	ldreq	r1, [r3, #0]
 800d45e:	685b      	ldreq	r3, [r3, #4]
 800d460:	1809      	addeq	r1, r1, r0
 800d462:	6021      	streq	r1, [r4, #0]
 800d464:	e7ed      	b.n	800d442 <_free_r+0x1e>
 800d466:	461a      	mov	r2, r3
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	b10b      	cbz	r3, 800d470 <_free_r+0x4c>
 800d46c:	42a3      	cmp	r3, r4
 800d46e:	d9fa      	bls.n	800d466 <_free_r+0x42>
 800d470:	6811      	ldr	r1, [r2, #0]
 800d472:	1850      	adds	r0, r2, r1
 800d474:	42a0      	cmp	r0, r4
 800d476:	d10b      	bne.n	800d490 <_free_r+0x6c>
 800d478:	6820      	ldr	r0, [r4, #0]
 800d47a:	4401      	add	r1, r0
 800d47c:	1850      	adds	r0, r2, r1
 800d47e:	4283      	cmp	r3, r0
 800d480:	6011      	str	r1, [r2, #0]
 800d482:	d1e0      	bne.n	800d446 <_free_r+0x22>
 800d484:	6818      	ldr	r0, [r3, #0]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	4401      	add	r1, r0
 800d48a:	6011      	str	r1, [r2, #0]
 800d48c:	6053      	str	r3, [r2, #4]
 800d48e:	e7da      	b.n	800d446 <_free_r+0x22>
 800d490:	d902      	bls.n	800d498 <_free_r+0x74>
 800d492:	230c      	movs	r3, #12
 800d494:	602b      	str	r3, [r5, #0]
 800d496:	e7d6      	b.n	800d446 <_free_r+0x22>
 800d498:	6820      	ldr	r0, [r4, #0]
 800d49a:	1821      	adds	r1, r4, r0
 800d49c:	428b      	cmp	r3, r1
 800d49e:	bf01      	itttt	eq
 800d4a0:	6819      	ldreq	r1, [r3, #0]
 800d4a2:	685b      	ldreq	r3, [r3, #4]
 800d4a4:	1809      	addeq	r1, r1, r0
 800d4a6:	6021      	streq	r1, [r4, #0]
 800d4a8:	6063      	str	r3, [r4, #4]
 800d4aa:	6054      	str	r4, [r2, #4]
 800d4ac:	e7cb      	b.n	800d446 <_free_r+0x22>
 800d4ae:	bd38      	pop	{r3, r4, r5, pc}
 800d4b0:	200025c4 	.word	0x200025c4

0800d4b4 <sbrk_aligned>:
 800d4b4:	b570      	push	{r4, r5, r6, lr}
 800d4b6:	4e0e      	ldr	r6, [pc, #56]	; (800d4f0 <sbrk_aligned+0x3c>)
 800d4b8:	460c      	mov	r4, r1
 800d4ba:	6831      	ldr	r1, [r6, #0]
 800d4bc:	4605      	mov	r5, r0
 800d4be:	b911      	cbnz	r1, 800d4c6 <sbrk_aligned+0x12>
 800d4c0:	f000 f8bc 	bl	800d63c <_sbrk_r>
 800d4c4:	6030      	str	r0, [r6, #0]
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	f000 f8b7 	bl	800d63c <_sbrk_r>
 800d4ce:	1c43      	adds	r3, r0, #1
 800d4d0:	d00a      	beq.n	800d4e8 <sbrk_aligned+0x34>
 800d4d2:	1cc4      	adds	r4, r0, #3
 800d4d4:	f024 0403 	bic.w	r4, r4, #3
 800d4d8:	42a0      	cmp	r0, r4
 800d4da:	d007      	beq.n	800d4ec <sbrk_aligned+0x38>
 800d4dc:	1a21      	subs	r1, r4, r0
 800d4de:	4628      	mov	r0, r5
 800d4e0:	f000 f8ac 	bl	800d63c <_sbrk_r>
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	d101      	bne.n	800d4ec <sbrk_aligned+0x38>
 800d4e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	200025c8 	.word	0x200025c8

0800d4f4 <_malloc_r>:
 800d4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f8:	1ccd      	adds	r5, r1, #3
 800d4fa:	f025 0503 	bic.w	r5, r5, #3
 800d4fe:	3508      	adds	r5, #8
 800d500:	2d0c      	cmp	r5, #12
 800d502:	bf38      	it	cc
 800d504:	250c      	movcc	r5, #12
 800d506:	2d00      	cmp	r5, #0
 800d508:	4607      	mov	r7, r0
 800d50a:	db01      	blt.n	800d510 <_malloc_r+0x1c>
 800d50c:	42a9      	cmp	r1, r5
 800d50e:	d905      	bls.n	800d51c <_malloc_r+0x28>
 800d510:	230c      	movs	r3, #12
 800d512:	2600      	movs	r6, #0
 800d514:	603b      	str	r3, [r7, #0]
 800d516:	4630      	mov	r0, r6
 800d518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d51c:	4e2e      	ldr	r6, [pc, #184]	; (800d5d8 <_malloc_r+0xe4>)
 800d51e:	f000 f89d 	bl	800d65c <__malloc_lock>
 800d522:	6833      	ldr	r3, [r6, #0]
 800d524:	461c      	mov	r4, r3
 800d526:	bb34      	cbnz	r4, 800d576 <_malloc_r+0x82>
 800d528:	4629      	mov	r1, r5
 800d52a:	4638      	mov	r0, r7
 800d52c:	f7ff ffc2 	bl	800d4b4 <sbrk_aligned>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	4604      	mov	r4, r0
 800d534:	d14d      	bne.n	800d5d2 <_malloc_r+0xde>
 800d536:	6834      	ldr	r4, [r6, #0]
 800d538:	4626      	mov	r6, r4
 800d53a:	2e00      	cmp	r6, #0
 800d53c:	d140      	bne.n	800d5c0 <_malloc_r+0xcc>
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	4631      	mov	r1, r6
 800d542:	4638      	mov	r0, r7
 800d544:	eb04 0803 	add.w	r8, r4, r3
 800d548:	f000 f878 	bl	800d63c <_sbrk_r>
 800d54c:	4580      	cmp	r8, r0
 800d54e:	d13a      	bne.n	800d5c6 <_malloc_r+0xd2>
 800d550:	6821      	ldr	r1, [r4, #0]
 800d552:	3503      	adds	r5, #3
 800d554:	1a6d      	subs	r5, r5, r1
 800d556:	f025 0503 	bic.w	r5, r5, #3
 800d55a:	3508      	adds	r5, #8
 800d55c:	2d0c      	cmp	r5, #12
 800d55e:	bf38      	it	cc
 800d560:	250c      	movcc	r5, #12
 800d562:	4638      	mov	r0, r7
 800d564:	4629      	mov	r1, r5
 800d566:	f7ff ffa5 	bl	800d4b4 <sbrk_aligned>
 800d56a:	3001      	adds	r0, #1
 800d56c:	d02b      	beq.n	800d5c6 <_malloc_r+0xd2>
 800d56e:	6823      	ldr	r3, [r4, #0]
 800d570:	442b      	add	r3, r5
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	e00e      	b.n	800d594 <_malloc_r+0xa0>
 800d576:	6822      	ldr	r2, [r4, #0]
 800d578:	1b52      	subs	r2, r2, r5
 800d57a:	d41e      	bmi.n	800d5ba <_malloc_r+0xc6>
 800d57c:	2a0b      	cmp	r2, #11
 800d57e:	d916      	bls.n	800d5ae <_malloc_r+0xba>
 800d580:	1961      	adds	r1, r4, r5
 800d582:	42a3      	cmp	r3, r4
 800d584:	6025      	str	r5, [r4, #0]
 800d586:	bf18      	it	ne
 800d588:	6059      	strne	r1, [r3, #4]
 800d58a:	6863      	ldr	r3, [r4, #4]
 800d58c:	bf08      	it	eq
 800d58e:	6031      	streq	r1, [r6, #0]
 800d590:	5162      	str	r2, [r4, r5]
 800d592:	604b      	str	r3, [r1, #4]
 800d594:	4638      	mov	r0, r7
 800d596:	f104 060b 	add.w	r6, r4, #11
 800d59a:	f000 f865 	bl	800d668 <__malloc_unlock>
 800d59e:	f026 0607 	bic.w	r6, r6, #7
 800d5a2:	1d23      	adds	r3, r4, #4
 800d5a4:	1af2      	subs	r2, r6, r3
 800d5a6:	d0b6      	beq.n	800d516 <_malloc_r+0x22>
 800d5a8:	1b9b      	subs	r3, r3, r6
 800d5aa:	50a3      	str	r3, [r4, r2]
 800d5ac:	e7b3      	b.n	800d516 <_malloc_r+0x22>
 800d5ae:	6862      	ldr	r2, [r4, #4]
 800d5b0:	42a3      	cmp	r3, r4
 800d5b2:	bf0c      	ite	eq
 800d5b4:	6032      	streq	r2, [r6, #0]
 800d5b6:	605a      	strne	r2, [r3, #4]
 800d5b8:	e7ec      	b.n	800d594 <_malloc_r+0xa0>
 800d5ba:	4623      	mov	r3, r4
 800d5bc:	6864      	ldr	r4, [r4, #4]
 800d5be:	e7b2      	b.n	800d526 <_malloc_r+0x32>
 800d5c0:	4634      	mov	r4, r6
 800d5c2:	6876      	ldr	r6, [r6, #4]
 800d5c4:	e7b9      	b.n	800d53a <_malloc_r+0x46>
 800d5c6:	230c      	movs	r3, #12
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	603b      	str	r3, [r7, #0]
 800d5cc:	f000 f84c 	bl	800d668 <__malloc_unlock>
 800d5d0:	e7a1      	b.n	800d516 <_malloc_r+0x22>
 800d5d2:	6025      	str	r5, [r4, #0]
 800d5d4:	e7de      	b.n	800d594 <_malloc_r+0xa0>
 800d5d6:	bf00      	nop
 800d5d8:	200025c4 	.word	0x200025c4

0800d5dc <_realloc_r>:
 800d5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e0:	4680      	mov	r8, r0
 800d5e2:	4614      	mov	r4, r2
 800d5e4:	460e      	mov	r6, r1
 800d5e6:	b921      	cbnz	r1, 800d5f2 <_realloc_r+0x16>
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ee:	f7ff bf81 	b.w	800d4f4 <_malloc_r>
 800d5f2:	b92a      	cbnz	r2, 800d600 <_realloc_r+0x24>
 800d5f4:	f7ff ff16 	bl	800d424 <_free_r>
 800d5f8:	4625      	mov	r5, r4
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	f000 f838 	bl	800d674 <_malloc_usable_size_r>
 800d604:	4284      	cmp	r4, r0
 800d606:	4607      	mov	r7, r0
 800d608:	d802      	bhi.n	800d610 <_realloc_r+0x34>
 800d60a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d60e:	d812      	bhi.n	800d636 <_realloc_r+0x5a>
 800d610:	4621      	mov	r1, r4
 800d612:	4640      	mov	r0, r8
 800d614:	f7ff ff6e 	bl	800d4f4 <_malloc_r>
 800d618:	4605      	mov	r5, r0
 800d61a:	2800      	cmp	r0, #0
 800d61c:	d0ed      	beq.n	800d5fa <_realloc_r+0x1e>
 800d61e:	42bc      	cmp	r4, r7
 800d620:	4622      	mov	r2, r4
 800d622:	4631      	mov	r1, r6
 800d624:	bf28      	it	cs
 800d626:	463a      	movcs	r2, r7
 800d628:	f7ff fed4 	bl	800d3d4 <memcpy>
 800d62c:	4631      	mov	r1, r6
 800d62e:	4640      	mov	r0, r8
 800d630:	f7ff fef8 	bl	800d424 <_free_r>
 800d634:	e7e1      	b.n	800d5fa <_realloc_r+0x1e>
 800d636:	4635      	mov	r5, r6
 800d638:	e7df      	b.n	800d5fa <_realloc_r+0x1e>
	...

0800d63c <_sbrk_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	2300      	movs	r3, #0
 800d640:	4d05      	ldr	r5, [pc, #20]	; (800d658 <_sbrk_r+0x1c>)
 800d642:	4604      	mov	r4, r0
 800d644:	4608      	mov	r0, r1
 800d646:	602b      	str	r3, [r5, #0]
 800d648:	f7f3 fbda 	bl	8000e00 <_sbrk>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d102      	bne.n	800d656 <_sbrk_r+0x1a>
 800d650:	682b      	ldr	r3, [r5, #0]
 800d652:	b103      	cbz	r3, 800d656 <_sbrk_r+0x1a>
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	bd38      	pop	{r3, r4, r5, pc}
 800d658:	200025cc 	.word	0x200025cc

0800d65c <__malloc_lock>:
 800d65c:	4801      	ldr	r0, [pc, #4]	; (800d664 <__malloc_lock+0x8>)
 800d65e:	f000 b811 	b.w	800d684 <__retarget_lock_acquire_recursive>
 800d662:	bf00      	nop
 800d664:	200025d0 	.word	0x200025d0

0800d668 <__malloc_unlock>:
 800d668:	4801      	ldr	r0, [pc, #4]	; (800d670 <__malloc_unlock+0x8>)
 800d66a:	f000 b80c 	b.w	800d686 <__retarget_lock_release_recursive>
 800d66e:	bf00      	nop
 800d670:	200025d0 	.word	0x200025d0

0800d674 <_malloc_usable_size_r>:
 800d674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d678:	1f18      	subs	r0, r3, #4
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	bfbc      	itt	lt
 800d67e:	580b      	ldrlt	r3, [r1, r0]
 800d680:	18c0      	addlt	r0, r0, r3
 800d682:	4770      	bx	lr

0800d684 <__retarget_lock_acquire_recursive>:
 800d684:	4770      	bx	lr

0800d686 <__retarget_lock_release_recursive>:
 800d686:	4770      	bx	lr

0800d688 <_init>:
 800d688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68a:	bf00      	nop
 800d68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68e:	bc08      	pop	{r3}
 800d690:	469e      	mov	lr, r3
 800d692:	4770      	bx	lr

0800d694 <_fini>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	bf00      	nop
 800d698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d69a:	bc08      	pop	{r3}
 800d69c:	469e      	mov	lr, r3
 800d69e:	4770      	bx	lr
